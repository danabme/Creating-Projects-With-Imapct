{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Creating Projects with Impact Welcome! This intelligent textbook helps you design and launch projects that create measurable, real-world impact. It combines short lessons, quick checks, and interactive MicroSims, all organized by a Learning Graph . Who it\u2019s for: students, founders, nonprofit leaders, and peacebuilders What you\u2019ll learn: social entrepreneurship, design thinking, business models, and how to turn ideas into projects with measurable impact How to use this book: skim the syllabus \u2192 take quick checks \u2192 explore simulations \u2192 build your capstone mini-project","title":"Home"},{"location":"#creating-projects-with-impact","text":"Welcome! This intelligent textbook helps you design and launch projects that create measurable, real-world impact. It combines short lessons, quick checks, and interactive MicroSims, all organized by a Learning Graph . Who it\u2019s for: students, founders, nonprofit leaders, and peacebuilders What you\u2019ll learn: social entrepreneurship, design thinking, business models, and how to turn ideas into projects with measurable impact How to use this book: skim the syllabus \u2192 take quick checks \u2192 explore simulations \u2192 build your capstone mini-project","title":"Creating Projects with Impact"},{"location":"about/","text":"About This Site This website is part of a series of resources to help teachers from around the world create the foundation for free and open intelligent textbooks. Our focus today is to help instructors create Level 2 textbooks that have a learning graph as their core data structure to ground content generation and guide learning agents. Our Book Generation Workflow If you are new to the book generation process, we strongly suggest you use the following infographic MicroSim workflow to get a feeling of how we generate content but always keep humans in the loop to guide content generation process. The Mechanics of Book Building After you get an overview of the steps to generate guided content around a learning graph, the next step is to understand the basic mechanics of getting your LLM content into a website. Although there are are many ways to store intelligent textbooks on a website, this guide focuses on the best practices of using LLMs to generate Markdown and then convert that Markdown to a beautiful website built with HTML, CSS and JavaScript. Many of our teachers can't afford expense service for hosting their intelligent textbooks. Since GitHub Pages is a free service for public website, we show how to use GitHub Pages and publishing tools that support Markdown, code highlighting and equations on GitHub. Why Mkdos Material? When we gave ChatGPT the following requirements: Content is stored in Markdown format Easy publishing to GitHub Pages Ability to store rich media (Infographics and MicroSims) Ability to format concent such as equations and code with text highlighting Here is the summary of ChatGPT's recommendation: !!! Quote \"\" MkDocs with the Material Theme is the most aligned with your requirements due to its simplicity, robust features, and ease of deployment to GitHub Pages. It handles code highlighting and mathematical formulas gracefully and has a straightforward configuration process. We have also found the mkdocs-material support extremely good, with our questions often being answered within hours. Because of the close match of mkdocs-material's features with our intelligent textbook requirements, we have created about 30 sample websites that test these tools. We have also found that mkdocs-material can be quickly extended to support the features we need in advanced intelligent textbooks. Note that these tools generate a 2.9 level intelligent textbook. THis is up to but does not include personalization to the knowledge of the student. This gets your textbook ready to move to level 3, where a knowledge graph of what concepts they are aware of are used to generate personalized content. We hope the glossary and tutorials we provide are useful. References Sample ChatGPT Dialog About the Cover Our cover features Nell, one of the main characters in the book \"Diamond Age\" by Neal Stephenson. !!! prompt Please generate a detailed summary of the parts of the book \"Diamond Age\" by Neal Stephenson that deal with \"The Primer\". Give examples of how content is created that is customized to the needs of students. (given to Anthropic Claude) I'll create a detailed summary of \"The Primer\" from Neal Stephenson's \"The Diamond Age\" that follows mkdocs standards for formatting. The Primer in \"The Diamond Age\" Overview of the Young Lady's Illustrated Primer The Young Lady's Illustrated Primer is a revolutionary educational device in Neal Stephenson's novel \"The Diamond Age: Or, A Young Lady's Illustrated Primer.\" Created by engineer John Percival Hackworth for a neo-Victorian leader's granddaughter, the Primer represents the ultimate intelligent textbook\u2014a fully interactive, adaptive learning system embedded in the form of a book. Key Characteristics of the Primer Adaptive Content Generation The Primer exemplifies hyper-personalization, adapting its content to the individual needs of its reader. Unlike traditional textbooks with fixed content, the Primer generates material in real-time, creating a unique learning experience that evolves with the learner's progress and interests. Interactive Learning The Primer doesn't just present information; it actively engages its reader through: Interactive stories that respond to the reader's choices Embedded microsimulations (similar to MicroSims) that illustrate concepts through hands-on interaction Responsive characters that guide learning through dialogue and mentorship Learning Graph Implementation The Primer implicitly implements a learning graph\u2014a directed network of concepts organized to reflect the optimal sequence for mastering new skills and knowledge areas. As the reader progresses, the Primer identifies knowledge gaps and dynamically adjusts its teaching strategies. The Primer's Impact on Characters Nell's Experience The main demonstration of the Primer's capabilities comes through Nell, an underprivileged girl who accidentally receives a copy. The Primer transforms her education by: Beginning with basic literacy, teaching her to read through interactive storytelling Gradually introducing more complex concepts as she masters foundational skills Creating a fantasy narrative called \"Princess Nell\" that parallels her real-life challenges Embedding coding and logical thinking exercises within the context of stories Adapting its difficulty level based on her growing capabilities For example, when teaching Nell about computer programming, the Primer presents the concept through a magical castle where she must arrange \"magical symbols\" (code) in the correct order to open doors\u2014making abstract concepts concrete and personally meaningful. Customization Examples The Primer demonstrates several advanced customization techniques: Content Relevance : When teaching Nell about defense, it uses scenarios with threatening characters similar to those in her real life Pace Adaptation : The Primer identifies when Nell struggles with mathematics and creates multiple engaging scenarios to practice the same concepts until mastery Emotional Intelligence : Recognizing Nell's emotional state, the Primer adjusts its tone and content\u2014providing encouragement when needed or challenging material when she's confident Cultural Context : The Primer incorporates elements of Nell's surroundings into its stories, making abstract concepts relatable Technical Implementation in the Novel While necessarily futuristic, the Primer's functionality includes: A concept graph that maps relationships between ideas Deep linking capabilities that connect related concepts across different stories and lessons Embedding technology that analyzes the semantic meaning of content to identify conceptually similar material Semantic search capabilities that understand the contextual meaning of queries beyond simple keyword matching Modern Parallels The novel presciently anticipates many features of modern intelligent textbooks, including real-time customization, chatbot integration, and agent-based learning. While contemporary technology has not yet achieved the Primer's level of sophistication, many of its core principles\u2014adaptive learning paths, interactive simulations, and personalized content\u2014are being implemented in current educational technologies. Philosophical Implications The Primer raises important questions about education: The balance between standardized knowledge and personalized learning paths The role of human teachers versus technological education systems How educational content shapes personal development and worldview The ethical implications of AI-driven education that knows its students intimately Conclusion The Young Lady's Illustrated Primer represents Neal Stephenson's vision of education's future\u2014a continuously adaptive, deeply personalized learning companion that grows with its reader. Its ability to transform Nell from an illiterate, disadvantaged child into a highly educated leader demonstrates the potential of truly intelligent educational technology to democratize knowledge and overcome socioeconomic barriers to education.","title":"About This Site"},{"location":"about/#about-this-site","text":"This website is part of a series of resources to help teachers from around the world create the foundation for free and open intelligent textbooks. Our focus today is to help instructors create Level 2 textbooks that have a learning graph as their core data structure to ground content generation and guide learning agents.","title":"About This Site"},{"location":"about/#our-book-generation-workflow","text":"If you are new to the book generation process, we strongly suggest you use the following infographic MicroSim workflow to get a feeling of how we generate content but always keep humans in the loop to guide content generation process.","title":"Our Book Generation Workflow"},{"location":"about/#the-mechanics-of-book-building","text":"After you get an overview of the steps to generate guided content around a learning graph, the next step is to understand the basic mechanics of getting your LLM content into a website. Although there are are many ways to store intelligent textbooks on a website, this guide focuses on the best practices of using LLMs to generate Markdown and then convert that Markdown to a beautiful website built with HTML, CSS and JavaScript. Many of our teachers can't afford expense service for hosting their intelligent textbooks. Since GitHub Pages is a free service for public website, we show how to use GitHub Pages and publishing tools that support Markdown, code highlighting and equations on GitHub.","title":"The Mechanics of Book Building"},{"location":"about/#why-mkdos-material","text":"When we gave ChatGPT the following requirements: Content is stored in Markdown format Easy publishing to GitHub Pages Ability to store rich media (Infographics and MicroSims) Ability to format concent such as equations and code with text highlighting Here is the summary of ChatGPT's recommendation: !!! Quote \"\" MkDocs with the Material Theme is the most aligned with your requirements due to its simplicity, robust features, and ease of deployment to GitHub Pages. It handles code highlighting and mathematical formulas gracefully and has a straightforward configuration process. We have also found the mkdocs-material support extremely good, with our questions often being answered within hours. Because of the close match of mkdocs-material's features with our intelligent textbook requirements, we have created about 30 sample websites that test these tools. We have also found that mkdocs-material can be quickly extended to support the features we need in advanced intelligent textbooks. Note that these tools generate a 2.9 level intelligent textbook. THis is up to but does not include personalization to the knowledge of the student. This gets your textbook ready to move to level 3, where a knowledge graph of what concepts they are aware of are used to generate personalized content. We hope the glossary and tutorials we provide are useful.","title":"Why Mkdos Material?"},{"location":"about/#references","text":"Sample ChatGPT Dialog","title":"References"},{"location":"about/#about-the-cover","text":"Our cover features Nell, one of the main characters in the book \"Diamond Age\" by Neal Stephenson. !!! prompt Please generate a detailed summary of the parts of the book \"Diamond Age\" by Neal Stephenson that deal with \"The Primer\". Give examples of how content is created that is customized to the needs of students. (given to Anthropic Claude) I'll create a detailed summary of \"The Primer\" from Neal Stephenson's \"The Diamond Age\" that follows mkdocs standards for formatting.","title":"About the Cover"},{"location":"about/#the-primer-in-the-diamond-age","text":"","title":"The Primer in \"The Diamond Age\""},{"location":"about/#overview-of-the-young-ladys-illustrated-primer","text":"The Young Lady's Illustrated Primer is a revolutionary educational device in Neal Stephenson's novel \"The Diamond Age: Or, A Young Lady's Illustrated Primer.\" Created by engineer John Percival Hackworth for a neo-Victorian leader's granddaughter, the Primer represents the ultimate intelligent textbook\u2014a fully interactive, adaptive learning system embedded in the form of a book.","title":"Overview of the Young Lady's Illustrated Primer"},{"location":"about/#key-characteristics-of-the-primer","text":"","title":"Key Characteristics of the Primer"},{"location":"about/#adaptive-content-generation","text":"The Primer exemplifies hyper-personalization, adapting its content to the individual needs of its reader. Unlike traditional textbooks with fixed content, the Primer generates material in real-time, creating a unique learning experience that evolves with the learner's progress and interests.","title":"Adaptive Content Generation"},{"location":"about/#interactive-learning","text":"The Primer doesn't just present information; it actively engages its reader through: Interactive stories that respond to the reader's choices Embedded microsimulations (similar to MicroSims) that illustrate concepts through hands-on interaction Responsive characters that guide learning through dialogue and mentorship","title":"Interactive Learning"},{"location":"about/#learning-graph-implementation","text":"The Primer implicitly implements a learning graph\u2014a directed network of concepts organized to reflect the optimal sequence for mastering new skills and knowledge areas. As the reader progresses, the Primer identifies knowledge gaps and dynamically adjusts its teaching strategies.","title":"Learning Graph Implementation"},{"location":"about/#the-primers-impact-on-characters","text":"","title":"The Primer's Impact on Characters"},{"location":"about/#nells-experience","text":"The main demonstration of the Primer's capabilities comes through Nell, an underprivileged girl who accidentally receives a copy. The Primer transforms her education by: Beginning with basic literacy, teaching her to read through interactive storytelling Gradually introducing more complex concepts as she masters foundational skills Creating a fantasy narrative called \"Princess Nell\" that parallels her real-life challenges Embedding coding and logical thinking exercises within the context of stories Adapting its difficulty level based on her growing capabilities For example, when teaching Nell about computer programming, the Primer presents the concept through a magical castle where she must arrange \"magical symbols\" (code) in the correct order to open doors\u2014making abstract concepts concrete and personally meaningful.","title":"Nell's Experience"},{"location":"about/#customization-examples","text":"The Primer demonstrates several advanced customization techniques: Content Relevance : When teaching Nell about defense, it uses scenarios with threatening characters similar to those in her real life Pace Adaptation : The Primer identifies when Nell struggles with mathematics and creates multiple engaging scenarios to practice the same concepts until mastery Emotional Intelligence : Recognizing Nell's emotional state, the Primer adjusts its tone and content\u2014providing encouragement when needed or challenging material when she's confident Cultural Context : The Primer incorporates elements of Nell's surroundings into its stories, making abstract concepts relatable","title":"Customization Examples"},{"location":"about/#technical-implementation-in-the-novel","text":"While necessarily futuristic, the Primer's functionality includes: A concept graph that maps relationships between ideas Deep linking capabilities that connect related concepts across different stories and lessons Embedding technology that analyzes the semantic meaning of content to identify conceptually similar material Semantic search capabilities that understand the contextual meaning of queries beyond simple keyword matching","title":"Technical Implementation in the Novel"},{"location":"about/#modern-parallels","text":"The novel presciently anticipates many features of modern intelligent textbooks, including real-time customization, chatbot integration, and agent-based learning. While contemporary technology has not yet achieved the Primer's level of sophistication, many of its core principles\u2014adaptive learning paths, interactive simulations, and personalized content\u2014are being implemented in current educational technologies.","title":"Modern Parallels"},{"location":"about/#philosophical-implications","text":"The Primer raises important questions about education: The balance between standardized knowledge and personalized learning paths The role of human teachers versus technological education systems How educational content shapes personal development and worldview The ethical implications of AI-driven education that knows its students intimately","title":"Philosophical Implications"},{"location":"about/#conclusion","text":"The Young Lady's Illustrated Primer represents Neal Stephenson's vision of education's future\u2014a continuously adaptive, deeply personalized learning companion that grows with its reader. Its ability to transform Nell from an illiterate, disadvantaged child into a highly educated leader demonstrates the potential of truly intelligent educational technology to democratize knowledge and overcome socioeconomic barriers to education.","title":"Conclusion"},{"location":"book-table-of-contents/","text":"Intelligent Textbooks: Table of Contents Home About ths Site Mission and Values Tutorial Introduction Getting Started Directory Structure Levels of Interactivity Markdown Navigation Admonitions Prompt Copy Admonition Quizzes Upper Alpha Lists Adding a MicroSim Testing Feedback Logging Search Social Open Graph Google Analytics Logo and Favicon Educational concepts Introduction Intelligence Levels Bloom's Taxonomy Scaffolding Learning Graph Open Educational Resources Prompts Introduction Feature Mapping Learning Graph Introduction Enumerate Concepts Dependency Graph Concept Taxonomy Generate Logo Generate Cover Image Intelligence Level Questions Semantic Search Word Cloud Quality Metrics Discord Admin Workflows Introduction Course Description Bloom's Taxonomy Concept Enumeration Concept Dependency Concept Taxonomy Learning Graph Chapters and Sections Glossary FAQs Figures, Diagrams and Charts Interactive Infographics MicroSims Graphic Novel MicroSims Introduction Book Levels Bloom's Taxonomy Learning Graph Levels of Interactivity Book Generation Workflow Word Cloud Gallery Sine Wave AI Pace Accelerating Templates Case Studies Intro Formatting Tests Introduction Code Highlighting Markdown Admonitions Quizzes Equations Social Media Preview Social Media Override Preview End Matter Feedback Glossary License FAQ How We Built This Site References Contact","title":"Intelligent Textbooks: Table of Contents"},{"location":"book-table-of-contents/#intelligent-textbooks-table-of-contents","text":"Home About ths Site Mission and Values","title":"Intelligent Textbooks: Table of Contents"},{"location":"book-table-of-contents/#tutorial","text":"Introduction Getting Started Directory Structure Levels of Interactivity Markdown Navigation Admonitions Prompt Copy Admonition Quizzes Upper Alpha Lists Adding a MicroSim Testing Feedback Logging Search Social Open Graph Google Analytics Logo and Favicon","title":"Tutorial"},{"location":"book-table-of-contents/#educational-concepts","text":"Introduction Intelligence Levels Bloom's Taxonomy Scaffolding Learning Graph Open Educational Resources","title":"Educational concepts"},{"location":"book-table-of-contents/#prompts","text":"Introduction Feature Mapping","title":"Prompts"},{"location":"book-table-of-contents/#learning-graph","text":"Introduction Enumerate Concepts Dependency Graph Concept Taxonomy Generate Logo Generate Cover Image Intelligence Level Questions Semantic Search Word Cloud Quality Metrics Discord Admin","title":"Learning Graph"},{"location":"book-table-of-contents/#workflows","text":"Introduction Course Description Bloom's Taxonomy Concept Enumeration Concept Dependency Concept Taxonomy Learning Graph Chapters and Sections Glossary FAQs Figures, Diagrams and Charts Interactive Infographics MicroSims Graphic Novel","title":"Workflows"},{"location":"book-table-of-contents/#microsims","text":"Introduction Book Levels Bloom's Taxonomy Learning Graph Levels of Interactivity Book Generation Workflow Word Cloud Gallery Sine Wave AI Pace Accelerating Templates","title":"MicroSims"},{"location":"book-table-of-contents/#case-studies","text":"Intro","title":"Case Studies"},{"location":"book-table-of-contents/#formatting-tests","text":"Introduction Code Highlighting Markdown Admonitions Quizzes Equations Social Media Preview Social Media Override Preview","title":"Formatting Tests"},{"location":"book-table-of-contents/#end-matter","text":"Feedback Glossary License FAQ How We Built This Site References Contact","title":"End Matter"},{"location":"contact/","text":"Contact Please contact me on LinkedIn Thanks! - Dan","title":"Contact"},{"location":"contact/#contact","text":"Please contact me on LinkedIn Thanks! - Dan","title":"Contact"},{"location":"faq/","text":"Intelligent Textbooks FAQ What is the core idea behind \"Intelligent Textbooks\"? The fundamental concept of intelligent textbooks is to create dynamic and interactive educational resources that guide students through learning material in a more engaging and effective manner. These textbooks leverage open standards and technologies, often incorporating generative AI, to offer features that enhance the learning experience beyond traditional static texts. The goal is to build resources that are not only informative but also adaptable, interactive, and easy to navigate. What are some key features of intelligent textbooks? Intelligent textbooks, as described, encompass a wide array of features designed to improve usability and engagement. These include powerful search and site navigation, interactive MicroSims (using p5.js or iframes), a glossary of terms, automatically generated table of contents, link checking, social media previews, rendering of formulas, code highlighting, license management, site analytics, the ability to edit via GitHub, automatic builds, quiz management, high-quality branding, and a concept graph visualizing relationships between topics. How are intelligent textbooks typically built and maintained? The primary approach for building and maintaining these intelligent textbooks involves using the mkdocs build system in conjunction with generative AI. This combination allows for the automated generation and updating of content. Additionally, the material theme is often utilized for creating customized and visually appealing interfaces. The platform also integrates with GitHub for version control and collaborative editing, facilitating a dynamic and evolving textbook. What role do interactive elements like \"MicroSims\" play in intelligent textbooks? Interactive elements, specifically \"MicroSims,\" are crucial for enhancing student engagement and understanding. By embedding interactive simulations (using p5.js or iframes) directly within the textbook pages, students can actively explore concepts, experiment with variables, and visualize abstract ideas. This hands-on approach can lead to a deeper and more intuitive grasp of the subject matter compared to passively reading static text. How does the learning graph contribute to the learning experience? The learning graph is a valuable feature that visually represents all the concepts covered in the course and their interdependencies. This allows students to understand the broader structure of the subject, see how different topics relate to each other, and identify prerequisite knowledge. By providing a visual overview of the knowledge domain, the concept graph can help students navigate the material more effectively and build a more coherent understanding. What is the significance of using open standards in the development of intelligent textbooks? Utilizing open standards is important for several reasons. It promotes interoperability, allowing different tools and platforms to work together seamlessly. It also fosters transparency and accessibility, making the resources potentially more widely available and adaptable. Furthermore, open standards can encourage collaboration and community contributions to the development and improvement of intelligent textbooks. How does the integration with platforms like GitHub enhance the development and maintenance process? Integration with GitHub provides several key benefits. It enables version control, allowing for tracking changes and reverting to previous versions if needed. It also facilitates collaboration among multiple contributors, making it easier to develop and maintain the textbook collectively. Additionally, the \"Edit from GitHub\" feature allows for direct contributions and updates to the content, fostering a dynamic and evolving resource. The \"Automatic Build\" functionality further streamlines the process by automatically deploying changes made on GitHub to the live textbook. How do features like quiz management and feedback mechanisms contribute to the \"intelligence\" of these textbooks? Features like quiz management and feedback mechanisms contribute to the \"intelligence\" of these textbooks by making them more adaptive and responsive to student learning. Quizzes can help students assess their understanding and identify areas where they need further study. Automated feedback, potentially powered by generative AI, can provide immediate guidance and explanations, helping students learn from their mistakes. This iterative process of learning, assessment, and feedback makes the textbook more than just a repository of information; it becomes an active tool in the learning process, capable of responding to the student's progress and needs.","title":"Intelligent Textbooks FAQ"},{"location":"faq/#intelligent-textbooks-faq","text":"","title":"Intelligent Textbooks FAQ"},{"location":"faq/#what-is-the-core-idea-behind-intelligent-textbooks","text":"The fundamental concept of intelligent textbooks is to create dynamic and interactive educational resources that guide students through learning material in a more engaging and effective manner. These textbooks leverage open standards and technologies, often incorporating generative AI, to offer features that enhance the learning experience beyond traditional static texts. The goal is to build resources that are not only informative but also adaptable, interactive, and easy to navigate.","title":"What is the core idea behind \"Intelligent Textbooks\"?"},{"location":"faq/#what-are-some-key-features-of-intelligent-textbooks","text":"Intelligent textbooks, as described, encompass a wide array of features designed to improve usability and engagement. These include powerful search and site navigation, interactive MicroSims (using p5.js or iframes), a glossary of terms, automatically generated table of contents, link checking, social media previews, rendering of formulas, code highlighting, license management, site analytics, the ability to edit via GitHub, automatic builds, quiz management, high-quality branding, and a concept graph visualizing relationships between topics.","title":"What are some key features of intelligent textbooks?"},{"location":"faq/#how-are-intelligent-textbooks-typically-built-and-maintained","text":"The primary approach for building and maintaining these intelligent textbooks involves using the mkdocs build system in conjunction with generative AI. This combination allows for the automated generation and updating of content. Additionally, the material theme is often utilized for creating customized and visually appealing interfaces. The platform also integrates with GitHub for version control and collaborative editing, facilitating a dynamic and evolving textbook.","title":"How are intelligent textbooks typically built and maintained?"},{"location":"faq/#what-role-do-interactive-elements-like-microsims-play-in-intelligent-textbooks","text":"Interactive elements, specifically \"MicroSims,\" are crucial for enhancing student engagement and understanding. By embedding interactive simulations (using p5.js or iframes) directly within the textbook pages, students can actively explore concepts, experiment with variables, and visualize abstract ideas. This hands-on approach can lead to a deeper and more intuitive grasp of the subject matter compared to passively reading static text.","title":"What role do interactive elements like \"MicroSims\" play in intelligent textbooks?"},{"location":"faq/#how-does-the-learning-graph-contribute-to-the-learning-experience","text":"The learning graph is a valuable feature that visually represents all the concepts covered in the course and their interdependencies. This allows students to understand the broader structure of the subject, see how different topics relate to each other, and identify prerequisite knowledge. By providing a visual overview of the knowledge domain, the concept graph can help students navigate the material more effectively and build a more coherent understanding.","title":"How does the learning graph contribute to the learning experience?"},{"location":"faq/#what-is-the-significance-of-using-open-standards-in-the-development-of-intelligent-textbooks","text":"Utilizing open standards is important for several reasons. It promotes interoperability, allowing different tools and platforms to work together seamlessly. It also fosters transparency and accessibility, making the resources potentially more widely available and adaptable. Furthermore, open standards can encourage collaboration and community contributions to the development and improvement of intelligent textbooks.","title":"What is the significance of using open standards in the development of intelligent textbooks?"},{"location":"faq/#how-does-the-integration-with-platforms-like-github-enhance-the-development-and-maintenance-process","text":"Integration with GitHub provides several key benefits. It enables version control, allowing for tracking changes and reverting to previous versions if needed. It also facilitates collaboration among multiple contributors, making it easier to develop and maintain the textbook collectively. Additionally, the \"Edit from GitHub\" feature allows for direct contributions and updates to the content, fostering a dynamic and evolving resource. The \"Automatic Build\" functionality further streamlines the process by automatically deploying changes made on GitHub to the live textbook.","title":"How does the integration with platforms like GitHub enhance the development and maintenance process?"},{"location":"faq/#how-do-features-like-quiz-management-and-feedback-mechanisms-contribute-to-the-intelligence-of-these-textbooks","text":"Features like quiz management and feedback mechanisms contribute to the \"intelligence\" of these textbooks by making them more adaptive and responsive to student learning. Quizzes can help students assess their understanding and identify areas where they need further study. Automated feedback, potentially powered by generative AI, can provide immediate guidance and explanations, helping students learn from their mistakes. This iterative process of learning, assessment, and feedback makes the textbook more than just a repository of information; it becomes an active tool in the learning process, capable of responding to the student's progress and needs.","title":"How do features like quiz management and feedback mechanisms contribute to the \"intelligence\" of these textbooks?"},{"location":"feedback/","text":"Feedback on Open Intelligent Textbooks Our online textbook depend on continuous feedback to improve. First, you are encouraged to connect with me, the primary author, anytime on LinkedIn and join our AI Learning Management Systems LinkedIn Group . Please feel free to submit any issues to our GitHub Issue system. All pull-requests with fixes to errors or additions are always welcome. Please fill out a short survey and give us ideas on how we can create better tools for building Open Intelligent Textbooks in the future.","title":"Feedback on Open Intelligent Textbooks"},{"location":"feedback/#feedback-on-open-intelligent-textbooks","text":"Our online textbook depend on continuous feedback to improve. First, you are encouraged to connect with me, the primary author, anytime on LinkedIn and join our AI Learning Management Systems LinkedIn Group . Please feel free to submit any issues to our GitHub Issue system. All pull-requests with fixes to errors or additions are always welcome. Please fill out a short survey and give us ideas on how we can create better tools for building Open Intelligent Textbooks in the future.","title":"Feedback on Open Intelligent Textbooks"},{"location":"glossary/","text":"Glossary of Terms for mkdocs for Intelligent Textbooks Admonition A section of text that is separate from the main flow of text. Admonitions are designed to that they can be quickly skipped over if the user is not concerned with the topic. In mkdocs-material admonitions are used to store text such as abstracts, note, info, tip, success, question, warning, failure, danger, bug, example and quote. mkdocs-material admonitions documentation Also known as: \"call outs\" Automatic Build Using an automatic process that generates HTML from the markdown files. Automatic builds for mkdocs can be automatically executed whenever any part of the mkdocs.yml or the files in the docs directory change. On GitHub, a GitHub action can be configured to achieve this. A process that regenerates and/or redeploys the documentation automatically whenever changes are made to source files, typically triggered by a continuous integration (CI) tool or build server. Ensures that documentation is always up-to-date without manual intervention. Code Highlighting The process of rendering source code with visually distinct styles to enhance readability and comprehension. Mkdocs material allows this feature to be enabled by changing the mkdocs.yml configuration file. A feature that applies syntax-specific color schemes and formatting to code blocks within the documentation. Improves readability and comprehension of code examples by distinguishing keywords, variables, and other language constructs. Concept Graph A structured representation of concepts and their interrelationships, typically organized as nodes connected by edges. Concept Graphs are used to create lesson plans and learning roadmaps that are customized to a students learning objectives. Deep Linking The ability to send a link to another person in a chat or e-mail that links directly to a subsection of a document. Example: You can send a link directly to a specific term in the Glossary of Terms Embedding A numeric vector representation of text that encodes semantic meaning, enabling large language models and semantic search systems to compare and rank content based on conceptual similarity rather than just keyword matching. Example in an Intelligent Textbook: When a student highlights a concept, the intelligent textbook generates embeddings for that concept and searches its database of content for related topics that share similar embeddings. As a result, it can suggest complementary reading sections, practice questions, or simulations that align with the student\u2019s current focus, thus enhancing personalized learning. A visual representation of the relationships between topics, concepts, and terms within the documentation. Helps users navigate complex material, see how ideas interconnect, and discover related information. Favicon A small icon associated with a webpage, displayed by web browsers in tabs, bookmarks, or address bars. Mathematical or scientific expressions integrated into the documentation, often rendered using tools such as LaTeX or MathJax. Enables precise and readable presentation of equations, enhancing clarity in technical and scholarly content. Formulas Mathematical expressions that represent relationships between variables, constants, and functions. Mathematical or scientific expressions integrated into the documentation, often rendered using tools such as LaTeX or MathJax. Enables precise and readable presentation of equations, enhancing clarity in technical and scholarly content. GitHub Actions Scripts that perform build processes on GitHub servers. GitHub actions can automatically be run when any new content is updated in the docs directory or the mkdocs.yml file. A workflow automation service integrated into GitHub that executes predefined tasks in response to repository events. Glossary A controlled vocabulary that lists specialized terms and their definitions to ensure consistent understanding. Also known as: Glossary of Terms Hyper-Personalization The ability for a textbook to be customized to the needs of an individual learner. Modern textbooks allow hyper-personalization to be done in real-time using chatbots and agents. Edit Icon The ability to add an \"Edit Icon\" to the top of each page in a textbook. Mkdocs material allows the Edit Icon to move the user directly to a form where they can click the Edit icon to change text. By doing a Save a GitHub action can be triggered to update the HTML of the site. This feature allows non-technical staff to change and preview changes without having to setup a local build process on their local computer or server. Keyword Search A retrieval method that matches documents against user-supplied words or phrases to identify relevant content. See also: semantic search Glossary of Terms A dedicated section that provides definitions and explanations of key terms, jargon, and acronyms used throughout the documentation. Serves as a quick reference to ensure consistent understanding of terminology across readers. Edit from GitHub An integrated link within the documentation that directs users to the corresponding source file on GitHub. Edit links Encourages community involvement by allowing readers to propose edits, corrections, or improvements through pull requests. Users do not need to understand how the build process works on their local systems to generate an updated web page. Intelligent Textbook A textbook that has tha ability to respond to the needs of each student. See Also: Levels of Intelligent Textbook ISO Definition A term definition is considered to be consistent with ISO metadata registry guideline ISO/IEC 11179 if it meets the following criteria: Precise Concise Distinct Non-circular Unencumbered with business rules Learning Graph A directed graph of concepts that reflects the order that concepts should be learned to master a new concept. Levels of Intelligent Textbooks A five level classification of intelligent textbooks. See Five Levels of Intelligent Textbooks License A legal instrument specifying permissions, conditions, and restrictions for using, modifying, or redistributing content or software. mkdoc material allows you to place your license link on the footer of each page. Clarifies permissions and restrictions, providing guidance to users and contributors. Textbooks pages can be generated with links in their footer to the creative commons licenses. Link Checker A tool that verifies the validity and accessibility of hyperlinks within a given set of documents or webpages. Markdown A lightweight markup language with plain text formatting syntax designed to be easy to read and write. It is primarily used for creating formatted documents and web content, converting plain text to structured formats such as HTML or PDF through a rendering process. Example: Markdown syntax allows for the creation of structured content. For instance: To create a header: # Header 1 or ## Header 2 To format text in bold: **bold text** To create a link: [Link text](https://example.com) To include an image: ![Alt text](image-url.png) For example, to write a numbered list: 1. Item 1 1. Item 2 1. Item 3 Markdown will be rendered as the following: Item 1 Item 2 Item 3 Note that the item counter is automatically calculated. Material A popular theme for the mkdocs build system. The Material Theme currently has over 21K stars on GitHub. This is more than 10x any of the other themes for mkdocs. Mkdocs A documentation build system that leverages Markdown syntax for generating textbooks and websites. A tool or script that verifies the integrity and accessibility of hyperlinks within the documentation. With mkdocs material, link checking - both internal links and links to external pages - can be done as part of the build process or a separte process. Ensures that references remain accurate and functional, improving user experience and maintaining credibility. MicroSim A small-scale, embedded interactive simulation designed to illustrate a concept interactively within educational content. MicroSim are a core element of intelligent interactive textbooks. See the MicroSims for Education Website MicroSite A website that runs on a web server with no need for complex heavy APIs to expensive services such as a search engine. A small-scale, self-contained example or simulation embedded within the documentation. Allows readers to interact with or test concepts in a controlled environment for deeper understanding and hands-on learning. Navigation In our textbooks we focus on left-side navigation systems since these are the default navigation system and they are both intuitive and familiar by our users. Our users also tend to be using screens that are wide landscape displays. We discourage top navigation. p5.js The JavaScript library most commonly used to render MicroSims. Although there are many other JavaScript libraries that can be used, because there is a huge number of p5.js programs available for indexing by web crawlers used by generative AI tools, p5.js dominates the MicroSim ecosystems. Other specialized libraries such as vis.js are used for tasks such as simulating graph traversal algorithms. The organized structure of menus, sections, and links that guide readers through the documentation. Facilitates ease of use, enabling readers to find information efficiently. Quiz Management Allow pages to contain self-assessments where the answers are hidden until the user clicks on a \"Show Answer\" control. Allow multiple-choice questions in a list to use the ordered-list labels A. B. C. D. Scaffolding An instructional strategy where support is provided to learners at the beginning of a learning process and then gradually removed as they gain confidence and competence. Scaffolding allows students to build on what they already know and reach higher levels of understanding. Search Create a search function as part of the build process. The mkdocs material theme generates a reverse index JSON file that is used to list the pages that match search keywords. Note that standard mkdocs search does not use embeddings and there is no way to find similar documents. Semantic Search A retrieval method that interprets the contextual meaning of search terms to improve the relevance of search results. Intelligent textbooks frequently create embeddings for words, phrases, paragraphs and pages so you can quickly find similar content. Social Media Previews Summaries automatically generated when a webpage link is shared on social platforms, often including a title, description, and image. Metadata added to web pages that control how content is displayed when shared on social media platforms. Social media preview increases the appeal and clarity of shared links, encouraging users to engage with and disseminate the documentation. Social media previews can be automatically be generated by a configuration in the mkdocs.yml file. Table of Contents A structured list of document sections and headings, enabling users to locate and navigate to specific topics easily. Vis.js A JavaScript library for rendering graph networks. Vis.js is used to view and edit learning graphs used by intelligent textbooks. A hierarchical listing of page headings and sections typically displayed in a sidebar or at the start of a page. Helps users quickly understand the scope of the content and jump directly to areas of interest. Website Analytics The process of analyzing who is coming to your website, when they are visiting and what pages are being accessed. The mkdocs material system provides a way to integrate free Google Analytics by adding four lines to your mkdocs.yml file. See: Tutorial on Google Analytics","title":"Glossary of Terms for mkdocs for Intelligent Textbooks"},{"location":"glossary/#glossary-of-terms-for-mkdocs-for-intelligent-textbooks","text":"","title":"Glossary of Terms for mkdocs for Intelligent Textbooks"},{"location":"glossary/#admonition","text":"A section of text that is separate from the main flow of text. Admonitions are designed to that they can be quickly skipped over if the user is not concerned with the topic. In mkdocs-material admonitions are used to store text such as abstracts, note, info, tip, success, question, warning, failure, danger, bug, example and quote. mkdocs-material admonitions documentation Also known as: \"call outs\"","title":"Admonition"},{"location":"glossary/#automatic-build","text":"Using an automatic process that generates HTML from the markdown files. Automatic builds for mkdocs can be automatically executed whenever any part of the mkdocs.yml or the files in the docs directory change. On GitHub, a GitHub action can be configured to achieve this. A process that regenerates and/or redeploys the documentation automatically whenever changes are made to source files, typically triggered by a continuous integration (CI) tool or build server. Ensures that documentation is always up-to-date without manual intervention.","title":"Automatic Build"},{"location":"glossary/#code-highlighting","text":"The process of rendering source code with visually distinct styles to enhance readability and comprehension. Mkdocs material allows this feature to be enabled by changing the mkdocs.yml configuration file. A feature that applies syntax-specific color schemes and formatting to code blocks within the documentation. Improves readability and comprehension of code examples by distinguishing keywords, variables, and other language constructs.","title":"Code Highlighting"},{"location":"glossary/#concept-graph","text":"A structured representation of concepts and their interrelationships, typically organized as nodes connected by edges. Concept Graphs are used to create lesson plans and learning roadmaps that are customized to a students learning objectives.","title":"Concept Graph"},{"location":"glossary/#deep-linking","text":"The ability to send a link to another person in a chat or e-mail that links directly to a subsection of a document. Example: You can send a link directly to a specific term in the Glossary of Terms","title":"Deep Linking"},{"location":"glossary/#embedding","text":"A numeric vector representation of text that encodes semantic meaning, enabling large language models and semantic search systems to compare and rank content based on conceptual similarity rather than just keyword matching. Example in an Intelligent Textbook: When a student highlights a concept, the intelligent textbook generates embeddings for that concept and searches its database of content for related topics that share similar embeddings. As a result, it can suggest complementary reading sections, practice questions, or simulations that align with the student\u2019s current focus, thus enhancing personalized learning. A visual representation of the relationships between topics, concepts, and terms within the documentation. Helps users navigate complex material, see how ideas interconnect, and discover related information.","title":"Embedding"},{"location":"glossary/#favicon","text":"A small icon associated with a webpage, displayed by web browsers in tabs, bookmarks, or address bars. Mathematical or scientific expressions integrated into the documentation, often rendered using tools such as LaTeX or MathJax. Enables precise and readable presentation of equations, enhancing clarity in technical and scholarly content.","title":"Favicon"},{"location":"glossary/#formulas","text":"Mathematical expressions that represent relationships between variables, constants, and functions. Mathematical or scientific expressions integrated into the documentation, often rendered using tools such as LaTeX or MathJax. Enables precise and readable presentation of equations, enhancing clarity in technical and scholarly content.","title":"Formulas"},{"location":"glossary/#github-actions","text":"Scripts that perform build processes on GitHub servers. GitHub actions can automatically be run when any new content is updated in the docs directory or the mkdocs.yml file. A workflow automation service integrated into GitHub that executes predefined tasks in response to repository events.","title":"GitHub Actions"},{"location":"glossary/#glossary","text":"A controlled vocabulary that lists specialized terms and their definitions to ensure consistent understanding. Also known as: Glossary of Terms","title":"Glossary"},{"location":"glossary/#hyper-personalization","text":"The ability for a textbook to be customized to the needs of an individual learner. Modern textbooks allow hyper-personalization to be done in real-time using chatbots and agents.","title":"Hyper-Personalization"},{"location":"glossary/#edit-icon","text":"The ability to add an \"Edit Icon\" to the top of each page in a textbook. Mkdocs material allows the Edit Icon to move the user directly to a form where they can click the Edit icon to change text. By doing a Save a GitHub action can be triggered to update the HTML of the site. This feature allows non-technical staff to change and preview changes without having to setup a local build process on their local computer or server.","title":"Edit Icon"},{"location":"glossary/#keyword-search","text":"A retrieval method that matches documents against user-supplied words or phrases to identify relevant content. See also: semantic search","title":"Keyword Search"},{"location":"glossary/#glossary-of-terms","text":"A dedicated section that provides definitions and explanations of key terms, jargon, and acronyms used throughout the documentation. Serves as a quick reference to ensure consistent understanding of terminology across readers.","title":"Glossary of Terms"},{"location":"glossary/#edit-from-github","text":"An integrated link within the documentation that directs users to the corresponding source file on GitHub. Edit links Encourages community involvement by allowing readers to propose edits, corrections, or improvements through pull requests. Users do not need to understand how the build process works on their local systems to generate an updated web page.","title":"Edit from GitHub"},{"location":"glossary/#intelligent-textbook","text":"A textbook that has tha ability to respond to the needs of each student. See Also: Levels of Intelligent Textbook","title":"Intelligent Textbook"},{"location":"glossary/#iso-definition","text":"A term definition is considered to be consistent with ISO metadata registry guideline ISO/IEC 11179 if it meets the following criteria: Precise Concise Distinct Non-circular Unencumbered with business rules","title":"ISO Definition"},{"location":"glossary/#learning-graph","text":"A directed graph of concepts that reflects the order that concepts should be learned to master a new concept.","title":"Learning Graph"},{"location":"glossary/#levels-of-intelligent-textbooks","text":"A five level classification of intelligent textbooks. See Five Levels of Intelligent Textbooks","title":"Levels of Intelligent Textbooks"},{"location":"glossary/#license","text":"A legal instrument specifying permissions, conditions, and restrictions for using, modifying, or redistributing content or software. mkdoc material allows you to place your license link on the footer of each page. Clarifies permissions and restrictions, providing guidance to users and contributors. Textbooks pages can be generated with links in their footer to the creative commons licenses.","title":"License"},{"location":"glossary/#link-checker","text":"A tool that verifies the validity and accessibility of hyperlinks within a given set of documents or webpages.","title":"Link Checker"},{"location":"glossary/#markdown","text":"A lightweight markup language with plain text formatting syntax designed to be easy to read and write. It is primarily used for creating formatted documents and web content, converting plain text to structured formats such as HTML or PDF through a rendering process. Example: Markdown syntax allows for the creation of structured content. For instance: To create a header: # Header 1 or ## Header 2 To format text in bold: **bold text** To create a link: [Link text](https://example.com) To include an image: ![Alt text](image-url.png) For example, to write a numbered list: 1. Item 1 1. Item 2 1. Item 3 Markdown will be rendered as the following: Item 1 Item 2 Item 3 Note that the item counter is automatically calculated.","title":"Markdown"},{"location":"glossary/#material","text":"A popular theme for the mkdocs build system. The Material Theme currently has over 21K stars on GitHub. This is more than 10x any of the other themes for mkdocs.","title":"Material"},{"location":"glossary/#mkdocs","text":"A documentation build system that leverages Markdown syntax for generating textbooks and websites. A tool or script that verifies the integrity and accessibility of hyperlinks within the documentation. With mkdocs material, link checking - both internal links and links to external pages - can be done as part of the build process or a separte process. Ensures that references remain accurate and functional, improving user experience and maintaining credibility.","title":"Mkdocs"},{"location":"glossary/#microsim","text":"A small-scale, embedded interactive simulation designed to illustrate a concept interactively within educational content. MicroSim are a core element of intelligent interactive textbooks. See the MicroSims for Education Website","title":"MicroSim"},{"location":"glossary/#microsite","text":"A website that runs on a web server with no need for complex heavy APIs to expensive services such as a search engine. A small-scale, self-contained example or simulation embedded within the documentation. Allows readers to interact with or test concepts in a controlled environment for deeper understanding and hands-on learning.","title":"MicroSite"},{"location":"glossary/#navigation","text":"In our textbooks we focus on left-side navigation systems since these are the default navigation system and they are both intuitive and familiar by our users. Our users also tend to be using screens that are wide landscape displays. We discourage top navigation.","title":"Navigation"},{"location":"glossary/#p5js","text":"The JavaScript library most commonly used to render MicroSims. Although there are many other JavaScript libraries that can be used, because there is a huge number of p5.js programs available for indexing by web crawlers used by generative AI tools, p5.js dominates the MicroSim ecosystems. Other specialized libraries such as vis.js are used for tasks such as simulating graph traversal algorithms. The organized structure of menus, sections, and links that guide readers through the documentation. Facilitates ease of use, enabling readers to find information efficiently.","title":"p5.js"},{"location":"glossary/#quiz-management","text":"Allow pages to contain self-assessments where the answers are hidden until the user clicks on a \"Show Answer\" control. Allow multiple-choice questions in a list to use the ordered-list labels A. B. C. D.","title":"Quiz Management"},{"location":"glossary/#scaffolding","text":"An instructional strategy where support is provided to learners at the beginning of a learning process and then gradually removed as they gain confidence and competence. Scaffolding allows students to build on what they already know and reach higher levels of understanding.","title":"Scaffolding"},{"location":"glossary/#search","text":"Create a search function as part of the build process. The mkdocs material theme generates a reverse index JSON file that is used to list the pages that match search keywords. Note that standard mkdocs search does not use embeddings and there is no way to find similar documents.","title":"Search"},{"location":"glossary/#semantic-search","text":"A retrieval method that interprets the contextual meaning of search terms to improve the relevance of search results. Intelligent textbooks frequently create embeddings for words, phrases, paragraphs and pages so you can quickly find similar content.","title":"Semantic Search"},{"location":"glossary/#social-media-previews","text":"Summaries automatically generated when a webpage link is shared on social platforms, often including a title, description, and image. Metadata added to web pages that control how content is displayed when shared on social media platforms. Social media preview increases the appeal and clarity of shared links, encouraging users to engage with and disseminate the documentation. Social media previews can be automatically be generated by a configuration in the mkdocs.yml file.","title":"Social Media Previews"},{"location":"glossary/#table-of-contents","text":"A structured list of document sections and headings, enabling users to locate and navigate to specific topics easily.","title":"Table of Contents"},{"location":"glossary/#visjs","text":"A JavaScript library for rendering graph networks. Vis.js is used to view and edit learning graphs used by intelligent textbooks. A hierarchical listing of page headings and sections typically displayed in a sidebar or at the start of a page. Helps users quickly understand the scope of the content and jump directly to areas of interest.","title":"Vis.js"},{"location":"glossary/#website-analytics","text":"The process of analyzing who is coming to your website, when they are visiting and what pages are being accessed. The mkdocs material system provides a way to integrate free Google Analytics by adding four lines to your mkdocs.yml file. See: Tutorial on Google Analytics","title":"Website Analytics"},{"location":"how-we-built-this-site/","text":"How We Built This Site This page describes how we built this website and some of the rationale behind why we made various design choices. Python MicroSims are about how we use generative AI to create animations and simulations. The language of AI is Python. So we wanted to create a site that could be easily understood by Python developers. Mkdocs vs. Docusaurus There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus . Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management. GitHub and GitHub Pages GitHub is a logical choice to store our site source code and documentation. GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs. GitHub also has Issues , Projects and releases that we can use to manage our bugs and tasks. The best practice for low-cost websites that have public-only content is GitHub Pages . Mkdocs has a command ( mkdocs gh-deploy ) that does deployment directly to GitHub Pages. This was an easy choice to make. GitHub Clone If you would like to clone this repository, here are the commands: mkdir projects cd projects git clone https://github.com/dmccreary/microsims After Changes After you make local changes you must do the following: # add the new files to a a local commit transaction git add FILES # Execute the a local commit with a message about what and why you are doing the commit git commit -m \"comment\" # Update the central GitHub repository git push Material Theme We had several options when picking a mkdocs theme: Mkdocs default Readthedocs Third-Party Themes See Ranking The Material Theme had 16K stars. No other theme had over a few hundred. This was also an easy design decision. One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link. Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process. Enable Edit Icon To enable the Edit icon on all pages, you must add the edit_uri and the content.action.edit under the theme features area. edit_uri: edit/master/docs/ theme: features: - content.action.edit Conda vs VENV There are two choices for virtual environments. We can use the native Python venv or use Conda. venv is simle but is only designed for pure Python projects. We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other. See the ChatGPT Analysis Here . Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries. conda deactivate conda create -n mkdocs python=3 conda activate mkdocs pip install mkdocs \"mkdocs-material[imaging]\" Mkdocs Commands There are three simple mkdoc commands we use. Local Build mkdocs build This builds your website in a folder called site . Use this to test that the mkdocs.yml site is working and does not have any errors. Run a Local Server mkdocs serve This runs a server on http://localhost:8000 . Use this to test the display formatting locally before you push your code up to the GitHub repo. mkdoc gh-deploy This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub. Mkdocs Material Social Tags We are using the Material Social tags. This is a work in progress! Here is what we have learned. There are extensive image processing libraries that can't be installed with just pip. You will need to run a tool like brew on the Mac to get the libraries installed. Even after brew installs the libraries, you have to get your environment to find the libraries. The only way I could get that to work was to set up a local UNIX environment variable. Here is the brew command that I ran: brew install cairo freetype libffi libjpeg libpng zlib I then had to add the following to my ~/.zshrc file: export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib Note that I am running on a Mac with Apple silicon. This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set. Cover images for blog post #4364 Discussion on overriding the Social Card Image","title":"How We Built This Site"},{"location":"how-we-built-this-site/#how-we-built-this-site","text":"This page describes how we built this website and some of the rationale behind why we made various design choices.","title":"How We Built This Site"},{"location":"how-we-built-this-site/#python","text":"MicroSims are about how we use generative AI to create animations and simulations. The language of AI is Python. So we wanted to create a site that could be easily understood by Python developers.","title":"Python"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","text":"There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus . Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.","title":"Mkdocs vs. Docusaurus"},{"location":"how-we-built-this-site/#github-and-github-pages","text":"GitHub is a logical choice to store our site source code and documentation. GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs. GitHub also has Issues , Projects and releases that we can use to manage our bugs and tasks. The best practice for low-cost websites that have public-only content is GitHub Pages . Mkdocs has a command ( mkdocs gh-deploy ) that does deployment directly to GitHub Pages. This was an easy choice to make.","title":"GitHub and GitHub Pages"},{"location":"how-we-built-this-site/#github-clone","text":"If you would like to clone this repository, here are the commands: mkdir projects cd projects git clone https://github.com/dmccreary/microsims","title":"GitHub Clone"},{"location":"how-we-built-this-site/#after-changes","text":"After you make local changes you must do the following: # add the new files to a a local commit transaction git add FILES # Execute the a local commit with a message about what and why you are doing the commit git commit -m \"comment\" # Update the central GitHub repository git push","title":"After Changes"},{"location":"how-we-built-this-site/#material-theme","text":"We had several options when picking a mkdocs theme: Mkdocs default Readthedocs Third-Party Themes See Ranking The Material Theme had 16K stars. No other theme had over a few hundred. This was also an easy design decision. One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link. Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.","title":"Material Theme"},{"location":"how-we-built-this-site/#enable-edit-icon","text":"To enable the Edit icon on all pages, you must add the edit_uri and the content.action.edit under the theme features area. edit_uri: edit/master/docs/ theme: features: - content.action.edit","title":"Enable Edit Icon"},{"location":"how-we-built-this-site/#conda-vs-venv","text":"There are two choices for virtual environments. We can use the native Python venv or use Conda. venv is simle but is only designed for pure Python projects. We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other. See the ChatGPT Analysis Here . Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries. conda deactivate conda create -n mkdocs python=3 conda activate mkdocs pip install mkdocs \"mkdocs-material[imaging]\"","title":"Conda vs VENV"},{"location":"how-we-built-this-site/#mkdocs-commands","text":"There are three simple mkdoc commands we use.","title":"Mkdocs Commands"},{"location":"how-we-built-this-site/#local-build","text":"mkdocs build This builds your website in a folder called site . Use this to test that the mkdocs.yml site is working and does not have any errors.","title":"Local Build"},{"location":"how-we-built-this-site/#run-a-local-server","text":"mkdocs serve This runs a server on http://localhost:8000 . Use this to test the display formatting locally before you push your code up to the GitHub repo. mkdoc gh-deploy This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.","title":"Run a Local Server"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","text":"We are using the Material Social tags. This is a work in progress! Here is what we have learned. There are extensive image processing libraries that can't be installed with just pip. You will need to run a tool like brew on the Mac to get the libraries installed. Even after brew installs the libraries, you have to get your environment to find the libraries. The only way I could get that to work was to set up a local UNIX environment variable. Here is the brew command that I ran: brew install cairo freetype libffi libjpeg libpng zlib I then had to add the following to my ~/.zshrc file: export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib Note that I am running on a Mac with Apple silicon. This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set. Cover images for blog post #4364 Discussion on overriding the Social Card Image","title":"Mkdocs Material Social Tags"},{"location":"license/","text":"Creative Commons License All content in this repository is governed by the following license agreement: License Type Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED) Link to License Agreement https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en Your Rights You are free to: Share \u2014 copy and redistribute the material in any medium or format Adapt \u2014 remix, transform, and build upon the material The licensor cannot revoke these freedoms as long as you follow the license terms. Restrictions Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. NonCommercial \u2014 You may not use the material for commercial purposes. ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. !!! Notices You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.","title":"Creative Commons License"},{"location":"license/#creative-commons-license","text":"All content in this repository is governed by the following license agreement:","title":"Creative Commons License"},{"location":"license/#license-type","text":"Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)","title":"License Type"},{"location":"license/#link-to-license-agreement","text":"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en","title":"Link to License Agreement"},{"location":"license/#your-rights","text":"You are free to: Share \u2014 copy and redistribute the material in any medium or format Adapt \u2014 remix, transform, and build upon the material The licensor cannot revoke these freedoms as long as you follow the license terms.","title":"Your Rights"},{"location":"license/#restrictions","text":"Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. NonCommercial \u2014 You may not use the material for commercial purposes. ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. !!! Notices You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.","title":"Restrictions"},{"location":"mission-and-values/","text":"Mission and Values: Intelligent Textbooks Initiative Our Mission To democratize education through the creation, maintenance, and distribution of interactive, intelligent textbooks that adapt to learners' needs, leveraging open standards, generative AI, and interactive simulations to make high-quality education accessible to all. Our Vision A world where every learner, regardless of geography, language, gender, or socioeconomic status, has access to engaging, interactive educational content that adapts to their unique learning style, fostering curiosity and mastery through personalized learning journeys. Core Values 1. Education as a Fundamental Right We believe that receiving a high-quality education is a fundamental human right, not a privilege. Our intelligent textbooks initiative strives to remove barriers to educational access by creating free, open-source learning materials that can be deployed in any learning environment. 2. Curiosity-Driven Learning We recognize curiosity as a superpower that drives authentic learning and helps children discover their areas of interest. Our textbooks are designed to spark and sustain curiosity through engaging content, thought-provoking questions, and interactive elements that encourage exploration. 3. Interactive Learning Through MicroSims We are committed to the integration of interactive simulations (MicroSims) as powerful learning tools that make abstract concepts concrete and engaging. These small, focused simulations allow learners to experiment, visualize concepts, and develop intuition about complex topics in ways static text cannot achieve. 4. Leveraging AI for Educational Equity We believe that using generative AI to create textbooks and simulations can dramatically lower the cost of high-quality education while personalizing the learning experience. AI should be harnessed as a tool to augment human creativity and expertise, making excellent educational content more accessible to all. 5. Open Access and Inclusivity Our intelligent textbooks are free to use by all students regardless of country, language, gender, or religion. We commit to creating content that is culturally responsive, multilingual, and designed with accessibility in mind, ensuring that our materials serve diverse global communities. 6. Beyond Static Knowledge Repositories While we admire Wikipedia as an example of crowdsourced knowledge, we believe educational content must go further to adapt to the needs of individual learners. Our intelligent textbooks provide customizable pathways through content, adjustable complexity levels, and interactive elements that static repositories cannot offer. 7. Community and Collaboration We believe in the power of shared resources and collaborative development. We are building central repositories of intelligent textbook descriptions and collections of simulations that can be quickly customized and integrated into new content, fostering a community of educational content creators. 8. Quality-First Approach For generative AI to create excellent content, we need to begin with high-quality exemplars. We are committed to developing and curating outstanding educational resources that can serve as foundations for AI-assisted content creation, maintaining rigorous standards throughout. 9. Project-Based and Collaborative Learning We believe that project-based learning and teaching students to work together are critical components of a great education. Our textbooks include collaborative projects, team challenges, and real-world applications that develop both subject matter expertise and essential soft skills. 10. Storytelling as Pedagogy Great textbooks intertwine compelling storytelling with descriptive content. We believe in the power of narrative to make learning memorable and meaningful, and we incorporate relevant stories, case studies, and examples that bring educational content to life. Our Approach The Intelligent Textbooks Initiative leverages the power of modern web technologies, specifically the MkDocs-Material documentation system, to create engaging, interactive, and adaptable learning experiences. Our approach includes: Open Standards : Using widely adopted web standards and open-source tools to ensure longevity and accessibility Learning Graphs : Structuring content around knowledge graphs that map learning pathways and relationships between concepts MicroSims : Embedding small, focused interactive simulations that allow hands-on exploration of concepts AI-Enhanced Content : Using generative AI to assist in creating, adapting, and personalizing educational content GitHub-Based Workflow : Maintaining all content in version-controlled repositories that enable collaboration and continuous improvement Creative Commons Licensing : Sharing all content under open licenses that permit adaptation and reuse Analytics-Informed Iteration : Using usage data to continuously improve the effectiveness of our materials By combining these elements, we aim to transform educational content from static text to dynamic, adaptive learning experiences that meet learners where they are and guide them to where they aspire to be. Join Our Mission We invite educators, developers, content creators, and learners to join us in revolutionizing educational content. Together, we can build a future where every learner has access to engaging, effective educational materials that inspire lifelong learning and unlock human potential. Please contact me on LinkedIn if you would like to join our project. Dan McCreary February 28th, 2025 Sample LinkedIn Introduction Thank you for connecting! I'm leading teams building AI-driven Intelligent Textbooks. We're revolutionizing education by creating interactive, AI-enhanced learning materials that adapt to individual needs. Our mission is to democratize education through free, open-source textbooks that integrate interactive simulations (MicroSims) and leverage generative AI to make high-quality education accessible globally. I'd love to discuss how you might contribute to or benefit from our work. Whether you're an educator, developer, content creator, or simply passionate about educational innovation, there are many ways to get involved. Would you be interested in learning more about our approach using AI, learning graphs, and embedded simulations? Or perhaps you'd like to explore collaboration opportunities? Looking forward to working together! Dan","title":"Mission and Values: Intelligent Textbooks Initiative"},{"location":"mission-and-values/#mission-and-values-intelligent-textbooks-initiative","text":"","title":"Mission and Values: Intelligent Textbooks Initiative"},{"location":"mission-and-values/#our-mission","text":"To democratize education through the creation, maintenance, and distribution of interactive, intelligent textbooks that adapt to learners' needs, leveraging open standards, generative AI, and interactive simulations to make high-quality education accessible to all.","title":"Our Mission"},{"location":"mission-and-values/#our-vision","text":"A world where every learner, regardless of geography, language, gender, or socioeconomic status, has access to engaging, interactive educational content that adapts to their unique learning style, fostering curiosity and mastery through personalized learning journeys.","title":"Our Vision"},{"location":"mission-and-values/#core-values","text":"","title":"Core Values"},{"location":"mission-and-values/#1-education-as-a-fundamental-right","text":"We believe that receiving a high-quality education is a fundamental human right, not a privilege. Our intelligent textbooks initiative strives to remove barriers to educational access by creating free, open-source learning materials that can be deployed in any learning environment.","title":"1. Education as a Fundamental Right"},{"location":"mission-and-values/#2-curiosity-driven-learning","text":"We recognize curiosity as a superpower that drives authentic learning and helps children discover their areas of interest. Our textbooks are designed to spark and sustain curiosity through engaging content, thought-provoking questions, and interactive elements that encourage exploration.","title":"2. Curiosity-Driven Learning"},{"location":"mission-and-values/#3-interactive-learning-through-microsims","text":"We are committed to the integration of interactive simulations (MicroSims) as powerful learning tools that make abstract concepts concrete and engaging. These small, focused simulations allow learners to experiment, visualize concepts, and develop intuition about complex topics in ways static text cannot achieve.","title":"3. Interactive Learning Through MicroSims"},{"location":"mission-and-values/#4-leveraging-ai-for-educational-equity","text":"We believe that using generative AI to create textbooks and simulations can dramatically lower the cost of high-quality education while personalizing the learning experience. AI should be harnessed as a tool to augment human creativity and expertise, making excellent educational content more accessible to all.","title":"4. Leveraging AI for Educational Equity"},{"location":"mission-and-values/#5-open-access-and-inclusivity","text":"Our intelligent textbooks are free to use by all students regardless of country, language, gender, or religion. We commit to creating content that is culturally responsive, multilingual, and designed with accessibility in mind, ensuring that our materials serve diverse global communities.","title":"5. Open Access and Inclusivity"},{"location":"mission-and-values/#6-beyond-static-knowledge-repositories","text":"While we admire Wikipedia as an example of crowdsourced knowledge, we believe educational content must go further to adapt to the needs of individual learners. Our intelligent textbooks provide customizable pathways through content, adjustable complexity levels, and interactive elements that static repositories cannot offer.","title":"6. Beyond Static Knowledge Repositories"},{"location":"mission-and-values/#7-community-and-collaboration","text":"We believe in the power of shared resources and collaborative development. We are building central repositories of intelligent textbook descriptions and collections of simulations that can be quickly customized and integrated into new content, fostering a community of educational content creators.","title":"7. Community and Collaboration"},{"location":"mission-and-values/#8-quality-first-approach","text":"For generative AI to create excellent content, we need to begin with high-quality exemplars. We are committed to developing and curating outstanding educational resources that can serve as foundations for AI-assisted content creation, maintaining rigorous standards throughout.","title":"8. Quality-First Approach"},{"location":"mission-and-values/#9-project-based-and-collaborative-learning","text":"We believe that project-based learning and teaching students to work together are critical components of a great education. Our textbooks include collaborative projects, team challenges, and real-world applications that develop both subject matter expertise and essential soft skills.","title":"9. Project-Based and Collaborative Learning"},{"location":"mission-and-values/#10-storytelling-as-pedagogy","text":"Great textbooks intertwine compelling storytelling with descriptive content. We believe in the power of narrative to make learning memorable and meaningful, and we incorporate relevant stories, case studies, and examples that bring educational content to life.","title":"10. Storytelling as Pedagogy"},{"location":"mission-and-values/#our-approach","text":"The Intelligent Textbooks Initiative leverages the power of modern web technologies, specifically the MkDocs-Material documentation system, to create engaging, interactive, and adaptable learning experiences. Our approach includes: Open Standards : Using widely adopted web standards and open-source tools to ensure longevity and accessibility Learning Graphs : Structuring content around knowledge graphs that map learning pathways and relationships between concepts MicroSims : Embedding small, focused interactive simulations that allow hands-on exploration of concepts AI-Enhanced Content : Using generative AI to assist in creating, adapting, and personalizing educational content GitHub-Based Workflow : Maintaining all content in version-controlled repositories that enable collaboration and continuous improvement Creative Commons Licensing : Sharing all content under open licenses that permit adaptation and reuse Analytics-Informed Iteration : Using usage data to continuously improve the effectiveness of our materials By combining these elements, we aim to transform educational content from static text to dynamic, adaptive learning experiences that meet learners where they are and guide them to where they aspire to be.","title":"Our Approach"},{"location":"mission-and-values/#join-our-mission","text":"We invite educators, developers, content creators, and learners to join us in revolutionizing educational content. Together, we can build a future where every learner has access to engaging, effective educational materials that inspire lifelong learning and unlock human potential. Please contact me on LinkedIn if you would like to join our project. Dan McCreary February 28th, 2025","title":"Join Our Mission"},{"location":"mission-and-values/#sample-linkedin-introduction","text":"Thank you for connecting! I'm leading teams building AI-driven Intelligent Textbooks. We're revolutionizing education by creating interactive, AI-enhanced learning materials that adapt to individual needs. Our mission is to democratize education through free, open-source textbooks that integrate interactive simulations (MicroSims) and leverage generative AI to make high-quality education accessible globally. I'd love to discuss how you might contribute to or benefit from our work. Whether you're an educator, developer, content creator, or simply passionate about educational innovation, there are many ways to get involved. Would you be interested in learning more about our approach using AI, learning graphs, and embedded simulations? Or perhaps you'd like to explore collaboration opportunities? Looking forward to working together! Dan","title":"Sample LinkedIn Introduction"},{"location":"references/","text":"References Concepts for Classification of Adaptive Instructional Systems IEEE Total Learning Architecture References The IEEE Total Learning Architecture (TLA) is a set of standards for the design of online learning systems. ADLNet TLA References Implementation Main Advanced Distributed Learning (ADLNet) GitHub Site IEEE Standard for Artificial Intelligence (AI) Model Representation, Compression, Distribution, and Management References for Book Building mkdocs - https://www.mkdocs.org/ - this is our tool for building the website. It converts Markdown into HTML in the site directory. mkdocs material theme - https://squidfunk.github.io/mkdocs-material/ - this is the theme for our site. The theme adds the user interface elements that give our site the look and feel. It also has the features such as social cards. GitHub Pages - https://pages.github.com/ - this is the free tool for hosting public websites created by mkdocs Markdown - https://www.mkdocs.org/user-guide/writing-your-docs/#writing-with-markdown - this is the format we use for text. It allows us to have headers, lists, tables, links and images without learning HTML. Deploy Mkdocs GitHub Action - https://github.com/marketplace/actions/deploy-mkdocs - this is the tool we use to automatically build our site after edits are checked in with Git. Git Book - https://git-scm.com/book/en/v2 - a useful book on Git. Just read the first two chapters to learn how to check in new code. Conda - https://conda.io/ - this is a command line tool that keeps our Python libraries organized for each project. VS Code - https://code.visualstudio.com/ - this is the integrated development environment we use to mange the files on our website. Markdown Paste - https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image - this is the VS code extension we use to make sure we keep the markdown format generated by ChatGPT. Chart Embedding Our World Data Embedding","title":"References"},{"location":"references/#references","text":"","title":"References"},{"location":"references/#_1","text":"Concepts for Classification of Adaptive Instructional Systems","title":""},{"location":"references/#ieee-total-learning-architecture-references","text":"The IEEE Total Learning Architecture (TLA) is a set of standards for the design of online learning systems. ADLNet TLA References Implementation Main Advanced Distributed Learning (ADLNet) GitHub Site IEEE Standard for Artificial Intelligence (AI) Model Representation, Compression, Distribution, and Management","title":"IEEE Total Learning Architecture References"},{"location":"references/#references-for-book-building","text":"mkdocs - https://www.mkdocs.org/ - this is our tool for building the website. It converts Markdown into HTML in the site directory. mkdocs material theme - https://squidfunk.github.io/mkdocs-material/ - this is the theme for our site. The theme adds the user interface elements that give our site the look and feel. It also has the features such as social cards. GitHub Pages - https://pages.github.com/ - this is the free tool for hosting public websites created by mkdocs Markdown - https://www.mkdocs.org/user-guide/writing-your-docs/#writing-with-markdown - this is the format we use for text. It allows us to have headers, lists, tables, links and images without learning HTML. Deploy Mkdocs GitHub Action - https://github.com/marketplace/actions/deploy-mkdocs - this is the tool we use to automatically build our site after edits are checked in with Git. Git Book - https://git-scm.com/book/en/v2 - a useful book on Git. Just read the first two chapters to learn how to check in new code. Conda - https://conda.io/ - this is a command line tool that keeps our Python libraries organized for each project. VS Code - https://code.visualstudio.com/ - this is the integrated development environment we use to mange the files on our website. Markdown Paste - https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image - this is the VS code extension we use to make sure we keep the markdown format generated by ChatGPT.","title":"References for Book Building"},{"location":"references/#chart-embedding","text":"Our World Data Embedding","title":"Chart Embedding"},{"location":"case-studies/","text":"Case Studies in Building Intelligent Textbooks This document provides a sample of some of the intelligent textbooks that have been created with our workflows. AI Assisted Geometry Site URL: https://dmccreary.github.io/geometry-course GitHub Repository: https://github.com/dmccreary/geometry-course Description: AI Assisted Geometry is an online intelligent textbook that uses AI to help high-school students learn geometry using MicroSims. Status: We have created a detailed learning graph and about a dozen MicroSims. We are looking for schools, teachers students to give us feedback. Statistics: Markdown Files: 47 Images: 25 Word Count: 18093 MicroSims: 3 Glossary Terms: 38 AI Based Data Science with Python Site URL: https://dmccreary.github.io/data-science-course GitHub Repository: https://github.com/dmccreary/data-science-course Description: An AI based data science course that uses AI to help undergraduate college learn data science with Python. Status: We have created a detailed learning graph. We are looking for feedback on the priorities of the next steps. Statistics: Markdown Files: 21 Images: 3 Word Count: 22992 MicroSims: 1 Glossary Terms: 143 AI Circuits Course Site URL: https://dmccreary.github.io/circuits/ GitHub Repository: https://dmccreary.github.io/circuits/ Description: Designing circuits using AI. Created to support Dr. Sharat Bhatra's circuits course at the University of Minnesota. Status: Early stage. AI Racing League Site URL: https://coderdojotc.github.io/ai-racing-league GitHub Repository: https://github.com/CoderDojoTC/ai-racing-league Description: The AI Racing League is a project to support a fun way of teaching of AI and machine learning using a $300 RC car with a Raspberry Pi and a Camera. Status: We have created extensive content based on the recent upgrades from the NVIDIA Nano to the Raspberry Pi. We plan to continue to evolve the site to support the DonkeyCar projects. Statistics: Markdown Files: 107 Images: 70 Word Count: 39402 MicroSims: 0 Glossary Terms: 20 Applied Linear Algebra for Computer Science and Electrical Engineering Site URL: https://artemispearson.github.io/learning-graphs/ GitHub Repository: https://artemispearson.github.io/learning-graphs/ Architectural Tradeoff Analysis Method Site URL: https://dmccreary.github.io/atam/ GitHub Repository: https://github.com/dmccreary/atam Description: ATAM is a method for evaluating software architecture. We apply ATAM to the database selection process. This book is a companion to the book 'Making Sense of NoSQL'. Status: Early stage. Beginning Electronics with AI Site URL: https://dmccreary.github.io/beginning-electronics GitHub Repository: https://github.com/dmccreary/beginning-electronics Description: An online course that uses MicroSims to help junior high and high students learn the basics of electronics. Status: Very minimal content and a few example MicroSims. We are looking for feedback on the priorities of the next steps. Statistics: Markdown Files: 40 Images: 89 Word Count: 15771 MicroSims: 6 Glossary Terms: 0 Building AI Agents with Python Site URL: https://dmccreary.github.io/agents-course/ GitHub Repository: https://dmccreary.github.io/agents-course/ Description: Creating intelligent agents with Python and LLMs. Status: Early stage. Deep Learning with AI Site URL: https://dmccreary.github.io/deep-learning-course GitHub Repository: https://github.com/dmccreary/deep-learning-course Description: Undergraduate Deep Learning Course with Dr. Sang-Hyun Oh at the University of Minnesota. Designing and Building and Clocks and Watches with AI Site URL: https://dmccreary.github.io/clocks-and-watches GitHub Repository: https://github.com/dmccreary/clocks-and-watches Description: An online course that uses MicroSims to help high school students learn how to design and build clocks and watches. We focus on using a breadboard, microcontrollers, displays, real-time clocks and displays. Status: We have a lot of content, a detailed learning graph and are considering testing the content in a live classroom setting. Statistics: Markdown Files: 124 Images: 105 Word Count: 37325 MicroSims: 11 Glossary Terms: 149 Digital Design With Programmable Logic Site URL: https://mcbasken.github.io/umn-senior-design/ GitHub Repository: https://mcbasken.github.io/umn-senior-design/ Digital Electronics with AI Site URL: https://dmccreary.github.io/digital-electronics GitHub Repository: https://github.com/dmccreary/digital-electronics Description: An online course that uses MicroSims to help high school students learn basic digital electronics. We focus on using a breadboard, simple LEDs, buttons and logic gates. We assume students have access to about $50 worth of parts. We do not cover microcontrollers. Status: We have created a simple framework and we are adding new MicroSims as needed. We are looking for schools, teachers and students to give us feedback on what content to create next. Statistics: Markdown Files: 15 Images: 15 Word Count: 2708 MicroSims: 3 Glossary Terms: 0 Fluid Power Systems Site URL: https://dmccreary.github.io/fluid-power-systems/ GitHub Repository: https://dmccreary.github.io/fluid-power-systems/ Description: Done in conjunction with Peter Vinck at Inflow Corporation Status: Early stage. Generative AI Architecture Patterns Site URL: https://dmccreary.github.io/genai-arch-patterns GitHub Repository: https://github.com/dmccreary/genai-arch-patterns Description: An online course that uses AI to help software architects understand how to use generative AI to create and maintain their AI architecture patterns. Status: Minimal content and slides. Use to support an AI architecture consulting practice and presentation at the MACC conferences in 2023 and 2024. Statistics: Markdown Files: 34 Images: 5 Word Count: 7283 MicroSims: 1 Glossary Terms: 16 Generative AI Strategy Site URL: https://dmccreary.github.io/cmm-for-genai GitHub Repository: https://github.com/dmccreary/cmm-for-genai Description: Generative AI Strategy is an online course that uses AI to help business leaders understand how to use generative AI to create and maintain their AI business strategy. Status: Minimal content and slides. Use to support an AI strategy development consulting practice. Statistics: Markdown Files: 22 Images: 10 Word Count: 6972 MicroSims: 3 Glossary Terms: 0 Generative AI for Teachers Site URL: https://coderdojotc.github.io/chatgpt-for-teachers GitHub Repository: https://github.com/CoderDojoTC/chatgpt-for-teachers Description: An online course that uses AI to help teachers understand how to use generative AI to create and maintain their AI teaching materials. Status: Minimal content and slides but many sample prompts and MicroSims. Use to support a talks given in 2023 and 2024. Statistics: Markdown Files: 98 Images: 47 Word Count: 19019 MicroSims: 100 Glossary Terms: 15 Graph Algorithms with AI Site URL: https://dmccreary.github.io/graph-algorithms GitHub Repository: https://github.com/dmccreary/graph-algorithms Description: An online course that uses MicroSims to help undergraduate college students learn the basics of graph algorithms. Status: Many MicroSims created using a variety of JavaScript libraries. We are looking for feedback on the priorities of the next steps. Statistics: Markdown Files: 71 Images: 49 Word Count: 30360 MicroSims: 15 Glossary Terms: 84 Graph Data Modeling with AI Site URL: https://dmccreary.github.io/graph-data-modeling-course GitHub Repository: https://github.com/dmccreary/graph-data-modeling-course Description: An online course that uses MicroSims to help undergraduate college students learn the basics of graph data modeling. Example graph data models created for a variety of domains. Status: Many MicroSims created using mostly vis.js. We are looking for feedback on the priorities of the next steps. Statistics: Markdown Files: 49 Images: 10 Word Count: 13491 MicroSims: 3 Glossary Terms: 156 Graph Learning Management Systems Site URL: https://dmccreary.github.io/graph-lms GitHub Repository: https://github.com/dmccreary/graph-lms Description: An online course that uses MicroSims to helps data architects learn how of graphs are used to build AI learning management systems. Used to help various startups interested in the integrating AI into production learning management systems. Status: Several MicroSims created using mostly vis.js. We are looking for feedback on the priorities of the next steps. Statistics: Markdown Files: 17 Images: 13 Word Count: 7877 MicroSims: 10 Glossary Terms: 52 GraphRAG Site URL: https://dmccreary.github.io/graph-rag GitHub Repository: https://github.com/dmccreary/graph-rag Description: An online course that teaches the concepts around GraphRag. Status: Used to support a talk on GraphRAG. Minimal content. Statistics: Markdown Files: 14 Images: 3 Word Count: 7583 MicroSims: 0 Glossary Terms: 33 Intelligent Textbooks Site URL: https://dmccreary.github.io/intelligent-textbooks GitHub Repository: https://github.com/dmccreary/intelligent-textbooks Description: An online course that uses helps participants build intelligent textbooks using the mkdocs-material documentation build system. This site contains a detailed tutorial on how to get started and was that the mkdocs-material system can be extended to support intelligent textbooks. Status: Many best practices and detailed tutorial created. Statistics: Images: 23 Word Count: 11914 MicroSims: 4 Glossary Terms: 31 Introduction to Microcontrollers with the PIC24 Site URL: https://irvinggsea.github.io/i-book-v1/ GitHub Repository: https://irvinggsea.github.io/i-book-v1/ Introduction to Operating Systems Site URL: https://btlepak.github.io/Intelligent_Textbook/ GitHub Repository: https://btlepak.github.io/Intelligent_Textbook/ Learning Graphs Site URL: https://dmccreary.github.io/learning-graphs GitHub Repository: https://github.com/dmccreary/learning-graphs Description: Site focused on the creation and maintenance of learning graphs. Extensive examples of how vis.js is used to create and maintain learning graphs. Status: Many examples of how vis.js is used to create and maintain learning graphs. Statistics: Markdown Files: 74 Images: 46 Word Count: 33460 MicroSims: 2 Glossary Terms: 47 Learning MicroPython with AI Site URL: https://dmccreary.github.io/learning-micropython GitHub Repository: https://github.com/dmccreary/learning-micropython Description: An online course that helps kids learn MicroPython on microcontrollers using fun low-cost projects. Status: Extensive content and Google Analytics shows we are getting thousands of hits per month from users all over the world. Statistics: Markdown Files: 204 Images: 232 Word Count: 63428 MicroSims: 2 Glossary Terms: 0 Micro Simulations for Electrical Engineering Site URL: https://kenn0727.github.io/ee-microsims GitHub Repository: https://github.com/kenn0727/ee-microsims Description: A site that contains 11 MicroSims created in 2024 by a group of six students at the University of Minnesota during their Senior Project in the Department of Electrical Engineering an Computer Design. The MicroSims were designed to help students learn the basics of electrical engineering. Status: Some good examples of MicroSims created in p5.js by students learning how to do prompt engineering using ChatGPT. Statistics: Markdown Files: 14 Images: 23 Word Count: 1105 MicroSims: 12 Glossary Terms: 0 MicroSims Site URL: https://dmccreary.github.io/microsims GitHub Repository: https://github.com/dmccreary/microsims Description: An online course that helps participants learn how to create MicroSims using JavaScript and the p5.js library. The site is used as a showcase for the diversity of subjects MicroSims can be used to teach. Status: Many sample MicroSims and detailed tutorials created. Statistics: Markdown Files: 88 Images: 85 Word Count: 17582 MicroSims: 66 Glossary Terms: 20 Moving Rainbow Site URL: https://dmccreary.github.io/moving-rainbow GitHub Repository: https://github.com/dmccreary/moving-rainbow Description: An online course that colorful addressable LED strips and LED noodles to create fun hands on projects for students learning computational thinking. Status: The site is used by schools that teach coding and have the right hardware. Many examples of how to use addressable LED strips and LED noodles to create fun projects using MicroPython. Statistics: Markdown Files: 49 Images: 104 Word Count: 16849 MicroSims: 0 Glossary Terms: 6 Neurodiversity Course Site URL: https://dmccreary.github.io/neurodiversity-course/ GitHub Repository: https://dmccreary.github.io/neurodiversity-course/ Personal Finance Site URL: https://dmccreary.github.io/personal-finance/ GitHub Repository: https://dmccreary.github.io/personal-finance/ Description: An online course that helps high school students learn personal finance. Many MicroSims and Infographics with graphic novel storytelling. Robot Day Site URL: https://dmccreary.github.io/robot-day GitHub Repository: https://github.com/dmccreary/robot-day Description: An online resources for single-day events at schools that want to get students excited about STEM by doing fun interactive hands-on projects on a series of tables that drive the students to understand all the components of a collision-avoidance robot. Status: The site is used by schools that want to get students excited about STEM by doing fun interactive hands-on projects on a series of tables that drive the students to understand all the components of a collision-avoidance robot. Statistics: Markdown Files: 52 Images: 64 Word Count: 25930 MicroSims: 1 Glossary Terms: 4 STEM Robots Site URL: https://dmccreary.github.io/stem-robots GitHub Repository: https://github.com/dmccreary/stem-robots Description: An online course that helps high school students learn the basics of STEM and robotics. THe site is built around using the Raspberry Pi RP2040 chip on low-cost robotics kits to teach fun and engaging projects that teach computational thinking Statistics: Markdown Files: 74 Images: 80 Word Count: 18244 MicroSims: 5 Glossary Terms: 46 Signal Processing Site URL: https://dmccreary.github.io/signal-processing GitHub Repository: https://github.com/dmccreary/signal-processing Description: An online course demonstrates how generative AI tools can be used to create undergraduate college courses about on the topic of signal processing. Statistics: Markdown Files: 53 Images: 17 Word Count: 28485 MicroSims: 6 Glossary Terms: 105 Spectrum Analyzer Site URL: https://dmccreary.github.io/spectrum-analyzer/ GitHub Repository: https://dmccreary.github.io/spectrum-analyzer/ Description: Create a spectrum analyzer using a Raspberry Pi Pico and a microphone. The site contains a detailed tutorial on how to build the hardware and software. Tracking AI Site URL: https://dmccreary.github.io/tracking-ai-course GitHub Repository: https://github.com/dmccreary/tracking-ai-course Description: An online course that teaches how to track the progress of AI. The site was designed to support strategy consulting within education and knowledge management organizations. The site also includes sample MicroSims and infographics. Statistics: Markdown Files: 47 Images: 25 Word Count: 18093 MicroSims: 3 Glossary Terms: 38","title":"Case Studies"},{"location":"case-studies/#case-studies-in-building-intelligent-textbooks","text":"This document provides a sample of some of the intelligent textbooks that have been created with our workflows.","title":"Case Studies in Building Intelligent Textbooks"},{"location":"case-studies/#ai-assisted-geometry","text":"Site URL: https://dmccreary.github.io/geometry-course GitHub Repository: https://github.com/dmccreary/geometry-course Description: AI Assisted Geometry is an online intelligent textbook that uses AI to help high-school students learn geometry using MicroSims. Status: We have created a detailed learning graph and about a dozen MicroSims. We are looking for schools, teachers students to give us feedback. Statistics: Markdown Files: 47 Images: 25 Word Count: 18093 MicroSims: 3 Glossary Terms: 38","title":"AI Assisted Geometry"},{"location":"case-studies/#ai-based-data-science-with-python","text":"Site URL: https://dmccreary.github.io/data-science-course GitHub Repository: https://github.com/dmccreary/data-science-course Description: An AI based data science course that uses AI to help undergraduate college learn data science with Python. Status: We have created a detailed learning graph. We are looking for feedback on the priorities of the next steps. Statistics: Markdown Files: 21 Images: 3 Word Count: 22992 MicroSims: 1 Glossary Terms: 143","title":"AI Based Data Science with Python"},{"location":"case-studies/#ai-circuits-course","text":"Site URL: https://dmccreary.github.io/circuits/ GitHub Repository: https://dmccreary.github.io/circuits/ Description: Designing circuits using AI. Created to support Dr. Sharat Bhatra's circuits course at the University of Minnesota. Status: Early stage.","title":"AI Circuits Course"},{"location":"case-studies/#ai-racing-league","text":"Site URL: https://coderdojotc.github.io/ai-racing-league GitHub Repository: https://github.com/CoderDojoTC/ai-racing-league Description: The AI Racing League is a project to support a fun way of teaching of AI and machine learning using a $300 RC car with a Raspberry Pi and a Camera. Status: We have created extensive content based on the recent upgrades from the NVIDIA Nano to the Raspberry Pi. We plan to continue to evolve the site to support the DonkeyCar projects. Statistics: Markdown Files: 107 Images: 70 Word Count: 39402 MicroSims: 0 Glossary Terms: 20","title":"AI Racing League"},{"location":"case-studies/#applied-linear-algebra-for-computer-science-and-electrical-engineering","text":"Site URL: https://artemispearson.github.io/learning-graphs/ GitHub Repository: https://artemispearson.github.io/learning-graphs/","title":"Applied Linear Algebra for Computer Science and Electrical Engineering"},{"location":"case-studies/#architectural-tradeoff-analysis-method","text":"Site URL: https://dmccreary.github.io/atam/ GitHub Repository: https://github.com/dmccreary/atam Description: ATAM is a method for evaluating software architecture. We apply ATAM to the database selection process. This book is a companion to the book 'Making Sense of NoSQL'. Status: Early stage.","title":"Architectural Tradeoff Analysis Method"},{"location":"case-studies/#beginning-electronics-with-ai","text":"Site URL: https://dmccreary.github.io/beginning-electronics GitHub Repository: https://github.com/dmccreary/beginning-electronics Description: An online course that uses MicroSims to help junior high and high students learn the basics of electronics. Status: Very minimal content and a few example MicroSims. We are looking for feedback on the priorities of the next steps. Statistics: Markdown Files: 40 Images: 89 Word Count: 15771 MicroSims: 6 Glossary Terms: 0","title":"Beginning Electronics with AI"},{"location":"case-studies/#building-ai-agents-with-python","text":"Site URL: https://dmccreary.github.io/agents-course/ GitHub Repository: https://dmccreary.github.io/agents-course/ Description: Creating intelligent agents with Python and LLMs. Status: Early stage.","title":"Building AI Agents with Python"},{"location":"case-studies/#deep-learning-with-ai","text":"Site URL: https://dmccreary.github.io/deep-learning-course GitHub Repository: https://github.com/dmccreary/deep-learning-course Description: Undergraduate Deep Learning Course with Dr. Sang-Hyun Oh at the University of Minnesota.","title":"Deep Learning with AI"},{"location":"case-studies/#designing-and-building-and-clocks-and-watches-with-ai","text":"Site URL: https://dmccreary.github.io/clocks-and-watches GitHub Repository: https://github.com/dmccreary/clocks-and-watches Description: An online course that uses MicroSims to help high school students learn how to design and build clocks and watches. We focus on using a breadboard, microcontrollers, displays, real-time clocks and displays. Status: We have a lot of content, a detailed learning graph and are considering testing the content in a live classroom setting. Statistics: Markdown Files: 124 Images: 105 Word Count: 37325 MicroSims: 11 Glossary Terms: 149","title":"Designing and Building and Clocks and Watches with AI"},{"location":"case-studies/#digital-design-with-programmable-logic","text":"Site URL: https://mcbasken.github.io/umn-senior-design/ GitHub Repository: https://mcbasken.github.io/umn-senior-design/","title":"Digital Design With Programmable Logic"},{"location":"case-studies/#digital-electronics-with-ai","text":"Site URL: https://dmccreary.github.io/digital-electronics GitHub Repository: https://github.com/dmccreary/digital-electronics Description: An online course that uses MicroSims to help high school students learn basic digital electronics. We focus on using a breadboard, simple LEDs, buttons and logic gates. We assume students have access to about $50 worth of parts. We do not cover microcontrollers. Status: We have created a simple framework and we are adding new MicroSims as needed. We are looking for schools, teachers and students to give us feedback on what content to create next. Statistics: Markdown Files: 15 Images: 15 Word Count: 2708 MicroSims: 3 Glossary Terms: 0","title":"Digital Electronics with AI"},{"location":"case-studies/#fluid-power-systems","text":"Site URL: https://dmccreary.github.io/fluid-power-systems/ GitHub Repository: https://dmccreary.github.io/fluid-power-systems/ Description: Done in conjunction with Peter Vinck at Inflow Corporation Status: Early stage.","title":"Fluid Power Systems"},{"location":"case-studies/#generative-ai-architecture-patterns","text":"Site URL: https://dmccreary.github.io/genai-arch-patterns GitHub Repository: https://github.com/dmccreary/genai-arch-patterns Description: An online course that uses AI to help software architects understand how to use generative AI to create and maintain their AI architecture patterns. Status: Minimal content and slides. Use to support an AI architecture consulting practice and presentation at the MACC conferences in 2023 and 2024. Statistics: Markdown Files: 34 Images: 5 Word Count: 7283 MicroSims: 1 Glossary Terms: 16","title":"Generative AI Architecture Patterns"},{"location":"case-studies/#generative-ai-strategy","text":"Site URL: https://dmccreary.github.io/cmm-for-genai GitHub Repository: https://github.com/dmccreary/cmm-for-genai Description: Generative AI Strategy is an online course that uses AI to help business leaders understand how to use generative AI to create and maintain their AI business strategy. Status: Minimal content and slides. Use to support an AI strategy development consulting practice. Statistics: Markdown Files: 22 Images: 10 Word Count: 6972 MicroSims: 3 Glossary Terms: 0","title":"Generative AI Strategy"},{"location":"case-studies/#generative-ai-for-teachers","text":"Site URL: https://coderdojotc.github.io/chatgpt-for-teachers GitHub Repository: https://github.com/CoderDojoTC/chatgpt-for-teachers Description: An online course that uses AI to help teachers understand how to use generative AI to create and maintain their AI teaching materials. Status: Minimal content and slides but many sample prompts and MicroSims. Use to support a talks given in 2023 and 2024. Statistics: Markdown Files: 98 Images: 47 Word Count: 19019 MicroSims: 100 Glossary Terms: 15","title":"Generative AI for Teachers"},{"location":"case-studies/#graph-algorithms-with-ai","text":"Site URL: https://dmccreary.github.io/graph-algorithms GitHub Repository: https://github.com/dmccreary/graph-algorithms Description: An online course that uses MicroSims to help undergraduate college students learn the basics of graph algorithms. Status: Many MicroSims created using a variety of JavaScript libraries. We are looking for feedback on the priorities of the next steps. Statistics: Markdown Files: 71 Images: 49 Word Count: 30360 MicroSims: 15 Glossary Terms: 84","title":"Graph Algorithms with AI"},{"location":"case-studies/#graph-data-modeling-with-ai","text":"Site URL: https://dmccreary.github.io/graph-data-modeling-course GitHub Repository: https://github.com/dmccreary/graph-data-modeling-course Description: An online course that uses MicroSims to help undergraduate college students learn the basics of graph data modeling. Example graph data models created for a variety of domains. Status: Many MicroSims created using mostly vis.js. We are looking for feedback on the priorities of the next steps. Statistics: Markdown Files: 49 Images: 10 Word Count: 13491 MicroSims: 3 Glossary Terms: 156","title":"Graph Data Modeling with AI"},{"location":"case-studies/#graph-learning-management-systems","text":"Site URL: https://dmccreary.github.io/graph-lms GitHub Repository: https://github.com/dmccreary/graph-lms Description: An online course that uses MicroSims to helps data architects learn how of graphs are used to build AI learning management systems. Used to help various startups interested in the integrating AI into production learning management systems. Status: Several MicroSims created using mostly vis.js. We are looking for feedback on the priorities of the next steps. Statistics: Markdown Files: 17 Images: 13 Word Count: 7877 MicroSims: 10 Glossary Terms: 52","title":"Graph Learning Management Systems"},{"location":"case-studies/#graphrag","text":"Site URL: https://dmccreary.github.io/graph-rag GitHub Repository: https://github.com/dmccreary/graph-rag Description: An online course that teaches the concepts around GraphRag. Status: Used to support a talk on GraphRAG. Minimal content. Statistics: Markdown Files: 14 Images: 3 Word Count: 7583 MicroSims: 0 Glossary Terms: 33","title":"GraphRAG"},{"location":"case-studies/#intelligent-textbooks","text":"Site URL: https://dmccreary.github.io/intelligent-textbooks GitHub Repository: https://github.com/dmccreary/intelligent-textbooks Description: An online course that uses helps participants build intelligent textbooks using the mkdocs-material documentation build system. This site contains a detailed tutorial on how to get started and was that the mkdocs-material system can be extended to support intelligent textbooks. Status: Many best practices and detailed tutorial created. Statistics: Images: 23 Word Count: 11914 MicroSims: 4 Glossary Terms: 31","title":"Intelligent Textbooks"},{"location":"case-studies/#introduction-to-microcontrollers-with-the-pic24","text":"Site URL: https://irvinggsea.github.io/i-book-v1/ GitHub Repository: https://irvinggsea.github.io/i-book-v1/","title":"Introduction to Microcontrollers with the PIC24"},{"location":"case-studies/#introduction-to-operating-systems","text":"Site URL: https://btlepak.github.io/Intelligent_Textbook/ GitHub Repository: https://btlepak.github.io/Intelligent_Textbook/","title":"Introduction to Operating Systems"},{"location":"case-studies/#learning-graphs","text":"Site URL: https://dmccreary.github.io/learning-graphs GitHub Repository: https://github.com/dmccreary/learning-graphs Description: Site focused on the creation and maintenance of learning graphs. Extensive examples of how vis.js is used to create and maintain learning graphs. Status: Many examples of how vis.js is used to create and maintain learning graphs. Statistics: Markdown Files: 74 Images: 46 Word Count: 33460 MicroSims: 2 Glossary Terms: 47","title":"Learning Graphs"},{"location":"case-studies/#learning-micropython-with-ai","text":"Site URL: https://dmccreary.github.io/learning-micropython GitHub Repository: https://github.com/dmccreary/learning-micropython Description: An online course that helps kids learn MicroPython on microcontrollers using fun low-cost projects. Status: Extensive content and Google Analytics shows we are getting thousands of hits per month from users all over the world. Statistics: Markdown Files: 204 Images: 232 Word Count: 63428 MicroSims: 2 Glossary Terms: 0","title":"Learning MicroPython with AI"},{"location":"case-studies/#micro-simulations-for-electrical-engineering","text":"Site URL: https://kenn0727.github.io/ee-microsims GitHub Repository: https://github.com/kenn0727/ee-microsims Description: A site that contains 11 MicroSims created in 2024 by a group of six students at the University of Minnesota during their Senior Project in the Department of Electrical Engineering an Computer Design. The MicroSims were designed to help students learn the basics of electrical engineering. Status: Some good examples of MicroSims created in p5.js by students learning how to do prompt engineering using ChatGPT. Statistics: Markdown Files: 14 Images: 23 Word Count: 1105 MicroSims: 12 Glossary Terms: 0","title":"Micro Simulations for Electrical Engineering"},{"location":"case-studies/#microsims","text":"Site URL: https://dmccreary.github.io/microsims GitHub Repository: https://github.com/dmccreary/microsims Description: An online course that helps participants learn how to create MicroSims using JavaScript and the p5.js library. The site is used as a showcase for the diversity of subjects MicroSims can be used to teach. Status: Many sample MicroSims and detailed tutorials created. Statistics: Markdown Files: 88 Images: 85 Word Count: 17582 MicroSims: 66 Glossary Terms: 20","title":"MicroSims"},{"location":"case-studies/#moving-rainbow","text":"Site URL: https://dmccreary.github.io/moving-rainbow GitHub Repository: https://github.com/dmccreary/moving-rainbow Description: An online course that colorful addressable LED strips and LED noodles to create fun hands on projects for students learning computational thinking. Status: The site is used by schools that teach coding and have the right hardware. Many examples of how to use addressable LED strips and LED noodles to create fun projects using MicroPython. Statistics: Markdown Files: 49 Images: 104 Word Count: 16849 MicroSims: 0 Glossary Terms: 6","title":"Moving Rainbow"},{"location":"case-studies/#neurodiversity-course","text":"Site URL: https://dmccreary.github.io/neurodiversity-course/ GitHub Repository: https://dmccreary.github.io/neurodiversity-course/","title":"Neurodiversity Course"},{"location":"case-studies/#personal-finance","text":"Site URL: https://dmccreary.github.io/personal-finance/ GitHub Repository: https://dmccreary.github.io/personal-finance/ Description: An online course that helps high school students learn personal finance. Many MicroSims and Infographics with graphic novel storytelling.","title":"Personal Finance"},{"location":"case-studies/#robot-day","text":"Site URL: https://dmccreary.github.io/robot-day GitHub Repository: https://github.com/dmccreary/robot-day Description: An online resources for single-day events at schools that want to get students excited about STEM by doing fun interactive hands-on projects on a series of tables that drive the students to understand all the components of a collision-avoidance robot. Status: The site is used by schools that want to get students excited about STEM by doing fun interactive hands-on projects on a series of tables that drive the students to understand all the components of a collision-avoidance robot. Statistics: Markdown Files: 52 Images: 64 Word Count: 25930 MicroSims: 1 Glossary Terms: 4","title":"Robot Day"},{"location":"case-studies/#stem-robots","text":"Site URL: https://dmccreary.github.io/stem-robots GitHub Repository: https://github.com/dmccreary/stem-robots Description: An online course that helps high school students learn the basics of STEM and robotics. THe site is built around using the Raspberry Pi RP2040 chip on low-cost robotics kits to teach fun and engaging projects that teach computational thinking Statistics: Markdown Files: 74 Images: 80 Word Count: 18244 MicroSims: 5 Glossary Terms: 46","title":"STEM Robots"},{"location":"case-studies/#signal-processing","text":"Site URL: https://dmccreary.github.io/signal-processing GitHub Repository: https://github.com/dmccreary/signal-processing Description: An online course demonstrates how generative AI tools can be used to create undergraduate college courses about on the topic of signal processing. Statistics: Markdown Files: 53 Images: 17 Word Count: 28485 MicroSims: 6 Glossary Terms: 105","title":"Signal Processing"},{"location":"case-studies/#spectrum-analyzer","text":"Site URL: https://dmccreary.github.io/spectrum-analyzer/ GitHub Repository: https://dmccreary.github.io/spectrum-analyzer/ Description: Create a spectrum analyzer using a Raspberry Pi Pico and a microphone. The site contains a detailed tutorial on how to build the hardware and software.","title":"Spectrum Analyzer"},{"location":"case-studies/#tracking-ai","text":"Site URL: https://dmccreary.github.io/tracking-ai-course GitHub Repository: https://github.com/dmccreary/tracking-ai-course Description: An online course that teaches how to track the progress of AI. The site was designed to support strategy consulting within education and knowledge management organizations. The site also includes sample MicroSims and infographics. Statistics: Markdown Files: 47 Images: 25 Word Count: 18093 MicroSims: 3 Glossary Terms: 38","title":"Tracking AI"},{"location":"chapters/01-social-enterprise-basics/","text":"","title":"1. Social Enterprise Basics"},{"location":"chapters/02-design-thinking/","text":"Stakeholder Mapping (interactive)","title":"2. Design Thinking"},{"location":"chapters/02-design-thinking/#stakeholder-mapping-interactive","text":"","title":"Stakeholder Mapping (interactive)"},{"location":"chapters/03-business-model/","text":"## Impact vs. Effort (interactive)","title":"3. Business Model"},{"location":"concepts/","text":"","title":"Index"},{"location":"concepts/best-practices/","text":"Best Practices for Creating Intelligent Textbooks with MkDocs Material This guide outlines the best practices for creating engaging, interactive intelligent textbooks using the MkDocs Material system with MicroSims. Repository Structure repository/ \u251c\u2500\u2500 docs/ # Content directory \u2502 \u251c\u2500\u2500 index.md # Home page \u2502 \u251c\u2500\u2500 about.md # About page \u2502 \u251c\u2500\u2500 img/ # Images directory \u2502 \u251c\u2500\u2500 css/ # Custom CSS \u2502 \u251c\u2500\u2500 js/ # Custom JavaScript \u2502 \u251c\u2500\u2500 sims/ # MicroSims directory \u2502 \u2502 \u251c\u2500\u2500 sim1/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md # MicroSim documentation \u2502 \u2502 \u2502 \u251c\u2500\u2500 sketch.js # p5.js code \u2502 \u2502 \u251c\u2500\u2500 sim2/ \u2502 \u2502 \u2514\u2500\u2500 index.md # MicroSims gallery page \u2502 \u251c\u2500\u2500 tutorial/ # Tutorial section \u2502 \u251c\u2500\u2500 glossary.md # Glossary of terms \u2502 \u2514\u2500\u2500 learning-graph.md # Learning graph visualization \u251c\u2500\u2500 mkdocs.yml # Configuration file \u2514\u2500\u2500 requirements.txt # Python dependencies MkDocs Configuration (mkdocs.yml) site_name: Your Intelligent Textbook site_description: 'Description of your intelligent textbook' site_author: 'Your Name' repo_name: 'GitHub Repo' site_url: 'https://yourusername.github.io/your-repo/' repo_url: 'https://github.com/yourusername/your-repo' edit_uri: 'blob/master/docs' nav: - Home: index.md - About: about.md - Learning Paths: - Introduction: learning-paths/index.md - Path 1: learning-paths/path1.md - Tutorial: - Introduction: tutorial/index.md - Getting Started: tutorial/getting-started.md - MicroSims: - Gallery: sims/index.md - Simulation 1: sims/sim1/index.md - Glossary: glossary.md - Learning Graph: learning-graph.md theme: name: material logo: img/logo.png favicon: img/favicon.ico palette: primary: 'blue' accent: 'orange' features: - content.code.copy - navigation.expand - navigation.path - navigation.indexes - toc.follow - navigation.top - navigation.footer - content.action.edit plugins: - search - social markdown_extensions: - admonition - md_in_html - pymdownx.details - pymdownx.superfences - attr_list - pymdownx.highlight: linenums: true extra_css: - css/extra.css extra_javascript: - js/extra.js - https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js Core Elements of an Intelligent Textbook 1. Learning Graph A learning graph visualizes the relationships between concepts in your textbook, helping students understand prerequisites and learning paths. <div id=\"learning-graph\" style=\"width: 100%; height: 600px;\"></div> <script src=\"https://cdn.jsdelivr.net/npm/vis-network@9.1.2/dist/vis-network.min.js\"></script> <script> document.addEventListener('DOMContentLoaded', function() { // Nodes represent concepts const nodes = [ { id: 1, label: \"Concept 1\" }, { id: 2, label: \"Concept 2\" }, { id: 3, label: \"Concept 3\" } ]; // Edges represent relationships/prerequisites const edges = [ { from: 1, to: 2 }, { from: 1, to: 3 } ]; const container = document.getElementById('learning-graph'); const data = { nodes: nodes, edges: edges }; const options = { nodes: { shape: 'box', margin: 10, font: { size: 14 } }, edges: { arrows: 'to', smooth: true }, physics: { enabled: true, solver: 'forceAtlas2Based' } }; new vis.Network(container, data, options); }); </script> 2. Interactive Admonitions Use MkDocs Material's admonitions for callouts, tips, and interactive elements. !!! note \"Key Concept\" This is an important concept to understand. !!! example \"Try it yourself\" Here's an example to work through on your own. !!! question \"Check Your Understanding\" What would happen if you changed the value of x? ??? tip \"Hint (click to reveal)\" Look at the relationship between x and y. 3. MicroSim Integration MicroSims are small, interactive simulations that demonstrate concepts. Below is the standard structure for embedding a p5.js MicroSim: <div class=\"microsim-container\"> <div id=\"microsim-canvas\"></div> <div class=\"microsim-controls\"> <button id=\"start-btn\">Start</button> <button id=\"pause-btn\">Pause</button> <button id=\"reset-btn\">Reset</button> <div class=\"slider-container\"> <label for=\"speed-slider\">Speed:</label> <input type=\"range\" id=\"speed-slider\" min=\"1\" max=\"10\" value=\"5\"> </div> </div> </div> <script src=\"sketch.js\"></script> 4. Embedded Quizzes Embed interactive quizzes to test comprehension. <div class=\"quiz-container\"> <div class=\"quiz-question\"> <p>What is the primary advantage of using MicroSims in education?</p> <form class=\"quiz-options\"> <div> <input type=\"radio\" id=\"opt1\" name=\"q1\" value=\"a\"> <label for=\"opt1\">They look visually appealing</label> </div> <div> <input type=\"radio\" id=\"opt2\" name=\"q1\" value=\"b\"> <label for=\"opt2\">They allow experiential learning through interaction</label> </div> <div> <input type=\"radio\" id=\"opt3\" name=\"q1\" value=\"c\"> <label for=\"opt3\">They're easy to create</label> </div> <div> <input type=\"radio\" id=\"opt4\" name=\"q1\" value=\"d\"> <label for=\"opt4\">They load faster than videos</label> </div> </form> <button class=\"quiz-check\">Check Answer</button> <div class=\"quiz-feedback\"></div> </div> </div> <script> document.querySelector('.quiz-check').addEventListener('click', function() { const selected = document.querySelector('input[name=\"q1\"]:checked'); const feedback = document.querySelector('.quiz-feedback'); if (selected) { if (selected.value === 'b') { feedback.innerHTML = 'Correct! MicroSims enable learning through hands-on interaction.'; feedback.style.color = 'green'; } else { feedback.innerHTML = 'Not quite. Try thinking about how students learn best.'; feedback.style.color = 'red'; } } else { feedback.innerHTML = 'Please select an answer.'; feedback.style.color = 'orange'; } }); </script> 5. Glossary Structure A well-structured glossary helps students quickly reference key terms. # Glossary #### Concept A A detailed explanation of Concept A with examples and related concepts. #### Concept B A detailed explanation of Concept B with examples and related concepts. Best Practices for MicroSim Development Start with Learning Objectives : Define what you want students to learn before creating the MicroSim. Keep It Focused : Each MicroSim should focus on demonstrating a single concept or a closely related set of concepts. Consistent Interface : Use consistent controls and UI elements across all MicroSims. Responsive Design : Ensure MicroSims work on different screen sizes. Progressive Enhancement : Start with basic functionality, then add more complex features. Clear Instructions : Provide clear instructions on how to use the MicroSim. Meaningful Controls : Each control should have a clear purpose related to the concept being taught. Visual Feedback : Provide visual feedback when parameters are changed. Performance Optimization : Optimize for performance to ensure smooth operation. Accessibility : Make MicroSims accessible to users with disabilities. Standard MicroSim Template (sketch.js) let simulation; function setup() { // Create canvas and add it to the microsim-canvas element const canvas = createCanvas(600, 400); canvas.parent('microsim-canvas'); // Initialize the simulation simulation = new Simulation(); // Set up UI controls setupControls(); // Start in paused state noLoop(); } function draw() { background(240); simulation.update(); simulation.display(); } // Simulation class to encapsulate logic class Simulation { constructor() { this.parameters = { speed: 5, // Add other parameters here }; this.isRunning = false; // Initialize simulation elements this.elements = []; } update() { if (this.isRunning) { // Update simulation state based on parameters } } display() { // Display simulation elements } reset() { // Reset simulation to initial state } setParameter(name, value) { this.parameters[name] = value; } start() { this.isRunning = true; } pause() { this.isRunning = false; } } // Set up event listeners for controls function setupControls() { // Start button document.getElementById('start-btn').addEventListener('click', function() { simulation.start(); loop(); }); // Pause button document.getElementById('pause-btn').addEventListener('click', function() { simulation.pause(); noLoop(); }); // Reset button document.getElementById('reset-btn').addEventListener('click', function() { simulation.reset(); redraw(); }); // Speed slider document.getElementById('speed-slider').addEventListener('input', function() { simulation.setParameter('speed', parseInt(this.value)); }); } Metrics for Measuring Textbook Quality Content Metrics : Number of markdown files Total word count Number of images Number of MicroSims Glossary term count Engagement Metrics : Page views per section Average time spent on each page MicroSim interaction rate Quiz completion rate Quiz success rate Learning Graph Metrics : Coverage of concepts Connectedness of concepts Learning path completeness Automating Metrics Collection Create a Python script to analyze repository metrics (similar to your get-metrics-json.py): #!/usr/bin/env python3 import os import re from pathlib import Path import argparse import json def count_markdown_files(docs_dir): \"\"\"Count total number of markdown files in the docs directory.\"\"\" return len(list(Path(docs_dir).glob('**/*.md'))) def count_images(docs_dir): \"\"\"Count total number of image files in the docs directory.\"\"\" extensions = ['*.png', '*.jpg', '*.jpeg', '*.gif', '*.svg'] count = 0 for ext in extensions: count += len(list(Path(docs_dir).glob(f'**/{ext}'))) return count def count_words_in_markdown(docs_dir): \"\"\"Count total number of words in all markdown files.\"\"\" total_words = 0 for md_file in Path(docs_dir).glob('**/*.md'): with open(md_file, 'r', encoding='utf-8') as f: content = f.read() # Remove code blocks, inline code, URLs, HTML content = re.sub(r'```.*?```', '', content, flags=re.DOTALL) content = re.sub(r'`.*?`', '', content) content = re.sub(r'http[s]?://\\S+', '', content) content = re.sub(r'<.*?>', '', content, flags=re.DOTALL) # Split and count remaining words words = content.split() total_words += len(words) return total_words def count_microsims(docs_dir): \"\"\"Count MicroSims by looking for sketch.js files in the sims directory.\"\"\" sims_dir = Path(docs_dir) / 'sims' if not sims_dir.exists(): return 0 # Count directories in sims that contain sketch.js microsim_count = 0 for sim_dir in [d for d in sims_dir.iterdir() if d.is_dir()]: if (sim_dir / 'sketch.js').exists() or (sim_dir / 'index.js').exists(): microsim_count += 1 return microsim_count def count_glossary_terms(docs_dir): \"\"\"Count level 4 headers in glossary.md.\"\"\" glossary_path = Path(docs_dir) / 'glossary.md' if not glossary_path.exists(): return 0 with open(glossary_path, 'r', encoding='utf-8') as f: content = f.read() terms = re.findall(r'^####\\s+.*$', content, re.MULTILINE) return len(terms) def analyze_learning_graph(docs_dir): \"\"\"Analyze the learning graph complexity.\"\"\" graph_path = Path(docs_dir) / 'learning-graph.md' if not graph_path.exists(): return {\"nodes\": 0, \"edges\": 0} with open(graph_path, 'r', encoding='utf-8') as f: content = f.read() # Extract JavaScript node and edge definitions node_match = re.search(r'const\\s+nodes\\s*=\\s*\\[(.*?)\\];', content, re.DOTALL) edge_match = re.search(r'const\\s+edges\\s*=\\s*\\[(.*?)\\];', content, re.DOTALL) node_count = 0 edge_count = 0 if node_match: node_section = node_match.group(1) node_count = len(re.findall(r'\\{\\s*id:', node_section)) if edge_match: edge_section = edge_match.group(1) edge_count = len(re.findall(r'\\{\\s*from:', edge_section)) return {\"nodes\": node_count, \"edges\": edge_count} def main(): parser = argparse.ArgumentParser(description='Calculate metrics for an intelligent textbook repository.') parser.add_argument('repo_root', help='Root directory of the repository') parser.add_argument('--output', '-o', help='Output JSON file path') args = parser.parse_args() docs_dir = os.path.join(args.repo_root, 'docs') if not os.path.exists(docs_dir): print(f\"Error: docs directory not found at {docs_dir}\") return 1 # Calculate metrics metrics = { 'markdown-file-count': count_markdown_files(docs_dir), 'image-count': count_images(docs_dir), 'word-count': count_words_in_markdown(docs_dir), 'microsim-count': count_microsims(docs_dir), 'glossary-term-count': count_glossary_terms(docs_dir), 'learning-graph': analyze_learning_graph(docs_dir) } # Output results if args.output: with open(args.output, 'w', encoding='utf-8') as f: json.dump(metrics, indent=2, fp=f) else: print(json.dumps(metrics, indent=2)) if __name__ == \"__main__\": main() Conclusion Creating intelligent textbooks with MkDocs Material and MicroSims requires a thoughtful approach to structure, content, and interactivity. By following these best practices, you can create engaging educational resources that adapt to students' needs and provide interactive learning experiences. The key to success is maintaining a consistent structure, developing focused MicroSims that address specific learning objectives, and continually measuring the effectiveness of your content through metrics collection and analysis.","title":"Best Practices for Creating Intelligent Textbooks with MkDocs Material"},{"location":"concepts/best-practices/#best-practices-for-creating-intelligent-textbooks-with-mkdocs-material","text":"This guide outlines the best practices for creating engaging, interactive intelligent textbooks using the MkDocs Material system with MicroSims.","title":"Best Practices for Creating Intelligent Textbooks with MkDocs Material"},{"location":"concepts/best-practices/#repository-structure","text":"repository/ \u251c\u2500\u2500 docs/ # Content directory \u2502 \u251c\u2500\u2500 index.md # Home page \u2502 \u251c\u2500\u2500 about.md # About page \u2502 \u251c\u2500\u2500 img/ # Images directory \u2502 \u251c\u2500\u2500 css/ # Custom CSS \u2502 \u251c\u2500\u2500 js/ # Custom JavaScript \u2502 \u251c\u2500\u2500 sims/ # MicroSims directory \u2502 \u2502 \u251c\u2500\u2500 sim1/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md # MicroSim documentation \u2502 \u2502 \u2502 \u251c\u2500\u2500 sketch.js # p5.js code \u2502 \u2502 \u251c\u2500\u2500 sim2/ \u2502 \u2502 \u2514\u2500\u2500 index.md # MicroSims gallery page \u2502 \u251c\u2500\u2500 tutorial/ # Tutorial section \u2502 \u251c\u2500\u2500 glossary.md # Glossary of terms \u2502 \u2514\u2500\u2500 learning-graph.md # Learning graph visualization \u251c\u2500\u2500 mkdocs.yml # Configuration file \u2514\u2500\u2500 requirements.txt # Python dependencies","title":"Repository Structure"},{"location":"concepts/best-practices/#mkdocs-configuration-mkdocsyml","text":"site_name: Your Intelligent Textbook site_description: 'Description of your intelligent textbook' site_author: 'Your Name' repo_name: 'GitHub Repo' site_url: 'https://yourusername.github.io/your-repo/' repo_url: 'https://github.com/yourusername/your-repo' edit_uri: 'blob/master/docs' nav: - Home: index.md - About: about.md - Learning Paths: - Introduction: learning-paths/index.md - Path 1: learning-paths/path1.md - Tutorial: - Introduction: tutorial/index.md - Getting Started: tutorial/getting-started.md - MicroSims: - Gallery: sims/index.md - Simulation 1: sims/sim1/index.md - Glossary: glossary.md - Learning Graph: learning-graph.md theme: name: material logo: img/logo.png favicon: img/favicon.ico palette: primary: 'blue' accent: 'orange' features: - content.code.copy - navigation.expand - navigation.path - navigation.indexes - toc.follow - navigation.top - navigation.footer - content.action.edit plugins: - search - social markdown_extensions: - admonition - md_in_html - pymdownx.details - pymdownx.superfences - attr_list - pymdownx.highlight: linenums: true extra_css: - css/extra.css extra_javascript: - js/extra.js - https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js","title":"MkDocs Configuration (mkdocs.yml)"},{"location":"concepts/best-practices/#core-elements-of-an-intelligent-textbook","text":"","title":"Core Elements of an Intelligent Textbook"},{"location":"concepts/best-practices/#1-learning-graph","text":"A learning graph visualizes the relationships between concepts in your textbook, helping students understand prerequisites and learning paths. <div id=\"learning-graph\" style=\"width: 100%; height: 600px;\"></div> <script src=\"https://cdn.jsdelivr.net/npm/vis-network@9.1.2/dist/vis-network.min.js\"></script> <script> document.addEventListener('DOMContentLoaded', function() { // Nodes represent concepts const nodes = [ { id: 1, label: \"Concept 1\" }, { id: 2, label: \"Concept 2\" }, { id: 3, label: \"Concept 3\" } ]; // Edges represent relationships/prerequisites const edges = [ { from: 1, to: 2 }, { from: 1, to: 3 } ]; const container = document.getElementById('learning-graph'); const data = { nodes: nodes, edges: edges }; const options = { nodes: { shape: 'box', margin: 10, font: { size: 14 } }, edges: { arrows: 'to', smooth: true }, physics: { enabled: true, solver: 'forceAtlas2Based' } }; new vis.Network(container, data, options); }); </script>","title":"1. Learning Graph"},{"location":"concepts/best-practices/#2-interactive-admonitions","text":"Use MkDocs Material's admonitions for callouts, tips, and interactive elements. !!! note \"Key Concept\" This is an important concept to understand. !!! example \"Try it yourself\" Here's an example to work through on your own. !!! question \"Check Your Understanding\" What would happen if you changed the value of x? ??? tip \"Hint (click to reveal)\" Look at the relationship between x and y.","title":"2. Interactive Admonitions"},{"location":"concepts/best-practices/#3-microsim-integration","text":"MicroSims are small, interactive simulations that demonstrate concepts. Below is the standard structure for embedding a p5.js MicroSim: <div class=\"microsim-container\"> <div id=\"microsim-canvas\"></div> <div class=\"microsim-controls\"> <button id=\"start-btn\">Start</button> <button id=\"pause-btn\">Pause</button> <button id=\"reset-btn\">Reset</button> <div class=\"slider-container\"> <label for=\"speed-slider\">Speed:</label> <input type=\"range\" id=\"speed-slider\" min=\"1\" max=\"10\" value=\"5\"> </div> </div> </div> <script src=\"sketch.js\"></script>","title":"3. MicroSim Integration"},{"location":"concepts/best-practices/#4-embedded-quizzes","text":"Embed interactive quizzes to test comprehension. <div class=\"quiz-container\"> <div class=\"quiz-question\"> <p>What is the primary advantage of using MicroSims in education?</p> <form class=\"quiz-options\"> <div> <input type=\"radio\" id=\"opt1\" name=\"q1\" value=\"a\"> <label for=\"opt1\">They look visually appealing</label> </div> <div> <input type=\"radio\" id=\"opt2\" name=\"q1\" value=\"b\"> <label for=\"opt2\">They allow experiential learning through interaction</label> </div> <div> <input type=\"radio\" id=\"opt3\" name=\"q1\" value=\"c\"> <label for=\"opt3\">They're easy to create</label> </div> <div> <input type=\"radio\" id=\"opt4\" name=\"q1\" value=\"d\"> <label for=\"opt4\">They load faster than videos</label> </div> </form> <button class=\"quiz-check\">Check Answer</button> <div class=\"quiz-feedback\"></div> </div> </div> <script> document.querySelector('.quiz-check').addEventListener('click', function() { const selected = document.querySelector('input[name=\"q1\"]:checked'); const feedback = document.querySelector('.quiz-feedback'); if (selected) { if (selected.value === 'b') { feedback.innerHTML = 'Correct! MicroSims enable learning through hands-on interaction.'; feedback.style.color = 'green'; } else { feedback.innerHTML = 'Not quite. Try thinking about how students learn best.'; feedback.style.color = 'red'; } } else { feedback.innerHTML = 'Please select an answer.'; feedback.style.color = 'orange'; } }); </script>","title":"4. Embedded Quizzes"},{"location":"concepts/best-practices/#5-glossary-structure","text":"A well-structured glossary helps students quickly reference key terms. # Glossary #### Concept A A detailed explanation of Concept A with examples and related concepts. #### Concept B A detailed explanation of Concept B with examples and related concepts.","title":"5. Glossary Structure"},{"location":"concepts/best-practices/#best-practices-for-microsim-development","text":"Start with Learning Objectives : Define what you want students to learn before creating the MicroSim. Keep It Focused : Each MicroSim should focus on demonstrating a single concept or a closely related set of concepts. Consistent Interface : Use consistent controls and UI elements across all MicroSims. Responsive Design : Ensure MicroSims work on different screen sizes. Progressive Enhancement : Start with basic functionality, then add more complex features. Clear Instructions : Provide clear instructions on how to use the MicroSim. Meaningful Controls : Each control should have a clear purpose related to the concept being taught. Visual Feedback : Provide visual feedback when parameters are changed. Performance Optimization : Optimize for performance to ensure smooth operation. Accessibility : Make MicroSims accessible to users with disabilities.","title":"Best Practices for MicroSim Development"},{"location":"concepts/best-practices/#standard-microsim-template-sketchjs","text":"let simulation; function setup() { // Create canvas and add it to the microsim-canvas element const canvas = createCanvas(600, 400); canvas.parent('microsim-canvas'); // Initialize the simulation simulation = new Simulation(); // Set up UI controls setupControls(); // Start in paused state noLoop(); } function draw() { background(240); simulation.update(); simulation.display(); } // Simulation class to encapsulate logic class Simulation { constructor() { this.parameters = { speed: 5, // Add other parameters here }; this.isRunning = false; // Initialize simulation elements this.elements = []; } update() { if (this.isRunning) { // Update simulation state based on parameters } } display() { // Display simulation elements } reset() { // Reset simulation to initial state } setParameter(name, value) { this.parameters[name] = value; } start() { this.isRunning = true; } pause() { this.isRunning = false; } } // Set up event listeners for controls function setupControls() { // Start button document.getElementById('start-btn').addEventListener('click', function() { simulation.start(); loop(); }); // Pause button document.getElementById('pause-btn').addEventListener('click', function() { simulation.pause(); noLoop(); }); // Reset button document.getElementById('reset-btn').addEventListener('click', function() { simulation.reset(); redraw(); }); // Speed slider document.getElementById('speed-slider').addEventListener('input', function() { simulation.setParameter('speed', parseInt(this.value)); }); }","title":"Standard MicroSim Template (sketch.js)"},{"location":"concepts/best-practices/#metrics-for-measuring-textbook-quality","text":"Content Metrics : Number of markdown files Total word count Number of images Number of MicroSims Glossary term count Engagement Metrics : Page views per section Average time spent on each page MicroSim interaction rate Quiz completion rate Quiz success rate Learning Graph Metrics : Coverage of concepts Connectedness of concepts Learning path completeness","title":"Metrics for Measuring Textbook Quality"},{"location":"concepts/best-practices/#automating-metrics-collection","text":"Create a Python script to analyze repository metrics (similar to your get-metrics-json.py): #!/usr/bin/env python3 import os import re from pathlib import Path import argparse import json def count_markdown_files(docs_dir): \"\"\"Count total number of markdown files in the docs directory.\"\"\" return len(list(Path(docs_dir).glob('**/*.md'))) def count_images(docs_dir): \"\"\"Count total number of image files in the docs directory.\"\"\" extensions = ['*.png', '*.jpg', '*.jpeg', '*.gif', '*.svg'] count = 0 for ext in extensions: count += len(list(Path(docs_dir).glob(f'**/{ext}'))) return count def count_words_in_markdown(docs_dir): \"\"\"Count total number of words in all markdown files.\"\"\" total_words = 0 for md_file in Path(docs_dir).glob('**/*.md'): with open(md_file, 'r', encoding='utf-8') as f: content = f.read() # Remove code blocks, inline code, URLs, HTML content = re.sub(r'```.*?```', '', content, flags=re.DOTALL) content = re.sub(r'`.*?`', '', content) content = re.sub(r'http[s]?://\\S+', '', content) content = re.sub(r'<.*?>', '', content, flags=re.DOTALL) # Split and count remaining words words = content.split() total_words += len(words) return total_words def count_microsims(docs_dir): \"\"\"Count MicroSims by looking for sketch.js files in the sims directory.\"\"\" sims_dir = Path(docs_dir) / 'sims' if not sims_dir.exists(): return 0 # Count directories in sims that contain sketch.js microsim_count = 0 for sim_dir in [d for d in sims_dir.iterdir() if d.is_dir()]: if (sim_dir / 'sketch.js').exists() or (sim_dir / 'index.js').exists(): microsim_count += 1 return microsim_count def count_glossary_terms(docs_dir): \"\"\"Count level 4 headers in glossary.md.\"\"\" glossary_path = Path(docs_dir) / 'glossary.md' if not glossary_path.exists(): return 0 with open(glossary_path, 'r', encoding='utf-8') as f: content = f.read() terms = re.findall(r'^####\\s+.*$', content, re.MULTILINE) return len(terms) def analyze_learning_graph(docs_dir): \"\"\"Analyze the learning graph complexity.\"\"\" graph_path = Path(docs_dir) / 'learning-graph.md' if not graph_path.exists(): return {\"nodes\": 0, \"edges\": 0} with open(graph_path, 'r', encoding='utf-8') as f: content = f.read() # Extract JavaScript node and edge definitions node_match = re.search(r'const\\s+nodes\\s*=\\s*\\[(.*?)\\];', content, re.DOTALL) edge_match = re.search(r'const\\s+edges\\s*=\\s*\\[(.*?)\\];', content, re.DOTALL) node_count = 0 edge_count = 0 if node_match: node_section = node_match.group(1) node_count = len(re.findall(r'\\{\\s*id:', node_section)) if edge_match: edge_section = edge_match.group(1) edge_count = len(re.findall(r'\\{\\s*from:', edge_section)) return {\"nodes\": node_count, \"edges\": edge_count} def main(): parser = argparse.ArgumentParser(description='Calculate metrics for an intelligent textbook repository.') parser.add_argument('repo_root', help='Root directory of the repository') parser.add_argument('--output', '-o', help='Output JSON file path') args = parser.parse_args() docs_dir = os.path.join(args.repo_root, 'docs') if not os.path.exists(docs_dir): print(f\"Error: docs directory not found at {docs_dir}\") return 1 # Calculate metrics metrics = { 'markdown-file-count': count_markdown_files(docs_dir), 'image-count': count_images(docs_dir), 'word-count': count_words_in_markdown(docs_dir), 'microsim-count': count_microsims(docs_dir), 'glossary-term-count': count_glossary_terms(docs_dir), 'learning-graph': analyze_learning_graph(docs_dir) } # Output results if args.output: with open(args.output, 'w', encoding='utf-8') as f: json.dump(metrics, indent=2, fp=f) else: print(json.dumps(metrics, indent=2)) if __name__ == \"__main__\": main()","title":"Automating Metrics Collection"},{"location":"concepts/best-practices/#conclusion","text":"Creating intelligent textbooks with MkDocs Material and MicroSims requires a thoughtful approach to structure, content, and interactivity. By following these best practices, you can create engaging educational resources that adapt to students' needs and provide interactive learning experiences. The key to success is maintaining a consistent structure, developing focused MicroSims that address specific learning objectives, and continually measuring the effectiveness of your content through metrics collection and analysis.","title":"Conclusion"},{"location":"concepts/bloom-taxonomy/","text":"Bloom Taxonomy Introduction In education and course learning objective design, Bloom's Taxonomy can be useful in organizing course concepts to achieve specific goals. Bloom's Taxonomy helps us order concepts clearly. It teaches the importance of memorization of knowledge first and then later that knowledge to solve problems. The figure above is a triangle that shows how the lower elements of the triangle should be taught before the higher elements. Bloom's Taxonomy is a framework for categorizing educational goals, developed by Benjamin Bloom and collaborators in 1956 and revised in 2001 to place creation of new artifacts at the top of a pyramid structure. It is widely used in designing learning objectives, assessments, and instructional strategies to promote higher-order thinking. The taxonomy divides learning into multiple levels. Domain 1: Cognitive Domain (Knowledge-based) This is the most widely used part of the taxonomy, focusing on mental skills and knowledge acquisition. It is often represented as a pyramid with six levels of complexity, moving from basic knowledge to higher-order thinking: Remembering : Recalling facts and basic concepts (e.g., define, list, memorize) Understanding : Explaining ideas or concepts (e.g., describe, explain, summarize) Applying : Using information in new situations (e.g., solve, demonstrate, apply) Analyzing : Breaking information into parts to explore relationships (e.g., compare, contrast, categorize) Evaluating : Making judgments based on criteria (e.g., justify, critique, assess) Creating : Putting elements together to form new ideas or products (e.g., design, construct, develop) Domain 2: Affective Domain (Attitude-based) This focuses on feelings, emotions, and attitudes, covering how learners internalize and reflect on values. Receiving : Awareness and willingness to hear Responding : Active participation through reacting or responding Valuing : Recognizing the worth of something Organizing : Integrating values into one's life Characterizing : Acting consistently with a value system Domain 3: Psychomotor Domain (Skill-based) This domain involves physical movement, coordination, and the use of motor skills. While less emphasized in Bloom's original taxonomy, it is important in disciplines that require hands-on tasks. Perception : Using sensory cues to guide actions Set : Readiness to act Guided Response : Early stages of learning skills Mechanism : Proficiency in performing skills Complex Overt Response : Advanced performance of skills Adaptation : Modifying skills to meet new demands Origination : Creating new artifacts from patterns Purpose Bloom's Taxonomy helps educators design curriculum and assessments that target not just the memorization of facts, but also the development of critical thinking and problem-solving abilities. By moving students through progressively more complex levels of thinking, it ensures a comprehensive approach to learning that includes both foundational knowledge and higher-order thinking skills. Using Bloom's Taxonomy To Create Learning Graphs Bloom's Taxonomy can be a valuable tool in creating a concept dependency graph for courses by organizing the progression of learning objectives in a structured way. A concept dependency graph visualizes how different topics or skills in a course build on each other, guiding the instructional design toward achieving higher levels of learning. Here's how Bloom's Taxonomy can be used in creating such a graph: Establish Foundational Concepts Using Lower Levels of Bloom's Taxonomy Cognitive Levels: Remembering and Understanding The base of the graph should start with concepts that involve recalling basic facts and understanding fundamental principles . These concepts form the foundation of the course, as students need to acquire knowledge before they can progress to higher-order thinking. Example : In a circuits course, students must first remember Ohm's Law and understand basic components like resistors and capacitors. Graph Node: \"Ohm's Law (Remember)\" Graph Node: \"Basic Components (Understand)\" Arrows : Indicate that subsequent concepts depend on these foundational ideas. Link Concepts with Intermediate Cognitive Levels Cognitive Levels: Applying and Analyzing Once students have the foundation, the graph should show applying knowledge to new situations and analyzing relationships between concepts. This phase introduces the dependency of practical tasks and critical thinking. Example : Applying Ohm's Law in circuit analysis and analyzing how changing a resistor affects the overall circuit. Graph Node: \"Apply Ohm's Law to Circuits (Apply)\" Graph Node: \"Analyze Circuit Behavior (Analyze)\" Arrows : Indicate that students cannot analyze circuits without first applying the knowledge of Ohm's Law. Introduce Advanced Concepts Using Higher Levels Cognitive Levels: Evaluating and Creating The top levels of Bloom's Taxonomy, evaluating and creating , should come later in the graph. These concepts rely heavily on mastery of earlier stages and involve judging , designing , or constructing new knowledge or solutions. This is where students synthesize their learning into creative or evaluative tasks. Example : Designing a complete circuit based on given requirements or evaluating the efficiency of different circuit designs. Graph Node: \"Evaluate Circuit Designs (Evaluate)\" Graph Node: \"Create a New Circuit (Create)\" Arrows : Show the dependency on earlier stages of analysis and application. Visual Structure: Layering the Concepts Left-to-Right Progression In the concept dependency graph, start with foundational concepts on the left (Remembering, Understanding), and place more advanced concepts on the right (Applying, Analyzing, Evaluating, Creating). This progression aligns with Bloom's Taxonomy and clearly shows how mastery at one level enables the next. Foundational concepts (Remember, Understand) -> Intermediate concepts (Apply, Analyze) -> Advanced concepts (Evaluate, Create). Arrows and Dependencies Use arrows to indicate dependencies, showing that students must master simpler concepts before moving on to more complex ones. This makes the learning path explicit and encourages scaffolding in teaching methods. Supporting Affective and Psychomotor Domains For courses where emotional engagement (Affective Domain) or hands-on skills (Psychomotor Domain) are important, Bloom's Taxonomy can also be used to create a second set of dependencies showing how students develop attitudes or skills over time. For example, psychomotor skills may start with simple tasks (guided response) and advance to complex projects (adaptation, origination). Example of a Concept Dependency Graph Using Bloom's Taxonomy Remember : Identify basic circuit elements (resistor, capacitor). Dependencies: None Understand : Explain how Ohm's Law works in a simple circuit. Dependency: Remember basic elements Apply : Calculate voltage, current, and resistance in a circuit. Dependency: Understand Ohm's Law Analyze : Compare different circuit designs and their behaviors. Dependency: Apply Ohm's Law in calculations Evaluate : Assess the efficiency of different circuits. Dependency: Analyze circuit designs Create : Design a complete circuit to meet specific requirements. Dependency: Evaluate circuit options and efficiency Benefits of Using Bloom's Taxonomy in Concept Dependency Graphs Clear Learning Path : It shows a clear path from basic to advanced learning, ensuring students build their understanding progressively. Targeted Instruction : Instructors can design lessons and activities to align with specific cognitive levels, making it easier to address gaps. Tailored Assessment : The taxonomy helps structure assessments to evaluate students at different cognitive levels, from simple recall to complex synthesis. Holistic Learning : Combining all three domains (cognitive, affective, and psychomotor) ensures a balanced learning experience. By using Bloom's Taxonomy in concept dependency graphs, you can effectively map out not only the sequence of topics but also the increasing complexity and depth of student learning throughout the course. References Image Reference Image Reference CITT University of Florida","title":"Bloom Taxonomy"},{"location":"concepts/bloom-taxonomy/#bloom-taxonomy","text":"","title":"Bloom Taxonomy"},{"location":"concepts/bloom-taxonomy/#introduction","text":"In education and course learning objective design, Bloom's Taxonomy can be useful in organizing course concepts to achieve specific goals. Bloom's Taxonomy helps us order concepts clearly. It teaches the importance of memorization of knowledge first and then later that knowledge to solve problems. The figure above is a triangle that shows how the lower elements of the triangle should be taught before the higher elements. Bloom's Taxonomy is a framework for categorizing educational goals, developed by Benjamin Bloom and collaborators in 1956 and revised in 2001 to place creation of new artifacts at the top of a pyramid structure. It is widely used in designing learning objectives, assessments, and instructional strategies to promote higher-order thinking. The taxonomy divides learning into multiple levels.","title":"Introduction"},{"location":"concepts/bloom-taxonomy/#domain-1-cognitive-domain-knowledge-based","text":"This is the most widely used part of the taxonomy, focusing on mental skills and knowledge acquisition. It is often represented as a pyramid with six levels of complexity, moving from basic knowledge to higher-order thinking: Remembering : Recalling facts and basic concepts (e.g., define, list, memorize) Understanding : Explaining ideas or concepts (e.g., describe, explain, summarize) Applying : Using information in new situations (e.g., solve, demonstrate, apply) Analyzing : Breaking information into parts to explore relationships (e.g., compare, contrast, categorize) Evaluating : Making judgments based on criteria (e.g., justify, critique, assess) Creating : Putting elements together to form new ideas or products (e.g., design, construct, develop)","title":"Domain 1: Cognitive Domain (Knowledge-based)"},{"location":"concepts/bloom-taxonomy/#domain-2-affective-domain-attitude-based","text":"This focuses on feelings, emotions, and attitudes, covering how learners internalize and reflect on values. Receiving : Awareness and willingness to hear Responding : Active participation through reacting or responding Valuing : Recognizing the worth of something Organizing : Integrating values into one's life Characterizing : Acting consistently with a value system","title":"Domain 2: Affective Domain (Attitude-based)"},{"location":"concepts/bloom-taxonomy/#domain-3-psychomotor-domain-skill-based","text":"This domain involves physical movement, coordination, and the use of motor skills. While less emphasized in Bloom's original taxonomy, it is important in disciplines that require hands-on tasks. Perception : Using sensory cues to guide actions Set : Readiness to act Guided Response : Early stages of learning skills Mechanism : Proficiency in performing skills Complex Overt Response : Advanced performance of skills Adaptation : Modifying skills to meet new demands Origination : Creating new artifacts from patterns","title":"Domain 3: Psychomotor Domain (Skill-based)"},{"location":"concepts/bloom-taxonomy/#purpose","text":"Bloom's Taxonomy helps educators design curriculum and assessments that target not just the memorization of facts, but also the development of critical thinking and problem-solving abilities. By moving students through progressively more complex levels of thinking, it ensures a comprehensive approach to learning that includes both foundational knowledge and higher-order thinking skills.","title":"Purpose"},{"location":"concepts/bloom-taxonomy/#using-blooms-taxonomy-to-create-learning-graphs","text":"Bloom's Taxonomy can be a valuable tool in creating a concept dependency graph for courses by organizing the progression of learning objectives in a structured way. A concept dependency graph visualizes how different topics or skills in a course build on each other, guiding the instructional design toward achieving higher levels of learning. Here's how Bloom's Taxonomy can be used in creating such a graph:","title":"Using Bloom's Taxonomy To Create Learning Graphs"},{"location":"concepts/bloom-taxonomy/#establish-foundational-concepts-using-lower-levels-of-blooms-taxonomy","text":"Cognitive Levels: Remembering and Understanding The base of the graph should start with concepts that involve recalling basic facts and understanding fundamental principles . These concepts form the foundation of the course, as students need to acquire knowledge before they can progress to higher-order thinking. Example : In a circuits course, students must first remember Ohm's Law and understand basic components like resistors and capacitors. Graph Node: \"Ohm's Law (Remember)\" Graph Node: \"Basic Components (Understand)\" Arrows : Indicate that subsequent concepts depend on these foundational ideas.","title":"Establish Foundational Concepts Using Lower Levels of Bloom's Taxonomy"},{"location":"concepts/bloom-taxonomy/#link-concepts-with-intermediate-cognitive-levels","text":"Cognitive Levels: Applying and Analyzing Once students have the foundation, the graph should show applying knowledge to new situations and analyzing relationships between concepts. This phase introduces the dependency of practical tasks and critical thinking. Example : Applying Ohm's Law in circuit analysis and analyzing how changing a resistor affects the overall circuit. Graph Node: \"Apply Ohm's Law to Circuits (Apply)\" Graph Node: \"Analyze Circuit Behavior (Analyze)\" Arrows : Indicate that students cannot analyze circuits without first applying the knowledge of Ohm's Law.","title":"Link Concepts with Intermediate Cognitive Levels"},{"location":"concepts/bloom-taxonomy/#introduce-advanced-concepts-using-higher-levels","text":"Cognitive Levels: Evaluating and Creating The top levels of Bloom's Taxonomy, evaluating and creating , should come later in the graph. These concepts rely heavily on mastery of earlier stages and involve judging , designing , or constructing new knowledge or solutions. This is where students synthesize their learning into creative or evaluative tasks. Example : Designing a complete circuit based on given requirements or evaluating the efficiency of different circuit designs. Graph Node: \"Evaluate Circuit Designs (Evaluate)\" Graph Node: \"Create a New Circuit (Create)\" Arrows : Show the dependency on earlier stages of analysis and application.","title":"Introduce Advanced Concepts Using Higher Levels"},{"location":"concepts/bloom-taxonomy/#visual-structure-layering-the-concepts","text":"Left-to-Right Progression In the concept dependency graph, start with foundational concepts on the left (Remembering, Understanding), and place more advanced concepts on the right (Applying, Analyzing, Evaluating, Creating). This progression aligns with Bloom's Taxonomy and clearly shows how mastery at one level enables the next. Foundational concepts (Remember, Understand) -> Intermediate concepts (Apply, Analyze) -> Advanced concepts (Evaluate, Create). Arrows and Dependencies Use arrows to indicate dependencies, showing that students must master simpler concepts before moving on to more complex ones. This makes the learning path explicit and encourages scaffolding in teaching methods.","title":"Visual Structure: Layering the Concepts"},{"location":"concepts/bloom-taxonomy/#supporting-affective-and-psychomotor-domains","text":"For courses where emotional engagement (Affective Domain) or hands-on skills (Psychomotor Domain) are important, Bloom's Taxonomy can also be used to create a second set of dependencies showing how students develop attitudes or skills over time. For example, psychomotor skills may start with simple tasks (guided response) and advance to complex projects (adaptation, origination).","title":"Supporting Affective and Psychomotor Domains"},{"location":"concepts/bloom-taxonomy/#example-of-a-concept-dependency-graph-using-blooms-taxonomy","text":"Remember : Identify basic circuit elements (resistor, capacitor). Dependencies: None Understand : Explain how Ohm's Law works in a simple circuit. Dependency: Remember basic elements Apply : Calculate voltage, current, and resistance in a circuit. Dependency: Understand Ohm's Law Analyze : Compare different circuit designs and their behaviors. Dependency: Apply Ohm's Law in calculations Evaluate : Assess the efficiency of different circuits. Dependency: Analyze circuit designs Create : Design a complete circuit to meet specific requirements. Dependency: Evaluate circuit options and efficiency","title":"Example of a Concept Dependency Graph Using Bloom's Taxonomy"},{"location":"concepts/bloom-taxonomy/#benefits-of-using-blooms-taxonomy-in-concept-dependency-graphs","text":"Clear Learning Path : It shows a clear path from basic to advanced learning, ensuring students build their understanding progressively. Targeted Instruction : Instructors can design lessons and activities to align with specific cognitive levels, making it easier to address gaps. Tailored Assessment : The taxonomy helps structure assessments to evaluate students at different cognitive levels, from simple recall to complex synthesis. Holistic Learning : Combining all three domains (cognitive, affective, and psychomotor) ensures a balanced learning experience. By using Bloom's Taxonomy in concept dependency graphs, you can effectively map out not only the sequence of topics but also the increasing complexity and depth of student learning throughout the course.","title":"Benefits of Using Bloom's Taxonomy in Concept Dependency Graphs"},{"location":"concepts/bloom-taxonomy/#references","text":"","title":"References"},{"location":"concepts/bloom-taxonomy/#image-reference","text":"Image Reference CITT University of Florida","title":"Image Reference"},{"location":"concepts/css-tips/","text":"CSS Tips Here are some CSS that you can add to your `docs/css/extra.css' file Logo Here is some CSS to adjust the size of the logo in the upper left corner of the page .md-header__button.md-logo { margin: 0; padding: 0; } .md-header__button.md-logo img, .md-header__button.md-logo svg { height: 70px; width: 70px; } ## iFrame Our textbooks put a blue line around iFrames so the user knows they they are interactive contetn. /* Container to control the iframe size and scaling */ .iframe-container { width: 100%; position: relative; overflow: hidden; } /* Iframe styles */ iframe { width: 100%; border: solid 2px blue; } /* if a div with <div class=\"upper-alpha\"> wraps a list, then number A.B.C.D etc */ /* this requires that the markdown extension md_in_html is enabled in the mkdocs.yml file */ .upper-alpha ol { list-style-type: upper-alpha; } /* Styling for the Copy Button */ .admonition.prompt { position: relative; } .admonition.prompt .copy-button { position: absolute; top: 4px; right: 6px; background-color: #0056d6; color: white; border: none; border-radius: 5px; padding: 0.3rem 0.3rem; cursor: pointer; font-size: 0.7rem; } .admonition.prompt .copy-button:hover { background-color: #0041a4; /* Darker blue on hover */ }","title":"CSS Tips"},{"location":"concepts/css-tips/#css-tips","text":"Here are some CSS that you can add to your `docs/css/extra.css' file","title":"CSS Tips"},{"location":"concepts/css-tips/#logo","text":"Here is some CSS to adjust the size of the logo in the upper left corner of the page .md-header__button.md-logo { margin: 0; padding: 0; } .md-header__button.md-logo img, .md-header__button.md-logo svg { height: 70px; width: 70px; } ## iFrame Our textbooks put a blue line around iFrames so the user knows they they are interactive contetn. /* Container to control the iframe size and scaling */ .iframe-container { width: 100%; position: relative; overflow: hidden; } /* Iframe styles */ iframe { width: 100%; border: solid 2px blue; } /* if a div with <div class=\"upper-alpha\"> wraps a list, then number A.B.C.D etc */ /* this requires that the markdown extension md_in_html is enabled in the mkdocs.yml file */ .upper-alpha ol { list-style-type: upper-alpha; } /* Styling for the Copy Button */ .admonition.prompt { position: relative; } .admonition.prompt .copy-button { position: absolute; top: 4px; right: 6px; background-color: #0056d6; color: white; border: none; border-radius: 5px; padding: 0.3rem 0.3rem; cursor: pointer; font-size: 0.7rem; } .admonition.prompt .copy-button:hover { background-color: #0041a4; /* Darker blue on hover */ }","title":"Logo"},{"location":"concepts/five-levels-of-intelligent-textbooks/","text":"The Five Levels of Intelligent Textbooks Introduction to Intelligent Textbook Classification The concept of \"intelligent textbooks\" has evolved significantly with advancements in technology and educational theory. However, understanding the varying degrees of sophistication in these resources requires a clear classification system. This chapter presents a five-level framework for intelligent textbooks, inspired by the established levels of autonomous driving. This classification helps learning organizations strategize their approach to developing and implementing intelligent textbooks based on their capabilities, resources, and educational goals. All models are wrong, but some are useful. \u2014 George Box This framework isn't meant to be rigid but rather serves as a guide to understand the progression of textbook intelligence and functionality. Organizations may find themselves implementing features across different levels or even bypassing certain levels as technology and pedagogical approaches evolve. Learning Graphs: The Foundation of Intelligent Textbooks Before exploring the five levels, it's essential to understand the concept of learning graphs, which form the backbone of truly intelligent educational resources. What Are Learning Graphs? Learning graphs are concept dependency graphs that help guide intelligent agents in building customized learning paths for each student. These graphs map out concepts within a subject and their prerequisites, enabling navigation through educational content in a structured, personalized manner. With the advent of advanced AI models, generating comprehensive learning graphs has become increasingly efficient. These structured representations of knowledge domains are crucial because: Representation is the hardest part of AI. \u2014 Jeff Hawkins Learning graphs serve as the foundation upon which higher levels of textbook intelligence are built, particularly for adaptive and autonomous systems. The Five-Level Framework Level 1 \u2014 Static Textbooks Definition : Static textbooks are traditional printed or digital formats with no interactive elements. Key Characteristics : - Composed purely of text and static images - Linear progression through material - No digital interactivity or personalization - Fixed content that doesn't adapt to the learner Current Status : Over 90% of textbooks used by college students today remain at Level 1. Use Cases : Simple, short content delivery where interaction isn't necessary or where technology access is limited. Level 2 \u2014 Interactive Content Textbooks Definition : Interactive textbooks incorporate digital elements that engage the reader beyond passive consumption. Key Characteristics : - Keyword search functionality - Internal/external hyperlinks (e.g., to Wikipedia) - Embedded videos and multimedia content - Simple self-assessment quizzes - AI-generated MicroSims for concept visualization - Detailed glossary with in-text linking - Compatibility with social sharing (rich previews) - Usage analytics capabilities Implementation Tools : - Documentation platforms like mkdocs-material - Development environments such as VS Code - JavaScript libraries for interactive simulations Advantages : - Cost-effective enhancement of learning experiences - Facilitates distributed learning through shareable components - Improves engagement with multimedia elements - Supports basic self-assessment Level 3 \u2014 Adaptive Textbooks Definition : Adaptive textbooks dynamically adjust content based on user input, performance, and behavior. Key Characteristics : - Personalized learning pathways through deterministic rules - Concept graph traversal algorithms for content sequencing - Selection of material based on assessment performance - Time-based rules for content review and reinforcement - Continuous recording of concept mastery on personal learning graphs Technical Requirements : - Robust data management systems - Graph algorithms and traversal mechanisms - Vector stores and graph embeddings for content representation Considerations : - Privacy concerns with tracking individual performance - Regulatory compliance (GDPR, FERPA) - Significant investment in security and auditing - Ethical implications of personalization Level 4 \u2014 Textbooks with Chatbots Definition : Level 4 textbooks integrate intelligent conversational interfaces to provide real-time assistance and personalization. Key Characteristics : Integration of Large Language Models (LLMs) as tutoring assistants GraphRAG architecture combining multiple AI technologies Real-time feedback on student questions Content recommendations based on progress and interactions Comprehensive logging of student-AI interactions Technical Architecture : NLP pipelines for query understanding LLMs for response generation Embeddings and vector stores for efficient retrieval Learning graphs as \"ground truth\" for factual accuracy Implementation Strategies : - Balance between large, powerful LLMs and cost-effective smaller models - Consideration of locally-run models (e.g., Ollama) for privacy and efficiency - Careful design of logging mechanisms for performance tracking Level 5 \u2014 Autonomous AI Textbooks Definition : The aspirational level where AI-driven systems fully understand individual learner needs and autonomously generate personalized learning experiences. Key Characteristics : - Deep understanding of individual student knowledge and goals - Real-time generation of customized lessons through natural language - Complete adaptability to learning styles and preferences - Autonomous decision-making about learning progression - Human-like tutoring capabilities with comprehensive support Future Requirements : - Advanced hardware optimized for graph operations - More reliable and accurate LLMs - Sophisticated privacy-preserving technologies - Standardized frameworks for intelligent textbook interoperability Current Status : \"Level 5 textbooks are like cars that drive themselves under all conditions: during a heavy snowstorm at night on roads under heavy construction\u2014in other words, not happening in the near term.\" Implementation Strategies and Considerations Flexible Implementation Organizations don't necessarily need to progress sequentially through all five levels. Depending on specific needs and available technologies, it may be advantageous to: Skip certain levels entirely Implement features from multiple levels simultaneously Focus on particular aspects that deliver the most educational value For example, moving directly from Level 2 (interactive) to leveraging LLMs (as in Level 4) for generating responses to student queries might bypass some regulatory challenges associated with storing personal learning data in Level 3 implementations. Key Considerations for Implementation When developing intelligent textbooks at any level, consider: Educational Goals : What are the primary learning objectives? Technical Resources : What technologies and expertise are available? User Context : What is the technological proficiency of target learners? Regulatory Environment : What legal and ethical constraints apply? Scalability : How will the solution grow with increasing users? Maintenance : What ongoing support will be required? Measuring Success Success metrics for intelligent textbooks should include: Learning outcomes and knowledge retention Student engagement and satisfaction Time efficiency in achieving learning objectives Accessibility across diverse learner populations Cost-effectiveness compared to traditional methods The Future of Intelligent Textbooks As technologies continue to evolve, we can expect: Increasingly sophisticated learning graph generation More seamless integration of multiple modalities (text, video, simulations) Better standardization for exchanging intelligent textbook content Enhanced personalization with improved privacy safeguards Greater adoption of MicroSims and interactive elements The ultimate vision is to provide equal learning opportunities for all students globally through advanced, accessible intelligent textbooks that adapt to individual needs while maintaining high educational standards. \"Never mistake a clear view for a short distance.\" \u2014 Paul Saffo Summary The five-level framework for intelligent textbooks provides a structured approach to understanding and implementing increasingly sophisticated educational resources: Level 1 : Static textbooks with fixed content Level 2 : Interactive textbooks with basic digital enhancements Level 3 : Adaptive textbooks that personalize learning paths Level 4 : Textbooks with integrated AI chatbots for assistance Level 5 : Fully autonomous AI textbooks that function as comprehensive tutors Learning graphs serve as the foundation for higher-level implementations, enabling structured representation of knowledge domains and prerequisites. While the full realization of Level 5 remains a future goal, significant advancements in Levels 2-4 are already transforming educational experiences for learners worldwide. Review Questions Compare and contrast Level 2 and Level 3 intelligent textbooks. What key features differentiate them? How do learning graphs contribute to the functionality of adaptive textbooks? What privacy and ethical considerations emerge as textbooks become more intelligent? Explain the GraphRAG architecture used in Level 4 textbooks. How does it enhance the learning experience? Why might an organization choose to implement features from multiple levels rather than progressing sequentially through the framework? Practical Exercise Design a learning graph for a topic in your field of expertise. Identify: Core concepts that must be understood Prerequisites for each concept Relationships between different concepts Potential assessment points to measure understanding Use this learning graph to sketch how a Level 3 adaptive textbook might guide different learners through the material based on their prior knowledge and progress. Generative AI Project Use a generative tool such as Anthropic Claude or OpenAI ChatGPT to ask it to list the 100 core concepts in a course description you give it. - ask it to build a learning dependency graph of these concepts create a graph viewer using vis.js for a given end goal, ask it to build a learning path that include all the dependent concepts you don't already know","title":"The Five Levels of Intelligent Textbooks"},{"location":"concepts/five-levels-of-intelligent-textbooks/#the-five-levels-of-intelligent-textbooks","text":"","title":"The Five Levels of Intelligent Textbooks"},{"location":"concepts/five-levels-of-intelligent-textbooks/#introduction-to-intelligent-textbook-classification","text":"The concept of \"intelligent textbooks\" has evolved significantly with advancements in technology and educational theory. However, understanding the varying degrees of sophistication in these resources requires a clear classification system. This chapter presents a five-level framework for intelligent textbooks, inspired by the established levels of autonomous driving. This classification helps learning organizations strategize their approach to developing and implementing intelligent textbooks based on their capabilities, resources, and educational goals. All models are wrong, but some are useful. \u2014 George Box This framework isn't meant to be rigid but rather serves as a guide to understand the progression of textbook intelligence and functionality. Organizations may find themselves implementing features across different levels or even bypassing certain levels as technology and pedagogical approaches evolve.","title":"Introduction to Intelligent Textbook Classification"},{"location":"concepts/five-levels-of-intelligent-textbooks/#learning-graphs-the-foundation-of-intelligent-textbooks","text":"Before exploring the five levels, it's essential to understand the concept of learning graphs, which form the backbone of truly intelligent educational resources.","title":"Learning Graphs: The Foundation of Intelligent Textbooks"},{"location":"concepts/five-levels-of-intelligent-textbooks/#what-are-learning-graphs","text":"Learning graphs are concept dependency graphs that help guide intelligent agents in building customized learning paths for each student. These graphs map out concepts within a subject and their prerequisites, enabling navigation through educational content in a structured, personalized manner. With the advent of advanced AI models, generating comprehensive learning graphs has become increasingly efficient. These structured representations of knowledge domains are crucial because: Representation is the hardest part of AI. \u2014 Jeff Hawkins Learning graphs serve as the foundation upon which higher levels of textbook intelligence are built, particularly for adaptive and autonomous systems.","title":"What Are Learning Graphs?"},{"location":"concepts/five-levels-of-intelligent-textbooks/#the-five-level-framework","text":"","title":"The Five-Level Framework"},{"location":"concepts/five-levels-of-intelligent-textbooks/#level-1-static-textbooks","text":"Definition : Static textbooks are traditional printed or digital formats with no interactive elements. Key Characteristics : - Composed purely of text and static images - Linear progression through material - No digital interactivity or personalization - Fixed content that doesn't adapt to the learner Current Status : Over 90% of textbooks used by college students today remain at Level 1. Use Cases : Simple, short content delivery where interaction isn't necessary or where technology access is limited.","title":"Level 1 \u2014 Static Textbooks"},{"location":"concepts/five-levels-of-intelligent-textbooks/#level-2-interactive-content-textbooks","text":"Definition : Interactive textbooks incorporate digital elements that engage the reader beyond passive consumption. Key Characteristics : - Keyword search functionality - Internal/external hyperlinks (e.g., to Wikipedia) - Embedded videos and multimedia content - Simple self-assessment quizzes - AI-generated MicroSims for concept visualization - Detailed glossary with in-text linking - Compatibility with social sharing (rich previews) - Usage analytics capabilities Implementation Tools : - Documentation platforms like mkdocs-material - Development environments such as VS Code - JavaScript libraries for interactive simulations Advantages : - Cost-effective enhancement of learning experiences - Facilitates distributed learning through shareable components - Improves engagement with multimedia elements - Supports basic self-assessment","title":"Level 2 \u2014 Interactive Content Textbooks"},{"location":"concepts/five-levels-of-intelligent-textbooks/#level-3-adaptive-textbooks","text":"Definition : Adaptive textbooks dynamically adjust content based on user input, performance, and behavior. Key Characteristics : - Personalized learning pathways through deterministic rules - Concept graph traversal algorithms for content sequencing - Selection of material based on assessment performance - Time-based rules for content review and reinforcement - Continuous recording of concept mastery on personal learning graphs Technical Requirements : - Robust data management systems - Graph algorithms and traversal mechanisms - Vector stores and graph embeddings for content representation Considerations : - Privacy concerns with tracking individual performance - Regulatory compliance (GDPR, FERPA) - Significant investment in security and auditing - Ethical implications of personalization","title":"Level 3 \u2014 Adaptive Textbooks"},{"location":"concepts/five-levels-of-intelligent-textbooks/#level-4-textbooks-with-chatbots","text":"Definition : Level 4 textbooks integrate intelligent conversational interfaces to provide real-time assistance and personalization. Key Characteristics : Integration of Large Language Models (LLMs) as tutoring assistants GraphRAG architecture combining multiple AI technologies Real-time feedback on student questions Content recommendations based on progress and interactions Comprehensive logging of student-AI interactions Technical Architecture : NLP pipelines for query understanding LLMs for response generation Embeddings and vector stores for efficient retrieval Learning graphs as \"ground truth\" for factual accuracy Implementation Strategies : - Balance between large, powerful LLMs and cost-effective smaller models - Consideration of locally-run models (e.g., Ollama) for privacy and efficiency - Careful design of logging mechanisms for performance tracking","title":"Level 4 \u2014 Textbooks with Chatbots"},{"location":"concepts/five-levels-of-intelligent-textbooks/#level-5-autonomous-ai-textbooks","text":"Definition : The aspirational level where AI-driven systems fully understand individual learner needs and autonomously generate personalized learning experiences. Key Characteristics : - Deep understanding of individual student knowledge and goals - Real-time generation of customized lessons through natural language - Complete adaptability to learning styles and preferences - Autonomous decision-making about learning progression - Human-like tutoring capabilities with comprehensive support Future Requirements : - Advanced hardware optimized for graph operations - More reliable and accurate LLMs - Sophisticated privacy-preserving technologies - Standardized frameworks for intelligent textbook interoperability Current Status : \"Level 5 textbooks are like cars that drive themselves under all conditions: during a heavy snowstorm at night on roads under heavy construction\u2014in other words, not happening in the near term.\"","title":"Level 5 \u2014 Autonomous AI Textbooks"},{"location":"concepts/five-levels-of-intelligent-textbooks/#implementation-strategies-and-considerations","text":"","title":"Implementation Strategies and Considerations"},{"location":"concepts/five-levels-of-intelligent-textbooks/#flexible-implementation","text":"Organizations don't necessarily need to progress sequentially through all five levels. Depending on specific needs and available technologies, it may be advantageous to: Skip certain levels entirely Implement features from multiple levels simultaneously Focus on particular aspects that deliver the most educational value For example, moving directly from Level 2 (interactive) to leveraging LLMs (as in Level 4) for generating responses to student queries might bypass some regulatory challenges associated with storing personal learning data in Level 3 implementations.","title":"Flexible Implementation"},{"location":"concepts/five-levels-of-intelligent-textbooks/#key-considerations-for-implementation","text":"When developing intelligent textbooks at any level, consider: Educational Goals : What are the primary learning objectives? Technical Resources : What technologies and expertise are available? User Context : What is the technological proficiency of target learners? Regulatory Environment : What legal and ethical constraints apply? Scalability : How will the solution grow with increasing users? Maintenance : What ongoing support will be required?","title":"Key Considerations for Implementation"},{"location":"concepts/five-levels-of-intelligent-textbooks/#measuring-success","text":"Success metrics for intelligent textbooks should include: Learning outcomes and knowledge retention Student engagement and satisfaction Time efficiency in achieving learning objectives Accessibility across diverse learner populations Cost-effectiveness compared to traditional methods","title":"Measuring Success"},{"location":"concepts/five-levels-of-intelligent-textbooks/#the-future-of-intelligent-textbooks","text":"As technologies continue to evolve, we can expect: Increasingly sophisticated learning graph generation More seamless integration of multiple modalities (text, video, simulations) Better standardization for exchanging intelligent textbook content Enhanced personalization with improved privacy safeguards Greater adoption of MicroSims and interactive elements The ultimate vision is to provide equal learning opportunities for all students globally through advanced, accessible intelligent textbooks that adapt to individual needs while maintaining high educational standards. \"Never mistake a clear view for a short distance.\" \u2014 Paul Saffo","title":"The Future of Intelligent Textbooks"},{"location":"concepts/five-levels-of-intelligent-textbooks/#summary","text":"The five-level framework for intelligent textbooks provides a structured approach to understanding and implementing increasingly sophisticated educational resources: Level 1 : Static textbooks with fixed content Level 2 : Interactive textbooks with basic digital enhancements Level 3 : Adaptive textbooks that personalize learning paths Level 4 : Textbooks with integrated AI chatbots for assistance Level 5 : Fully autonomous AI textbooks that function as comprehensive tutors Learning graphs serve as the foundation for higher-level implementations, enabling structured representation of knowledge domains and prerequisites. While the full realization of Level 5 remains a future goal, significant advancements in Levels 2-4 are already transforming educational experiences for learners worldwide.","title":"Summary"},{"location":"concepts/five-levels-of-intelligent-textbooks/#review-questions","text":"Compare and contrast Level 2 and Level 3 intelligent textbooks. What key features differentiate them? How do learning graphs contribute to the functionality of adaptive textbooks? What privacy and ethical considerations emerge as textbooks become more intelligent? Explain the GraphRAG architecture used in Level 4 textbooks. How does it enhance the learning experience? Why might an organization choose to implement features from multiple levels rather than progressing sequentially through the framework?","title":"Review Questions"},{"location":"concepts/five-levels-of-intelligent-textbooks/#practical-exercise","text":"Design a learning graph for a topic in your field of expertise. Identify: Core concepts that must be understood Prerequisites for each concept Relationships between different concepts Potential assessment points to measure understanding Use this learning graph to sketch how a Level 3 adaptive textbook might guide different learners through the material based on their prior knowledge and progress.","title":"Practical Exercise"},{"location":"concepts/five-levels-of-intelligent-textbooks/#generative-ai-project","text":"Use a generative tool such as Anthropic Claude or OpenAI ChatGPT to ask it to list the 100 core concepts in a course description you give it. - ask it to build a learning dependency graph of these concepts create a graph viewer using vis.js for a given end goal, ask it to build a learning path that include all the dependent concepts you don't already know","title":"Generative AI Project"},{"location":"concepts/hiding-content/","text":"Hiding Content You can add metadata to the very top of your index.md file to hide specific elements of any page. --- hide: - title # Hide the page title - navigation # Hide the navigation sidebar - toc # Hide the table of contents - footer # Hide the footer - tags # Hide tags (if using tags plugin) --- I have found that the hide of title does not work. To get around this bug I use the following CSS: <style> .md-content__inner h1 {display: none !important;} </style> Note you want to restrict the h1 display:none to only the markdown content inner class.","title":"Hiding Content"},{"location":"concepts/hiding-content/#hiding-content","text":"You can add metadata to the very top of your index.md file to hide specific elements of any page. --- hide: - title # Hide the page title - navigation # Hide the navigation sidebar - toc # Hide the table of contents - footer # Hide the footer - tags # Hide tags (if using tags plugin) --- I have found that the hide of title does not work. To get around this bug I use the following CSS: <style> .md-content__inner h1 {display: none !important;} </style> Note you want to restrict the h1 display:none to only the markdown content inner class.","title":"Hiding Content"},{"location":"concepts/learning-graph/","text":"Learning Graphs Using A Directed Acyclic Graph of Concepts for intelligent textbooks. Introduction to Learning Graphs A Learning Graph is a graph-based data structure used to represent educational knowledge as a Directed Acyclic Graph (DAG) of interconnected concepts. Unlike traditional linear curricula, which often follow a rigid sequence, a Learning Graph models dependencies between concepts, allowing for personalized learning paths that adapt to the needs of individual learners. The DAG structure ensures that each concept builds upon prerequisite knowledge, forming a hierarchical structure where nodes represent concepts, and directed edges denote prerequisite relationships. This approach facilitates adaptive learning , curriculum optimization , and personalized education pathways . Concepts vs. Content in a Learning Graph One of the key distinctions in a Learning Graph is the difference between concepts and content . Concepts Concepts represent abstract units of knowledge that students need to learn. Concepts are independent of specific instructional materials. Examples: \"Newton's Second Law,\" \"Photosynthesis,\" \"Graph Traversal Algorithms.\" Concepts are nodes in the Learning Graph. Content Content refers to the specific learning materials that explain, illustrate, or assess a concept. Content includes textbooks, videos, interactive exercises, and quizzes. Content is associated with concepts but does not form part of the graph structure itself. Multiple content items can be mapped to the same concept, supporting different learning styles. In summary, concepts define what should be learned, while content provides the means to learn it . The Concept Model in SKOS The Simple Knowledge Organization System (SKOS) is a widely used framework for modeling knowledge structures such as taxonomies, thesauri, and ontologies. SKOS provides a useful foundation for representing concepts in a Learning Graph. Key SKOS Elements Relevant to Learning Graphs: skos:Concept -- Represents an individual concept within a knowledge domain. skos:prefLabel -- The preferred label or name of the concept. skos:altLabel -- Alternative names or synonyms for the concept. skos:definition -- A textual definition of the concept. skos:broader -- Defines a more general (parent) concept. skos:narrower -- Defines a more specific (child) concept. skos:related -- Links to related concepts that are neither broader nor narrower. By adopting SKOS principles, a Learning Graph can maintain conceptual clarity , support interoperability with other knowledge representations , and enable automated reasoning over learning paths . Using Graph Algorithms with Learning Graphs Graph algorithms are essential for analyzing and deriving insights from a Learning Graph. These algorithms enable personalized learning pathways , concept dependency analysis , and recommendation systems . Key Graph Algorithms for Learning Graphs 1. Topological Sorting Ensures concepts are presented in the correct order, respecting prerequisite relationships. Used to generate valid learning sequences . Example: If \"Derivatives\" is a prerequisite for \"Integrals,\" topological sorting guarantees that derivatives are taught first. 2. Shortest Path Algorithms (Dijkstra's, A ) * Identifies the shortest learning path to a given concept. Helps learners reach their goals efficiently by minimizing redundant topics. Example: A student weak in \"Linear Algebra\" but strong in \"Calculus\" can receive a streamlined learning plan that skips unnecessary review. 3. Centrality Measures (PageRank, Betweenness, Closeness) Determines the most foundational concepts in a subject. High centrality nodes are often key learning bottlenecks. Example: \"Algebraic Manipulation\" might have high centrality in a math curriculum, as it is a prerequisite for many advanced topics. 4. Community Detection Algorithms (Louvain, Modularity Maximization) Groups related concepts into clusters . Helps structure curricula into modular courses. Example: \"Mechanics\" and \"Thermodynamics\" may form distinct but related concept clusters in a physics curriculum. 5. Graph Traversal Algorithms (DFS, BFS) Used for progress tracking and exploration . BFS helps students explore related topics, while DFS ensures deep mastery before advancing. Example: A student can explore alternative paths if they struggle with a particular concept. Conclusion A Learning Graph represents an innovative approach to structuring educational knowledge. By modeling concepts as nodes in a Directed Acyclic Graph (DAG) , educators and AI-driven systems can create personalized, efficient, and adaptive learning plans . The distinction between concepts and content ensures a flexible, modular approach to education. Additionally, leveraging graph algorithms enables intelligent recommendations, optimal learning pathways, and structured curriculum development. By integrating SKOS-based concept modeling , a Learning Graph ensures interoperability , semantic clarity , and scalability , making it a powerful tool for the future of education.","title":"Learning Graphs"},{"location":"concepts/learning-graph/#learning-graphs","text":"Using A Directed Acyclic Graph of Concepts for intelligent textbooks.","title":"Learning Graphs"},{"location":"concepts/learning-graph/#introduction-to-learning-graphs","text":"A Learning Graph is a graph-based data structure used to represent educational knowledge as a Directed Acyclic Graph (DAG) of interconnected concepts. Unlike traditional linear curricula, which often follow a rigid sequence, a Learning Graph models dependencies between concepts, allowing for personalized learning paths that adapt to the needs of individual learners. The DAG structure ensures that each concept builds upon prerequisite knowledge, forming a hierarchical structure where nodes represent concepts, and directed edges denote prerequisite relationships. This approach facilitates adaptive learning , curriculum optimization , and personalized education pathways .","title":"Introduction to Learning Graphs"},{"location":"concepts/learning-graph/#concepts-vs-content-in-a-learning-graph","text":"One of the key distinctions in a Learning Graph is the difference between concepts and content .","title":"Concepts vs. Content in a Learning Graph"},{"location":"concepts/learning-graph/#concepts","text":"Concepts represent abstract units of knowledge that students need to learn. Concepts are independent of specific instructional materials. Examples: \"Newton's Second Law,\" \"Photosynthesis,\" \"Graph Traversal Algorithms.\" Concepts are nodes in the Learning Graph.","title":"Concepts"},{"location":"concepts/learning-graph/#content","text":"Content refers to the specific learning materials that explain, illustrate, or assess a concept. Content includes textbooks, videos, interactive exercises, and quizzes. Content is associated with concepts but does not form part of the graph structure itself. Multiple content items can be mapped to the same concept, supporting different learning styles. In summary, concepts define what should be learned, while content provides the means to learn it .","title":"Content"},{"location":"concepts/learning-graph/#the-concept-model-in-skos","text":"The Simple Knowledge Organization System (SKOS) is a widely used framework for modeling knowledge structures such as taxonomies, thesauri, and ontologies. SKOS provides a useful foundation for representing concepts in a Learning Graph.","title":"The Concept Model in SKOS"},{"location":"concepts/learning-graph/#key-skos-elements-relevant-to-learning-graphs","text":"skos:Concept -- Represents an individual concept within a knowledge domain. skos:prefLabel -- The preferred label or name of the concept. skos:altLabel -- Alternative names or synonyms for the concept. skos:definition -- A textual definition of the concept. skos:broader -- Defines a more general (parent) concept. skos:narrower -- Defines a more specific (child) concept. skos:related -- Links to related concepts that are neither broader nor narrower. By adopting SKOS principles, a Learning Graph can maintain conceptual clarity , support interoperability with other knowledge representations , and enable automated reasoning over learning paths .","title":"Key SKOS Elements Relevant to Learning Graphs:"},{"location":"concepts/learning-graph/#using-graph-algorithms-with-learning-graphs","text":"Graph algorithms are essential for analyzing and deriving insights from a Learning Graph. These algorithms enable personalized learning pathways , concept dependency analysis , and recommendation systems .","title":"Using Graph Algorithms with Learning Graphs"},{"location":"concepts/learning-graph/#key-graph-algorithms-for-learning-graphs","text":"","title":"Key Graph Algorithms for Learning Graphs"},{"location":"concepts/learning-graph/#1-topological-sorting","text":"Ensures concepts are presented in the correct order, respecting prerequisite relationships. Used to generate valid learning sequences . Example: If \"Derivatives\" is a prerequisite for \"Integrals,\" topological sorting guarantees that derivatives are taught first.","title":"1. Topological Sorting"},{"location":"concepts/learning-graph/#2-shortest-path-algorithms-dijkstras-a","text":"Identifies the shortest learning path to a given concept. Helps learners reach their goals efficiently by minimizing redundant topics. Example: A student weak in \"Linear Algebra\" but strong in \"Calculus\" can receive a streamlined learning plan that skips unnecessary review.","title":"2. Shortest Path Algorithms (Dijkstra's, A)*"},{"location":"concepts/learning-graph/#3-centrality-measures-pagerank-betweenness-closeness","text":"Determines the most foundational concepts in a subject. High centrality nodes are often key learning bottlenecks. Example: \"Algebraic Manipulation\" might have high centrality in a math curriculum, as it is a prerequisite for many advanced topics.","title":"3. Centrality Measures (PageRank, Betweenness, Closeness)"},{"location":"concepts/learning-graph/#4-community-detection-algorithms-louvain-modularity-maximization","text":"Groups related concepts into clusters . Helps structure curricula into modular courses. Example: \"Mechanics\" and \"Thermodynamics\" may form distinct but related concept clusters in a physics curriculum.","title":"4. Community Detection Algorithms (Louvain, Modularity Maximization)"},{"location":"concepts/learning-graph/#5-graph-traversal-algorithms-dfs-bfs","text":"Used for progress tracking and exploration . BFS helps students explore related topics, while DFS ensures deep mastery before advancing. Example: A student can explore alternative paths if they struggle with a particular concept.","title":"5. Graph Traversal Algorithms (DFS, BFS)"},{"location":"concepts/learning-graph/#conclusion","text":"A Learning Graph represents an innovative approach to structuring educational knowledge. By modeling concepts as nodes in a Directed Acyclic Graph (DAG) , educators and AI-driven systems can create personalized, efficient, and adaptive learning plans . The distinction between concepts and content ensures a flexible, modular approach to education. Additionally, leveraging graph algorithms enables intelligent recommendations, optimal learning pathways, and structured curriculum development. By integrating SKOS-based concept modeling , a Learning Graph ensures interoperability , semantic clarity , and scalability , making it a powerful tool for the future of education.","title":"Conclusion"},{"location":"concepts/levels-of-interactivity-v1/","text":"Levels of Interactivity Wall of text - Just plain text in rows on the screen. This is the type of content that good instructional designers avoid. List of items - An unnumbered or numbered lists of items. Even small lists break up a wall of text and engage the student. Definition lists - list with labels and text descriptions Tables - structured lists with multiple columns and column headers to describe the data in each column Charts - graphical displays of data including time-series charts, bar charts and line graphs Toggle Charts - The ability to toggle between data views (table/chart) including linear and logarithmic views Simple Diagram - shapes in groups such as layers, circles or triangle including simple block diagrams. Static Workflow - shapes connected by lines and arrows. The lines and arrows may also have labels. Animated Workflows - shapes connected by animation of arrows showing the movement of data or other information. Ideally animations can be toggled on and off. Gif outputs can be generated. Infographic - shapes with static callout descriptions. The descriptive text is positioned so it is visible next to the shapes. Interactive Infographic - An infographic drawings where the user can hover or click on shapes to get additional information. Users can hover their pointer over a region or shape on the diagram. Basic Animation - repeated shape movement without user controls such as running a small simulation of a ball moving around a canvas and bouncing off the sides. Interactive Animation - an animation where the user can participate in the animation such as controlling the speed of the ball, the number of balls or the gravity of the objects. MicroSim - a simulation of some aspect of the world that the user can interact with. MicroSims use both real-world models and interactive controls to change the simulations. MicroSims often have start/pause and reset buttons in a controls area below the drawing canvas. MicroSims usually use a 2D rendering engine such as p5.js. MicroSim with logging - A MicroSim that leverages the ability to log what controls are being used by a student to change an animation or simulation. The event logs are stored so that the authors can gain feedback on how the MicroSim is being used. Personalized MicroSim - A MicroSim where the experience that the user has is modified for their needs. For example, students that have a calculus background might have integral equations shown during the simulation. Full 3D World Simulation - A program that simulates a full three dimensional representation of the world and allows the user to interact with this simulation. These simulations are much more compute intensive and may require local GPUs to gain reasonable performance.","title":"Levels of Interactivity"},{"location":"concepts/levels-of-interactivity-v1/#levels-of-interactivity","text":"Wall of text - Just plain text in rows on the screen. This is the type of content that good instructional designers avoid. List of items - An unnumbered or numbered lists of items. Even small lists break up a wall of text and engage the student. Definition lists - list with labels and text descriptions Tables - structured lists with multiple columns and column headers to describe the data in each column Charts - graphical displays of data including time-series charts, bar charts and line graphs Toggle Charts - The ability to toggle between data views (table/chart) including linear and logarithmic views Simple Diagram - shapes in groups such as layers, circles or triangle including simple block diagrams. Static Workflow - shapes connected by lines and arrows. The lines and arrows may also have labels. Animated Workflows - shapes connected by animation of arrows showing the movement of data or other information. Ideally animations can be toggled on and off. Gif outputs can be generated. Infographic - shapes with static callout descriptions. The descriptive text is positioned so it is visible next to the shapes. Interactive Infographic - An infographic drawings where the user can hover or click on shapes to get additional information. Users can hover their pointer over a region or shape on the diagram. Basic Animation - repeated shape movement without user controls such as running a small simulation of a ball moving around a canvas and bouncing off the sides. Interactive Animation - an animation where the user can participate in the animation such as controlling the speed of the ball, the number of balls or the gravity of the objects. MicroSim - a simulation of some aspect of the world that the user can interact with. MicroSims use both real-world models and interactive controls to change the simulations. MicroSims often have start/pause and reset buttons in a controls area below the drawing canvas. MicroSims usually use a 2D rendering engine such as p5.js. MicroSim with logging - A MicroSim that leverages the ability to log what controls are being used by a student to change an animation or simulation. The event logs are stored so that the authors can gain feedback on how the MicroSim is being used. Personalized MicroSim - A MicroSim where the experience that the user has is modified for their needs. For example, students that have a calculus background might have integral equations shown during the simulation. Full 3D World Simulation - A program that simulates a full three dimensional representation of the world and allows the user to interact with this simulation. These simulations are much more compute intensive and may require local GPUs to gain reasonable performance.","title":"Levels of Interactivity"},{"location":"concepts/levels-of-interactivity/","text":"Levels of Interactivity in Intelligent Textbooks Static Content Level - Basic text with minimal formatting Structured Content Level - Content organized into meaningful structures Visual Representation Level - Data and concepts presented visually Basic Interaction Level - Initial interactive elements Simulation Level - Dynamic modeling of concepts Advanced Simulation Level - Complex, personalized interactions Detailed Breakdown Static Content Level Text Block - Plain text in paragraph form Enhanced Text - Text with basic formatting (bold, italic, headers) Structured Content Level List Structure - Bulleted or numbered lists that organize information Definition Structure - Term-description pairs that clarify concepts Tabular Structure - Information organized in rows and columns Visual Representation Level Static Visualization - Charts, graphs, and diagrams that don't change Toggle Visualization - Charts with options to switch between different views Process Visualization - Workflows and sequences shown with connecting elements Basic Interaction Level Animated Visualization - Visual elements with predetermined movement Interactive Infographic - Clickable areas that reveal additional information User-Controlled Animation - Animations with basic user controls (play/pause) Simulation Level Basic MicroSim - Simple interactive simulation with limited controls Standard MicroSim - Simulation with multiple controls and realistic modeling Data-Enhanced MicroSim - Simulation that captures user interaction data Advanced Simulation Level Adaptive MicroSim - Simulation that adjusts to user behavior or preferences Personalized MicroSim - Simulation tailored to user's knowledge level Immersive Simulation - Comprehensive 3D environment with complex interactions","title":"Levels of Interactivity in Intelligent Textbooks"},{"location":"concepts/levels-of-interactivity/#levels-of-interactivity-in-intelligent-textbooks","text":"Static Content Level - Basic text with minimal formatting Structured Content Level - Content organized into meaningful structures Visual Representation Level - Data and concepts presented visually Basic Interaction Level - Initial interactive elements Simulation Level - Dynamic modeling of concepts Advanced Simulation Level - Complex, personalized interactions","title":"Levels of Interactivity in Intelligent Textbooks"},{"location":"concepts/levels-of-interactivity/#detailed-breakdown","text":"","title":"Detailed Breakdown"},{"location":"concepts/levels-of-interactivity/#static-content-level","text":"Text Block - Plain text in paragraph form Enhanced Text - Text with basic formatting (bold, italic, headers)","title":"Static Content Level"},{"location":"concepts/levels-of-interactivity/#structured-content-level","text":"List Structure - Bulleted or numbered lists that organize information Definition Structure - Term-description pairs that clarify concepts Tabular Structure - Information organized in rows and columns","title":"Structured Content Level"},{"location":"concepts/levels-of-interactivity/#visual-representation-level","text":"Static Visualization - Charts, graphs, and diagrams that don't change Toggle Visualization - Charts with options to switch between different views Process Visualization - Workflows and sequences shown with connecting elements","title":"Visual Representation Level"},{"location":"concepts/levels-of-interactivity/#basic-interaction-level","text":"Animated Visualization - Visual elements with predetermined movement Interactive Infographic - Clickable areas that reveal additional information User-Controlled Animation - Animations with basic user controls (play/pause)","title":"Basic Interaction Level"},{"location":"concepts/levels-of-interactivity/#simulation-level","text":"Basic MicroSim - Simple interactive simulation with limited controls Standard MicroSim - Simulation with multiple controls and realistic modeling Data-Enhanced MicroSim - Simulation that captures user interaction data","title":"Simulation Level"},{"location":"concepts/levels-of-interactivity/#advanced-simulation-level","text":"Adaptive MicroSim - Simulation that adjusts to user behavior or preferences Personalized MicroSim - Simulation tailored to user's knowledge level Immersive Simulation - Comprehensive 3D environment with complex interactions","title":"Advanced Simulation Level"},{"location":"concepts/ontology-questions/","text":"Questions that Drive the Ontology !!! prompt I want to build a general ontology for textbooks. I want the ontology to be driven by the key questions that a person would ask about a textbook. Please generate list the 100 most common questions that users might ask about a textbook. Exclude any questions that are specific to any domain. Here are 100 samples of non-domain specific questions about a textbook that the ontology should answer: What is the title of the textbook? Who is the audience of the textbook? What are the prerequisites for this textbook? What are the core concepts taught in this textbook? What is the order that these core concepts should be taught? What are the key learning objectives for this course? Using Bloom's Taxonomy 2001, classify each concept into one of the levels. For a student that has the right prerequisites, how long would a student take to cover all of the concepts in this textbook? For any given concept C show a definition for that concept in the context of this textbook. Give an example of how concept C is used in this in this textbook. What are the key outcomes of this course. State it in the term of \"After this course the student will be able to...\" What new types of content will the students be able to create after they use the textbook for a course? For each concept C, show lesson plans L for student with a background B. For each concept C, show sample multiple-choice assessments A. For each concept C, list the relevant microsimulations M. For each microsimulation M, list the related concepts C. For each concept C, list the related stories S. For each concept C, list the related metaphors \"Metaphor\" For each concept C, list the related generative AI \"Prompts\" P. For the textbook, list the chapters in the textbook in the order they are presented. For each chapter, list the concepts C covered in that chapter. What is the ISBN of the textbook? Who are the authors of the textbook? What is the edition number of the textbook? What is the publisher of the textbook? What is the publication year of the textbook? Is there an online version of the textbook? What formats is the textbook available in (e.g., hardcover, paperback, digital, audiobook)? What languages is the textbook available in? Does the textbook have an accompanying instructor's guide? Does the textbook include exercises or practice problems? Does the textbook include answers to exercises? Does the textbook have companion software or interactive content? What is the difficulty level of the textbook? What teaching methodologies are used in the textbook? Is the textbook aligned with any specific curriculum standards (e.g., Common Core, AP, IB)? What are the key pedagogical strategies used in the textbook? How does the textbook incorporate active learning techniques? Does the textbook provide case studies? Does the textbook include real-world applications of its concepts? Does the textbook provide historical context for its concepts? How does the textbook accommodate different learning styles? What visual aids (e.g., diagrams, infographics, charts) are included in the textbook? What multimedia resources are associated with the textbook? Does the textbook include video explanations or tutorials? Are there instructor resources such as slides, quizzes, and assignments? How does the textbook support self-paced learning? How does the textbook support collaborative learning? What assessment types are included in the textbook (e.g., formative, summative, diagnostic)? Does the textbook include rubrics for grading assignments? Does the textbook include discussion questions? Does the textbook encourage critical thinking? How does the textbook scaffold learning? What prior knowledge is assumed for the reader? How frequently is the textbook updated or revised? Does the textbook provide supplemental readings or references? Are there any recommended readings to complement the textbook? Does the textbook include concept maps or knowledge graphs? How is the textbook structured to help with concept retention? Does the textbook include guided notes for students? How does the textbook help students prepare for standardized tests? Are there practice exams included in the textbook? Does the textbook contain worked-out examples? How does the textbook differentiate instruction for learners with disabilities? Is the textbook compliant with accessibility guidelines (e.g., WCAG)? How does the textbook integrate experiential learning? Are there project-based learning activities in the textbook? Does the textbook include group work activities? What feedback mechanisms are built into the textbook? How does the textbook incorporate spaced repetition for learning reinforcement? Are there any gamified elements in the textbook? How does the textbook incorporate AI-generated content or adaptive learning? Are there any interactive quizzes or assessments available? Can the textbook content be customized or adapted by educators? How does the textbook compare to other textbooks covering similar topics? What are the strengths and weaknesses of the textbook compared to alternatives? How does the textbook address misconceptions about its subject matter? What types of supplementary materials (e.g., lab manuals, workbooks) are available? How does the textbook engage students with diverse backgrounds and experiences? Does the textbook encourage interdisciplinary connections? What is the cultural relevance of the textbook's examples and case studies? Are there any ethical considerations addressed in the textbook? Does the textbook provide a glossary of terms? Does the textbook include appendices with reference materials? How does the textbook promote metacognition and self-reflection? Does the textbook provide alternative explanations for difficult concepts? Are there any alternative pathways through the textbook for different learners? How does the textbook incorporate learner feedback for continuous improvement? Does the textbook provide summaries at the end of each chapter? What mnemonic techniques are used in the textbook? Does the textbook include a comprehensive index for easy navigation? What are the most cited references in the textbook? How does the textbook handle controversial topics in the field? Are there any open educational resources (OER) versions of the textbook? What licensing terms apply to the textbook (e.g., copyright, Creative Commons)? Does the textbook include citations for all referenced works? How is the credibility of sources ensured in the textbook? How can students and educators provide feedback on the textbook? Are there any discussion forums or communities associated with the textbook? Does the textbook provide guidance for further study beyond its scope? This comprehensive list of questions ensures that the ontology will cover all critical aspects of a textbook's structure, usability, and effectiveness for different audiences. Let me know if you want to refine or categorize them further!","title":"Questions that Drive the Ontology"},{"location":"concepts/ontology-questions/#questions-that-drive-the-ontology","text":"!!! prompt I want to build a general ontology for textbooks. I want the ontology to be driven by the key questions that a person would ask about a textbook. Please generate list the 100 most common questions that users might ask about a textbook. Exclude any questions that are specific to any domain. Here are 100 samples of non-domain specific questions about a textbook that the ontology should answer: What is the title of the textbook? Who is the audience of the textbook? What are the prerequisites for this textbook? What are the core concepts taught in this textbook? What is the order that these core concepts should be taught? What are the key learning objectives for this course? Using Bloom's Taxonomy 2001, classify each concept into one of the levels. For a student that has the right prerequisites, how long would a student take to cover all of the concepts in this textbook? For any given concept C show a definition for that concept in the context of this textbook. Give an example of how concept C is used in this in this textbook. What are the key outcomes of this course. State it in the term of \"After this course the student will be able to...\" What new types of content will the students be able to create after they use the textbook for a course? For each concept C, show lesson plans L for student with a background B. For each concept C, show sample multiple-choice assessments A. For each concept C, list the relevant microsimulations M. For each microsimulation M, list the related concepts C. For each concept C, list the related stories S. For each concept C, list the related metaphors \"Metaphor\" For each concept C, list the related generative AI \"Prompts\" P. For the textbook, list the chapters in the textbook in the order they are presented. For each chapter, list the concepts C covered in that chapter. What is the ISBN of the textbook? Who are the authors of the textbook? What is the edition number of the textbook? What is the publisher of the textbook? What is the publication year of the textbook? Is there an online version of the textbook? What formats is the textbook available in (e.g., hardcover, paperback, digital, audiobook)? What languages is the textbook available in? Does the textbook have an accompanying instructor's guide? Does the textbook include exercises or practice problems? Does the textbook include answers to exercises? Does the textbook have companion software or interactive content? What is the difficulty level of the textbook? What teaching methodologies are used in the textbook? Is the textbook aligned with any specific curriculum standards (e.g., Common Core, AP, IB)? What are the key pedagogical strategies used in the textbook? How does the textbook incorporate active learning techniques? Does the textbook provide case studies? Does the textbook include real-world applications of its concepts? Does the textbook provide historical context for its concepts? How does the textbook accommodate different learning styles? What visual aids (e.g., diagrams, infographics, charts) are included in the textbook? What multimedia resources are associated with the textbook? Does the textbook include video explanations or tutorials? Are there instructor resources such as slides, quizzes, and assignments? How does the textbook support self-paced learning? How does the textbook support collaborative learning? What assessment types are included in the textbook (e.g., formative, summative, diagnostic)? Does the textbook include rubrics for grading assignments? Does the textbook include discussion questions? Does the textbook encourage critical thinking? How does the textbook scaffold learning? What prior knowledge is assumed for the reader? How frequently is the textbook updated or revised? Does the textbook provide supplemental readings or references? Are there any recommended readings to complement the textbook? Does the textbook include concept maps or knowledge graphs? How is the textbook structured to help with concept retention? Does the textbook include guided notes for students? How does the textbook help students prepare for standardized tests? Are there practice exams included in the textbook? Does the textbook contain worked-out examples? How does the textbook differentiate instruction for learners with disabilities? Is the textbook compliant with accessibility guidelines (e.g., WCAG)? How does the textbook integrate experiential learning? Are there project-based learning activities in the textbook? Does the textbook include group work activities? What feedback mechanisms are built into the textbook? How does the textbook incorporate spaced repetition for learning reinforcement? Are there any gamified elements in the textbook? How does the textbook incorporate AI-generated content or adaptive learning? Are there any interactive quizzes or assessments available? Can the textbook content be customized or adapted by educators? How does the textbook compare to other textbooks covering similar topics? What are the strengths and weaknesses of the textbook compared to alternatives? How does the textbook address misconceptions about its subject matter? What types of supplementary materials (e.g., lab manuals, workbooks) are available? How does the textbook engage students with diverse backgrounds and experiences? Does the textbook encourage interdisciplinary connections? What is the cultural relevance of the textbook's examples and case studies? Are there any ethical considerations addressed in the textbook? Does the textbook provide a glossary of terms? Does the textbook include appendices with reference materials? How does the textbook promote metacognition and self-reflection? Does the textbook provide alternative explanations for difficult concepts? Are there any alternative pathways through the textbook for different learners? How does the textbook incorporate learner feedback for continuous improvement? Does the textbook provide summaries at the end of each chapter? What mnemonic techniques are used in the textbook? Does the textbook include a comprehensive index for easy navigation? What are the most cited references in the textbook? How does the textbook handle controversial topics in the field? Are there any open educational resources (OER) versions of the textbook? What licensing terms apply to the textbook (e.g., copyright, Creative Commons)? Does the textbook include citations for all referenced works? How is the credibility of sources ensured in the textbook? How can students and educators provide feedback on the textbook? Are there any discussion forums or communities associated with the textbook? Does the textbook provide guidance for further study beyond its scope? This comprehensive list of questions ensures that the ontology will cover all critical aspects of a textbook's structure, usability, and effectiveness for different audiences. Let me know if you want to refine or categorize them further!","title":"Questions that Drive the Ontology"},{"location":"concepts/open-educational-resources/","text":"Open Educational Resources Open Educational Resources (OER) are freely accessible, openly licensed educational materials that can be used, adapted, and redistributed by anyone. They are designed to support teaching, learning, and research without the typical restrictions of traditional copyrighted educational content. Key Characteristics of OER: Free Access -- Available at no cost to users. Open Licensing -- Typically licensed under Creative Commons or similar licenses, allowing modification and redistribution. Diverse Formats -- Can include textbooks, videos, quizzes, simulations, course modules, and full online courses. Customization -- Educators can adapt content to fit specific learning needs. Scalability -- Institutions and individuals can distribute OER widely without legal or financial barriers. Is There a Central Listing of OER? There is no single, universally recognized central repository for OER, but several well-known platforms and organizations curate and distribute them: Major OER Repositories and Platforms: OER Commons ( https://www.oercommons.org ) -- A broad collection of open educational materials for various subjects and levels. MIT OpenCourseWare ( https://ocw.mit.edu ) -- Free course materials from the Massachusetts Institute of Technology. OpenStax ( https://openstax.org ) -- High-quality, peer-reviewed open textbooks. MERLOT ( https://www.merlot.org ) -- A curated collection of free learning materials. LibreTexts ( https://libretexts.org ) -- Open textbooks and learning materials in STEM, humanities, and social sciences. Wikibooks (https://en.wikibooks.org) -- A Wikimedia project with freely available textbooks. Europeana ( https://www.europeana.eu ) -- A European digital library that includes open educational materials. Creative Commons Search (https://search.creativecommons.org) -- A tool for finding openly licensed content. Open Education Global ( https://www.oeglobal.org ) -- A network promoting open education initiatives. UNESCO OER Platform ( https://www.unesco.org/en/open-educational-resources ) -- UNESCO's global effort to promote OER. Each of these platforms has its own focus, audience, and scope, making them valuable resources for educators, students, and institutions. Let me know if you need recommendations based on specific subjects or use cases!","title":"Open Educational Resources"},{"location":"concepts/open-educational-resources/#open-educational-resources","text":"Open Educational Resources (OER) are freely accessible, openly licensed educational materials that can be used, adapted, and redistributed by anyone. They are designed to support teaching, learning, and research without the typical restrictions of traditional copyrighted educational content.","title":"Open Educational Resources"},{"location":"concepts/open-educational-resources/#key-characteristics-of-oer","text":"Free Access -- Available at no cost to users. Open Licensing -- Typically licensed under Creative Commons or similar licenses, allowing modification and redistribution. Diverse Formats -- Can include textbooks, videos, quizzes, simulations, course modules, and full online courses. Customization -- Educators can adapt content to fit specific learning needs. Scalability -- Institutions and individuals can distribute OER widely without legal or financial barriers.","title":"Key Characteristics of OER:"},{"location":"concepts/open-educational-resources/#is-there-a-central-listing-of-oer","text":"There is no single, universally recognized central repository for OER, but several well-known platforms and organizations curate and distribute them:","title":"Is There a Central Listing of OER?"},{"location":"concepts/open-educational-resources/#major-oer-repositories-and-platforms","text":"OER Commons ( https://www.oercommons.org ) -- A broad collection of open educational materials for various subjects and levels. MIT OpenCourseWare ( https://ocw.mit.edu ) -- Free course materials from the Massachusetts Institute of Technology. OpenStax ( https://openstax.org ) -- High-quality, peer-reviewed open textbooks. MERLOT ( https://www.merlot.org ) -- A curated collection of free learning materials. LibreTexts ( https://libretexts.org ) -- Open textbooks and learning materials in STEM, humanities, and social sciences. Wikibooks (https://en.wikibooks.org) -- A Wikimedia project with freely available textbooks. Europeana ( https://www.europeana.eu ) -- A European digital library that includes open educational materials. Creative Commons Search (https://search.creativecommons.org) -- A tool for finding openly licensed content. Open Education Global ( https://www.oeglobal.org ) -- A network promoting open education initiatives. UNESCO OER Platform ( https://www.unesco.org/en/open-educational-resources ) -- UNESCO's global effort to promote OER. Each of these platforms has its own focus, audience, and scope, making them valuable resources for educators, students, and institutions. Let me know if you need recommendations based on specific subjects or use cases!","title":"Major OER Repositories and Platforms:"},{"location":"concepts/scaffolding/","text":"Scaffolding Scaffolding refers to how the textbook provides structured support to help learners gradually develop their understanding of concepts, skills, and knowledge. Explanation: Scaffolding is an instructional strategy where support is provided to learners at the beginning of a learning process and then gradually removed as they gain confidence and competence. This allows students to build on what they already know and reach higher levels of understanding. Specific ways a textbook might scaffold learning: Progressive Complexity -- Concepts are introduced in a logical sequence, starting from basic to more advanced ideas. Guided Examples -- The textbook includes worked-out examples that show step-by-step solutions before asking students to attempt problems on their own. Prerequisite Reviews -- The textbook revisits foundational knowledge before introducing more complex topics. Hints & Prompts -- Marginal notes, highlighted key terms, or guiding questions help students focus on important ideas. Gradual Reduction of Support -- Earlier sections may provide extensive explanations, while later sections encourage independent thinking. Checkpoints & Self-Assessments -- Short quizzes, concept checks, or reflection questions after sections to ensure comprehension before moving forward. Multiple Representations -- Use of text, diagrams, charts, and videos to help students grasp concepts in different ways. Interleaved Practice -- Mixing previously learned concepts with new material to reinforce retention and connections. Summaries & Recaps -- Key takeaways at the end of each chapter to reinforce learning. Connections to Real-World Applications -- Examples and case studies that help students relate abstract concepts to practical use. This question is essential because a well-designed textbook should not just present information but also help learners construct knowledge effectively through guided progression and support.","title":"Scaffolding"},{"location":"concepts/scaffolding/#scaffolding","text":"Scaffolding refers to how the textbook provides structured support to help learners gradually develop their understanding of concepts, skills, and knowledge.","title":"Scaffolding"},{"location":"concepts/scaffolding/#explanation","text":"Scaffolding is an instructional strategy where support is provided to learners at the beginning of a learning process and then gradually removed as they gain confidence and competence. This allows students to build on what they already know and reach higher levels of understanding.","title":"Explanation:"},{"location":"concepts/scaffolding/#specific-ways-a-textbook-might-scaffold-learning","text":"Progressive Complexity -- Concepts are introduced in a logical sequence, starting from basic to more advanced ideas. Guided Examples -- The textbook includes worked-out examples that show step-by-step solutions before asking students to attempt problems on their own. Prerequisite Reviews -- The textbook revisits foundational knowledge before introducing more complex topics. Hints & Prompts -- Marginal notes, highlighted key terms, or guiding questions help students focus on important ideas. Gradual Reduction of Support -- Earlier sections may provide extensive explanations, while later sections encourage independent thinking. Checkpoints & Self-Assessments -- Short quizzes, concept checks, or reflection questions after sections to ensure comprehension before moving forward. Multiple Representations -- Use of text, diagrams, charts, and videos to help students grasp concepts in different ways. Interleaved Practice -- Mixing previously learned concepts with new material to reinforce retention and connections. Summaries & Recaps -- Key takeaways at the end of each chapter to reinforce learning. Connections to Real-World Applications -- Examples and case studies that help students relate abstract concepts to practical use. This question is essential because a well-designed textbook should not just present information but also help learners construct knowledge effectively through guided progression and support.","title":"Specific ways a textbook might scaffold learning:"},{"location":"course/syllabus/","text":"# Syllabus (8 Weeks) 1) **Social Enterprise Basics** \u2013 what a social enterprise is, mission vs. business goals, value proposition, simple revenue models 2) **Design Thinking** \u2013 empathy interviews, problem statements, ideation, prototyping and testing 3) **Business Model** \u2013 stakeholders, channels, cost structure, revenue streams 4) **Impact Mapping** \u2013 Theory of Change \\& simple metrics 5) **Prototyping** \u2013 build, measure, learn cycle 6) **Partnerships** \u2013 SDG-aligned collaboration and scaling impact 7) **Ethics \\& Do-No-Harm** \u2013 inclusivity, community-first approach 8) **Capstone** \u2013 final project: pitch, mini-MVP, reflection","title":"Syllabus"},{"location":"formatting-tests/","text":"Book Formatting Tests Markdown Test Markdown Test Code Highlight Test Code Highlight Test Equation Test Equations Test Social Media Preview Card Test Social Media Preview Social Media Override Preview","title":"Book Formatting Tests"},{"location":"formatting-tests/#book-formatting-tests","text":"","title":"Book Formatting Tests"},{"location":"formatting-tests/#markdown-test","text":"Markdown Test","title":"Markdown Test"},{"location":"formatting-tests/#code-highlight-test","text":"Code Highlight Test","title":"Code Highlight Test"},{"location":"formatting-tests/#equation-test","text":"Equations Test","title":"Equation Test"},{"location":"formatting-tests/#social-media-preview-card-test","text":"Social Media Preview Social Media Override Preview","title":"Social Media Preview Card Test"},{"location":"formatting-tests/admonitions-test/","text":"Admonitions Test MkDocs Material extends Markdown with admonitions for highlighted content. These require the admonition and pymdownx.details extensions. !!! prompt Prompt text can be copied into the paste buffer by selecting the \"Copy\" button in the upper right corner of the admonition. !!! note \"Optional explicit title\" This is a note admonition. !!! tip This is a tip. !!! warning This is a warning. !!! danger This highlights dangerous actions. ??? question \"Collapsible admonition (closed by default)\" This admonition is collapsible and closed by default. ???+ example \"Collapsible admonition (open by default)\" This admonition is collapsible and open by default. !!! prompt Prompt text can be copied into the paste buffer by selecting the \"Copy\" button in the upper right corner of the admonition. !!! note \"Optional explicit title\" This is a note admonition. !!! tip This is a tip. !!! warning This is a warning. !!! danger This highlights dangerous actions. ??? question \"Question Collapsible admonition (closed by default)\" This question admonition is collapsible and closed by default. ???+ example \"Collapsible admonition (open by default)\" This admonition is collapsible and open by default.","title":"Admonitions Test"},{"location":"formatting-tests/admonitions-test/#admonitions-test","text":"MkDocs Material extends Markdown with admonitions for highlighted content. These require the admonition and pymdownx.details extensions. !!! prompt Prompt text can be copied into the paste buffer by selecting the \"Copy\" button in the upper right corner of the admonition. !!! note \"Optional explicit title\" This is a note admonition. !!! tip This is a tip. !!! warning This is a warning. !!! danger This highlights dangerous actions. ??? question \"Collapsible admonition (closed by default)\" This admonition is collapsible and closed by default. ???+ example \"Collapsible admonition (open by default)\" This admonition is collapsible and open by default. !!! prompt Prompt text can be copied into the paste buffer by selecting the \"Copy\" button in the upper right corner of the admonition. !!! note \"Optional explicit title\" This is a note admonition. !!! tip This is a tip. !!! warning This is a warning. !!! danger This highlights dangerous actions. ??? question \"Question Collapsible admonition (closed by default)\" This question admonition is collapsible and closed by default. ???+ example \"Collapsible admonition (open by default)\" This admonition is collapsible and open by default.","title":"Admonitions Test"},{"location":"formatting-tests/code-highlight-test/","text":"Code Syntax Color Highlight Test Python You can use the py or the full python to format Python code. ```python hello_string = \"Hello World!\" print(hello_string) x = 1 if x == 1: # indented four spaces print(\"x is 1.\") ```python hello_string = \"Hello World!\" print(hello_string) x = 1 if x == 1: # indented four spaces print(\"x is 1.\") JavaScript // the hello world program console.log('Hello World'); Shell echo \"Hello World!\" CSV 1,\"Hello\" 2,\"World!\"","title":"Code Syntax Color Highlight Test"},{"location":"formatting-tests/code-highlight-test/#code-syntax-color-highlight-test","text":"","title":"Code Syntax Color Highlight Test"},{"location":"formatting-tests/code-highlight-test/#python","text":"You can use the py or the full python to format Python code. ```python hello_string = \"Hello World!\" print(hello_string) x = 1 if x == 1: # indented four spaces print(\"x is 1.\") ```python hello_string = \"Hello World!\" print(hello_string) x = 1 if x == 1: # indented four spaces print(\"x is 1.\")","title":"Python"},{"location":"formatting-tests/code-highlight-test/#javascript","text":"// the hello world program console.log('Hello World');","title":"JavaScript"},{"location":"formatting-tests/code-highlight-test/#shell","text":"echo \"Hello World!\"","title":"Shell"},{"location":"formatting-tests/code-highlight-test/#csv","text":"1,\"Hello\" 2,\"World!\"","title":"CSV"},{"location":"formatting-tests/equations-test/","text":"Formatting LaTeX Equations Tests MkDocs Material supports math equations using MathJax when the appropriate extensions are enabled. Inline math equations: The formula for the area of a circle is $A = \\pi r^2$. Block equations: $$ \\frac{n!}{k!(n-k)!} = \\binom{n}{k} $$ For more complex equations with multi-line alignment: $$ \\begin{align} x &= y + z \\\\ &= a + b \\end{align} $$","title":"Formatting LaTeX Equations Tests"},{"location":"formatting-tests/equations-test/#formatting-latex-equations-tests","text":"MkDocs Material supports math equations using MathJax when the appropriate extensions are enabled. Inline math equations: The formula for the area of a circle is $A = \\pi r^2$. Block equations: $$ \\frac{n!}{k!(n-k)!} = \\binom{n}{k} $$ For more complex equations with multi-line alignment: $$ \\begin{align} x &= y + z \\\\ &= a + b \\end{align} $$","title":"Formatting LaTeX Equations Tests"},{"location":"formatting-tests/markdown-test/","text":"Headers Headers in Markdown are created using the hash symbol (#). The number of hash symbols indicates the level of the header. # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6 Lists Markdown supports both unnumbered (bullet) lists and numbered (ordered) lists. Unnumbered Lists Unnumbered lists can be created using asterisks (*), plus signs (+), or hyphens (-). * Item 1 * Item 2 * Nested item 2.1 * Nested item 2.2 * Item 3 - Alternative item 1 - Alternative item 2 + Another alternative item 1 + Another alternative item 2 Numbered Lists Numbered lists are created using numbers followed by periods. 1. First item 2. Second item 1. Nested item 2.1 2. Nested item 2.2 3. Third item Note: The actual numbers don't matter in Markdown source - they will be automatically numbered in the rendered output. 1. First item 1. Second item 1. Third item This will still render as 1, 2, 3. Images Images can be inserted with an exclamation mark, followed by alt text in brackets, and the image URL in parentheses. ![Alt text for the image](path/to/image.jpg) ![Logo of our project](img/logo.png \"Optional title\") For more control, MkDocs Material supports additional attributes: ![Image with attributes](image.jpg){: width=\"300px\" align=\"right\" } Links Links are created using square brackets for the link text followed by the URL in parentheses. [Link text](https://example.com) [Link with title](https://example.com \"Title text shown on hover\") [Reference-style link][reference id] [reference id]: https://example.com \"Optional title\" For internal links in MkDocs: [Link to another page](../folder/page.md) [Link to a section on the same page](#section-id) Code Inline code is wrapped with backticks. Use the `print()` function in Python. Code blocks use triple backticks, optionally followed by the language name for syntax highlighting. ```python def hello_world(): print(\"Hello, world!\") MkDocs Material also supports line numbers and highlighting specific lines: ```markdown ```python linenums=\"1\" hl_lines=\"2 3\" def hello_world(): # This line is highlighted print(\"Hello, world!\") return True ```","title":"Markdown test"},{"location":"formatting-tests/markdown-test/#headers","text":"Headers in Markdown are created using the hash symbol (#). The number of hash symbols indicates the level of the header. # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6","title":"Headers"},{"location":"formatting-tests/markdown-test/#lists","text":"Markdown supports both unnumbered (bullet) lists and numbered (ordered) lists.","title":"Lists"},{"location":"formatting-tests/markdown-test/#unnumbered-lists","text":"Unnumbered lists can be created using asterisks (*), plus signs (+), or hyphens (-). * Item 1 * Item 2 * Nested item 2.1 * Nested item 2.2 * Item 3 - Alternative item 1 - Alternative item 2 + Another alternative item 1 + Another alternative item 2","title":"Unnumbered Lists"},{"location":"formatting-tests/markdown-test/#numbered-lists","text":"Numbered lists are created using numbers followed by periods. 1. First item 2. Second item 1. Nested item 2.1 2. Nested item 2.2 3. Third item Note: The actual numbers don't matter in Markdown source - they will be automatically numbered in the rendered output. 1. First item 1. Second item 1. Third item This will still render as 1, 2, 3.","title":"Numbered Lists"},{"location":"formatting-tests/markdown-test/#images","text":"Images can be inserted with an exclamation mark, followed by alt text in brackets, and the image URL in parentheses. ![Alt text for the image](path/to/image.jpg) ![Logo of our project](img/logo.png \"Optional title\") For more control, MkDocs Material supports additional attributes: ![Image with attributes](image.jpg){: width=\"300px\" align=\"right\" }","title":"Images"},{"location":"formatting-tests/markdown-test/#links","text":"Links are created using square brackets for the link text followed by the URL in parentheses. [Link text](https://example.com) [Link with title](https://example.com \"Title text shown on hover\") [Reference-style link][reference id] [reference id]: https://example.com \"Optional title\" For internal links in MkDocs: [Link to another page](../folder/page.md) [Link to a section on the same page](#section-id)","title":"Links"},{"location":"formatting-tests/markdown-test/#code","text":"Inline code is wrapped with backticks. Use the `print()` function in Python. Code blocks use triple backticks, optionally followed by the language name for syntax highlighting. ```python def hello_world(): print(\"Hello, world!\") MkDocs Material also supports line numbers and highlighting specific lines: ```markdown ```python linenums=\"1\" hl_lines=\"2 3\" def hello_world(): # This line is highlighted print(\"Hello, world!\") return True ```","title":"Code"},{"location":"formatting-tests/quizzes-test/","text":"Quiz Formatting Test Definition of Degree of a Node What is the \"degree\" of a node in a graph? 1. The shortest path between two nodes in the graph 2. The total number of edges connected to the node 3. The number of nodes directly reachable from the node 4. The maximum number of edges any node in the graph has ??? Question \"Show Answer\" The correct answer is B . The degree of a node in a graph is the total number of edges connected to that node. For undirected graphs, this includes all edges, while for directed graphs, it can be further classified into in-degree (edges coming into the node) and out-degree (edges going out of the node). ```","title":"Quiz Formatting Test"},{"location":"formatting-tests/quizzes-test/#quiz-formatting-test","text":"","title":"Quiz Formatting Test"},{"location":"formatting-tests/quizzes-test/#definition-of-degree-of-a-node","text":"What is the \"degree\" of a node in a graph? 1. The shortest path between two nodes in the graph 2. The total number of edges connected to the node 3. The number of nodes directly reachable from the node 4. The maximum number of edges any node in the graph has ??? Question \"Show Answer\" The correct answer is B . The degree of a node in a graph is the total number of edges connected to that node. For undirected graphs, this includes all edges, while for directed graphs, it can be further classified into in-degree (edges coming into the node) and out-degree (edges going out of the node). ```","title":"Definition of Degree of a Node"},{"location":"formatting-tests/social-test-2/","text":"Social Media Test With Local Override Use one of these three sites to verify you can see the local image below. Test Sites Metatags.io This Page Open Graph This Page Social Share Preview This Page Meta - Facebook Test Test Image","title":"Social Media Preview Test"},{"location":"formatting-tests/social-test-2/#social-media-test-with-local-override","text":"Use one of these three sites to verify you can see the local image below.","title":"Social Media Test With Local Override"},{"location":"formatting-tests/social-test-2/#test-sites","text":"Metatags.io This Page Open Graph This Page Social Share Preview This Page Meta - Facebook Test","title":"Test Sites"},{"location":"formatting-tests/social-test-2/#test-image","text":"","title":"Test Image"},{"location":"formatting-tests/social-test/","text":"Social Tests Testing Your Social Media Previews There are many sites that will check for meta information in your HTML file. The prefix og is for the [Open Graph] standard. Metatags.io Open Graph Social Share Preview Open Graph Metadata These elements must be in the html/head section of your document. <meta property=\"og:type\" content=\"website\" > <meta property=\"og:title\" content=\"Social Image Preview Override From Markdown Metadata v18 - Mkdocs Material Social Card Testing\" > <meta property=\"og:description\" content=\"A custom description for this page.\" > <meta property=\"og:image\" content=\"https://dmccreary.github.io/mkdocs-material-social/assets/images/social/metadata-override-test.png\" > <meta property=\"og:image:type\" content=\"image/png\" > <meta property=\"og:image:width\" content=\"1200\" > <meta property=\"og:image:height\" content=\"630\" > <meta property=\"og:url\" content=\"https://dmccreary.github.io/mkdocs-material-social/metadata-override-test/\" > <meta name=\"twitter:card\" content=\"summary_large_image\" > <meta name=\"twitter:title\" content=\"Social Image Preview Override From Markdown Metadata v18 - Mkdocs Material Social Card Testing\" > <meta name=\"twitter:description\" content=\"A custom description for this page.\" > <meta name=\"twitter:image\" content=\"https://dmccreary.github.io/mkdocs-material-social/assets/images/social/metadata-override-test.png\" >","title":"Social Tests"},{"location":"formatting-tests/social-test/#social-tests","text":"","title":"Social Tests"},{"location":"formatting-tests/social-test/#testing-your-social-media-previews","text":"There are many sites that will check for meta information in your HTML file. The prefix og is for the [Open Graph] standard. Metatags.io Open Graph Social Share Preview","title":"Testing Your Social Media Previews"},{"location":"formatting-tests/social-test/#open-graph-metadata","text":"These elements must be in the html/head section of your document. <meta property=\"og:type\" content=\"website\" > <meta property=\"og:title\" content=\"Social Image Preview Override From Markdown Metadata v18 - Mkdocs Material Social Card Testing\" > <meta property=\"og:description\" content=\"A custom description for this page.\" > <meta property=\"og:image\" content=\"https://dmccreary.github.io/mkdocs-material-social/assets/images/social/metadata-override-test.png\" > <meta property=\"og:image:type\" content=\"image/png\" > <meta property=\"og:image:width\" content=\"1200\" > <meta property=\"og:image:height\" content=\"630\" > <meta property=\"og:url\" content=\"https://dmccreary.github.io/mkdocs-material-social/metadata-override-test/\" > <meta name=\"twitter:card\" content=\"summary_large_image\" > <meta name=\"twitter:title\" content=\"Social Image Preview Override From Markdown Metadata v18 - Mkdocs Material Social Card Testing\" > <meta name=\"twitter:description\" content=\"A custom description for this page.\" > <meta name=\"twitter:image\" content=\"https://dmccreary.github.io/mkdocs-material-social/assets/images/social/metadata-override-test.png\" >","title":"Open Graph Metadata"},{"location":"glossary/","text":"","title":"Glossary"},{"location":"prompts/","text":"","title":"Index"},{"location":"prompts/discord-admin/","text":"Discord Admin !!! prompt I am a total rookie at running a Discourd server for a great group of people that are working together to build intelligent textbooks using Learning Graphs. What suggestions do you have for me to setup a great Discord site for these wonderful people from around the world? Response I'll help you create a comprehensive Discord server structure that caters to an international community focused on intelligent textbooks and learning graphs. Based on the context from your documents, I'll provide specific recommendations. Here's a suggested server structure and tips: Channel Categories and Channels: 1. Welcome & Information welcome - Server rules and introduction announcements - Important updates introductions - Where new members can introduce themselves resources - Pinned links to key documentation and tools 2. Project Discussion learning-graphs - Discussions about concept and learning graph development microsims - Channel for sharing and discussing p5.js simulations markdown-help - Support for markdown formatting questions mkdocs-material - Technical discussion about the Material theme implementation semantic-search - Discussions about embeddings and search implementations 3. Technical Support build-issues - Help with automatic builds and GitHub Actions analytics-questions - Support for implementing website analytics accessibility - Discussions about making content accessible globally 4. Content Creation glossary-development - Collaborative work on terminology (based on your detailed glossary) admonitions - Sharing best practices for using call-outs textbook-reviews - Peer review and feedback on content 5. International Collaboration timezone-coordination - Help members coordinate across time zones translations - Discussion of content localization regional-hubs - Sub-channels for different geographical regions Server Management Tips: Set up roles based on expertise: Learning Graph Expert MicroSim Developer Content Creator Technical Support Translation Contributor Create a bot that can: Automatically welcome new members Provide quick references to glossary terms Help with markdown formatting Regular Community Engagement: Host monthly show-and-tell sessions for new microsims Schedule \"office hours\" across different time zones Create weekly challenges for content creation Documentation: Pin important messages in each channel Maintain an up-to-date FAQ Create guides for common workflows","title":"Discord Admin"},{"location":"prompts/discord-admin/#discord-admin","text":"!!! prompt I am a total rookie at running a Discourd server for a great group of people that are working together to build intelligent textbooks using Learning Graphs. What suggestions do you have for me to setup a great Discord site for these wonderful people from around the world?","title":"Discord Admin"},{"location":"prompts/discord-admin/#response","text":"I'll help you create a comprehensive Discord server structure that caters to an international community focused on intelligent textbooks and learning graphs. Based on the context from your documents, I'll provide specific recommendations. Here's a suggested server structure and tips:","title":"Response"},{"location":"prompts/discord-admin/#channel-categories-and-channels","text":"","title":"Channel Categories and Channels:"},{"location":"prompts/discord-admin/#1-welcome-information","text":"welcome - Server rules and introduction announcements - Important updates introductions - Where new members can introduce themselves resources - Pinned links to key documentation and tools","title":"1. Welcome &amp; Information"},{"location":"prompts/discord-admin/#2-project-discussion","text":"learning-graphs - Discussions about concept and learning graph development microsims - Channel for sharing and discussing p5.js simulations markdown-help - Support for markdown formatting questions mkdocs-material - Technical discussion about the Material theme implementation semantic-search - Discussions about embeddings and search implementations","title":"2. Project Discussion"},{"location":"prompts/discord-admin/#3-technical-support","text":"build-issues - Help with automatic builds and GitHub Actions analytics-questions - Support for implementing website analytics accessibility - Discussions about making content accessible globally","title":"3. Technical Support"},{"location":"prompts/discord-admin/#4-content-creation","text":"glossary-development - Collaborative work on terminology (based on your detailed glossary) admonitions - Sharing best practices for using call-outs textbook-reviews - Peer review and feedback on content","title":"4. Content Creation"},{"location":"prompts/discord-admin/#5-international-collaboration","text":"timezone-coordination - Help members coordinate across time zones translations - Discussion of content localization regional-hubs - Sub-channels for different geographical regions","title":"5. International Collaboration"},{"location":"prompts/discord-admin/#server-management-tips","text":"Set up roles based on expertise: Learning Graph Expert MicroSim Developer Content Creator Technical Support Translation Contributor Create a bot that can: Automatically welcome new members Provide quick references to glossary terms Help with markdown formatting Regular Community Engagement: Host monthly show-and-tell sessions for new microsims Schedule \"office hours\" across different time zones Create weekly challenges for content creation Documentation: Pin important messages in each channel Maintain an up-to-date FAQ Create guides for common workflows","title":"Server Management Tips:"},{"location":"prompts/feature-mapping/","text":"Feature Mapping Sample Prompt !!! prompt I have an new online textbook I would like to create with the mkdocs website build tool. I am also using the material theme. Can you tell me what features I should use to do the following functions? If you find a function, please provide a sample of how the mkdocs.yml file would be configured to use this function. Here are the functions I would like to have in my online textbook: - Powerful and easy to use Search - Site Navigation - MicroSims - adding interactive simulations to any page using p5.js or iframes - Glossary of Terms - Table of Contents - Link CHecker - Social Media Previews - Rendering Formulas - Code Highlighting - License Management with a link to the license in the footer of each page - Site Analytics with Google Analytics Response Certainly! Below is a detailed guide on how to implement each of the functions you've listed in your MkDocs project using the Material theme. I've included sample mkdocs.yml configurations and explanations for each feature. 1. Powerful and Easy-to-Use Search Feature: Enhanced search functionality with search term highlighting and suggestions. Configuration: theme: name: material features: - search.highlight # Highlights search terms in the results - search.suggest # Provides search suggestions as you type extra: search: language: 'en' # Specify language for better search indexing Explanation: The Material theme enhances the default MkDocs search using Lunr.js. Enabling search.highlight and search.suggest improves the user experience. Setting the search language optimizes indexing and results for your audience. 2. Site Navigation Feature: Organized navigation structure for easy content access. Configuration: nav: - Home: index.md - Introduction: introduction.md - Chapters: - Chapter 1: chapters/chapter1.md - Chapter 2: chapters/chapter2.md - Glossary: glossary.md Explanation: The nav section defines the structure of your site's navigation menu. Organize content hierarchically for intuitive access. Group related pages under nested sections. 3. MicroSims - Interactive Simulations with p5.js or iframes Feature: Embed interactive simulations directly into your pages. Configuration: No specific mkdocs.yml configuration is required for this feature. Markdown Usage: <iframe src=\"path/to/your/sketch.html\" width=\"600\" height=\"400\"></iframe> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js\"></script> <script> // Your p5.js code here </script> Explanation: MkDocs allows raw HTML in Markdown files by default. You can embed simulations using <iframe> or include scripts directly. Ensure that security settings allow embedding scripts if including JavaScript directly. 4. Glossary of Terms Feature: Define terms and provide tooltips or a dedicated glossary page. Configuration: markdown_extensions: - abbr # Supports abbreviations with tooltips Markdown Usage: The HTML specification is maintained by the W3C. *[HTML]: HyperText Markup Language *[W3C]: World Wide Web Consortium Explanation: The abbr extension enables abbreviation definitions with hover-over tooltips. Alternatively, create a glossary.md page and link terms to it. 5. Table of Contents Feature: Automatically generated table of contents for each page. Configuration: theme: name: material features: - toc.integrate # Integrates TOC into the page content markdown_extensions: - toc: permalink: true # Adds permalinks to headings Explanation: The toc.integrate feature embeds the table of contents within the page. The toc extension generates the TOC based on headings in your Markdown files. 6. Link Checker Feature: Automatically check for broken internal and external links. Configuration: plugins: - search - link-checker: timeout: 5 retries: 2 crawl: false # Set to true to check external links Explanation: The link-checker plugin scans your site for broken links during the build process. Configure crawl to true if you want to check external links as well. Adjust timeout and retries as needed. 7. Social Media Previews Feature: Generate rich previews when your site is shared on social media platforms. Configuration: extra: social: image: images/social_preview.png # Path to your preview image description: \"An engaging description of your textbook.\" plugins: - meta Markdown Usage (at the top of each page if needed): --- title: \"Page Title\" description: \"Page-specific description for social media.\" image: \"images/page_specific_preview.png\" --- Explanation: Set global social media preview settings under extra . Use the meta plugin to allow per-page metadata overrides. Ensure your preview images meet the recommended dimensions for social platforms (e.g., 1200x630 pixels for Facebook). 8. Rendering Formulas Feature: Display mathematical formulas using KaTeX. Configuration: markdown_extensions: - pymdownx.arithmatex: inline_syntax: ['$', '$$'] # Define inline and block delimiters generic: true extra_javascript: - https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js - https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.js extra_css: - https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css Explanation: The pymdownx.arithmatex extension enables LaTeX-style math rendering. Include KaTeX scripts and stylesheets via extra_javascript and extra_css . Use $...$ for inline math and $$...$$ for display math in your Markdown files. 9. Code Highlighting Feature: Syntax highlighting for code blocks. Configuration: markdown_extensions: - pymdownx.superfences # Enhanced code block handling theme: name: material codehilite: guess_lang: false linenums: true # Adds line numbers to code blocks Explanation: The pymdownx.superfences extension provides advanced code block features. Set linenums to true to display line numbers. Specify the language in code blocks for accurate syntax highlighting: ```python def hello_world(): print(\"Hello, world!\") * * * * ### **10. License Management with Footer Link** **Feature:** Display a license notice with a link in the footer of each page. **Configuration:** ```yaml extra: legal: license: name: 'Creative Commons Attribution-NonCommercial 4.0 International License' url: 'https://creativecommons.org/licenses/by-nc/4.0/' Explanation: Use the extra configuration to add custom data. The Material theme can be customized to display this information in the footer. You may need to create or modify a custom footer template to include the license link. Custom Footer Template (Optional): Create a file named partials/footer.html in your overrides directory with the following content: {% if config.extra.legal.license %} <div class=\"md-footer-legal\"> <a href=\"{{ config.extra.legal.license.url }}\">{{ config.extra.legal.license.name }}</a> </div> {% endif %} And update your mkdocs.yml : theme: name: material custom_dir: overrides # Point to your overrides directory 11. Site Analytics with Google Analytics Feature: Track site usage with Google Analytics. Configuration (for GA4): extra: analytics: provider: google property: G-XXXXXXXXXX # Replace with your GA4 Measurement ID Explanation: The Material theme supports Google Analytics 4 (GA4) natively. Set the provider to google and provide your property ID. This injects the necessary tracking code into your site's pages. Additional Notes: Plugins: Ensure all plugins used are installed via pip . For example: pip install mkdocs-material pymdown-extensions mkdocs-link-checker Security: Be cautious when embedding scripts or iframes. Ensure they come from trusted sources to maintain site security. Documentation: Refer to the MkDocs Material documentation for more details and advanced configurations. By configuring your mkdocs.yml file as shown and utilizing the provided Markdown syntax, you should be able to implement all the desired features in your online textbook. Let me know if you need further assistance with any of these steps!","title":"Feature Mapping"},{"location":"prompts/feature-mapping/#feature-mapping","text":"","title":"Feature Mapping"},{"location":"prompts/feature-mapping/#sample-prompt","text":"!!! prompt I have an new online textbook I would like to create with the mkdocs website build tool. I am also using the material theme. Can you tell me what features I should use to do the following functions? If you find a function, please provide a sample of how the mkdocs.yml file would be configured to use this function. Here are the functions I would like to have in my online textbook: - Powerful and easy to use Search - Site Navigation - MicroSims - adding interactive simulations to any page using p5.js or iframes - Glossary of Terms - Table of Contents - Link CHecker - Social Media Previews - Rendering Formulas - Code Highlighting - License Management with a link to the license in the footer of each page - Site Analytics with Google Analytics","title":"Sample Prompt"},{"location":"prompts/feature-mapping/#response","text":"Certainly! Below is a detailed guide on how to implement each of the functions you've listed in your MkDocs project using the Material theme. I've included sample mkdocs.yml configurations and explanations for each feature.","title":"Response"},{"location":"prompts/feature-mapping/#1-powerful-and-easy-to-use-search","text":"Feature: Enhanced search functionality with search term highlighting and suggestions. Configuration: theme: name: material features: - search.highlight # Highlights search terms in the results - search.suggest # Provides search suggestions as you type extra: search: language: 'en' # Specify language for better search indexing Explanation: The Material theme enhances the default MkDocs search using Lunr.js. Enabling search.highlight and search.suggest improves the user experience. Setting the search language optimizes indexing and results for your audience.","title":"1. Powerful and Easy-to-Use Search"},{"location":"prompts/feature-mapping/#2-site-navigation","text":"Feature: Organized navigation structure for easy content access. Configuration: nav: - Home: index.md - Introduction: introduction.md - Chapters: - Chapter 1: chapters/chapter1.md - Chapter 2: chapters/chapter2.md - Glossary: glossary.md Explanation: The nav section defines the structure of your site's navigation menu. Organize content hierarchically for intuitive access. Group related pages under nested sections.","title":"2. Site Navigation"},{"location":"prompts/feature-mapping/#3-microsims-interactive-simulations-with-p5js-or-iframes","text":"Feature: Embed interactive simulations directly into your pages. Configuration: No specific mkdocs.yml configuration is required for this feature. Markdown Usage: <iframe src=\"path/to/your/sketch.html\" width=\"600\" height=\"400\"></iframe> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js\"></script> <script> // Your p5.js code here </script> Explanation: MkDocs allows raw HTML in Markdown files by default. You can embed simulations using <iframe> or include scripts directly. Ensure that security settings allow embedding scripts if including JavaScript directly.","title":"3. MicroSims - Interactive Simulations with p5.js or iframes"},{"location":"prompts/feature-mapping/#4-glossary-of-terms","text":"Feature: Define terms and provide tooltips or a dedicated glossary page. Configuration: markdown_extensions: - abbr # Supports abbreviations with tooltips Markdown Usage: The HTML specification is maintained by the W3C. *[HTML]: HyperText Markup Language *[W3C]: World Wide Web Consortium Explanation: The abbr extension enables abbreviation definitions with hover-over tooltips. Alternatively, create a glossary.md page and link terms to it.","title":"4. Glossary of Terms"},{"location":"prompts/feature-mapping/#5-table-of-contents","text":"Feature: Automatically generated table of contents for each page. Configuration: theme: name: material features: - toc.integrate # Integrates TOC into the page content markdown_extensions: - toc: permalink: true # Adds permalinks to headings Explanation: The toc.integrate feature embeds the table of contents within the page. The toc extension generates the TOC based on headings in your Markdown files.","title":"5. Table of Contents"},{"location":"prompts/feature-mapping/#6-link-checker","text":"Feature: Automatically check for broken internal and external links. Configuration: plugins: - search - link-checker: timeout: 5 retries: 2 crawl: false # Set to true to check external links Explanation: The link-checker plugin scans your site for broken links during the build process. Configure crawl to true if you want to check external links as well. Adjust timeout and retries as needed.","title":"6. Link Checker"},{"location":"prompts/feature-mapping/#7-social-media-previews","text":"Feature: Generate rich previews when your site is shared on social media platforms. Configuration: extra: social: image: images/social_preview.png # Path to your preview image description: \"An engaging description of your textbook.\" plugins: - meta Markdown Usage (at the top of each page if needed): --- title: \"Page Title\" description: \"Page-specific description for social media.\" image: \"images/page_specific_preview.png\" --- Explanation: Set global social media preview settings under extra . Use the meta plugin to allow per-page metadata overrides. Ensure your preview images meet the recommended dimensions for social platforms (e.g., 1200x630 pixels for Facebook).","title":"7. Social Media Previews"},{"location":"prompts/feature-mapping/#8-rendering-formulas","text":"Feature: Display mathematical formulas using KaTeX. Configuration: markdown_extensions: - pymdownx.arithmatex: inline_syntax: ['$', '$$'] # Define inline and block delimiters generic: true extra_javascript: - https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.js - https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/contrib/auto-render.min.js extra_css: - https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css Explanation: The pymdownx.arithmatex extension enables LaTeX-style math rendering. Include KaTeX scripts and stylesheets via extra_javascript and extra_css . Use $...$ for inline math and $$...$$ for display math in your Markdown files.","title":"8. Rendering Formulas"},{"location":"prompts/feature-mapping/#9-code-highlighting","text":"Feature: Syntax highlighting for code blocks. Configuration: markdown_extensions: - pymdownx.superfences # Enhanced code block handling theme: name: material codehilite: guess_lang: false linenums: true # Adds line numbers to code blocks Explanation: The pymdownx.superfences extension provides advanced code block features. Set linenums to true to display line numbers. Specify the language in code blocks for accurate syntax highlighting: ```python def hello_world(): print(\"Hello, world!\") * * * * ### **10. License Management with Footer Link** **Feature:** Display a license notice with a link in the footer of each page. **Configuration:** ```yaml extra: legal: license: name: 'Creative Commons Attribution-NonCommercial 4.0 International License' url: 'https://creativecommons.org/licenses/by-nc/4.0/' Explanation: Use the extra configuration to add custom data. The Material theme can be customized to display this information in the footer. You may need to create or modify a custom footer template to include the license link. Custom Footer Template (Optional): Create a file named partials/footer.html in your overrides directory with the following content: {% if config.extra.legal.license %} <div class=\"md-footer-legal\"> <a href=\"{{ config.extra.legal.license.url }}\">{{ config.extra.legal.license.name }}</a> </div> {% endif %} And update your mkdocs.yml : theme: name: material custom_dir: overrides # Point to your overrides directory","title":"9. Code Highlighting"},{"location":"prompts/feature-mapping/#11-site-analytics-with-google-analytics","text":"Feature: Track site usage with Google Analytics. Configuration (for GA4): extra: analytics: provider: google property: G-XXXXXXXXXX # Replace with your GA4 Measurement ID Explanation: The Material theme supports Google Analytics 4 (GA4) natively. Set the provider to google and provide your property ID. This injects the necessary tracking code into your site's pages. Additional Notes: Plugins: Ensure all plugins used are installed via pip . For example: pip install mkdocs-material pymdown-extensions mkdocs-link-checker Security: Be cautious when embedding scripts or iframes. Ensure they come from trusted sources to maintain site security. Documentation: Refer to the MkDocs Material documentation for more details and advanced configurations. By configuring your mkdocs.yml file as shown and utilizing the provided Markdown syntax, you should be able to implement all the desired features in your online textbook. Let me know if you need further assistance with any of these steps!","title":"11. Site Analytics with Google Analytics"},{"location":"prompts/generate-cover-image/","text":"Generate Cover Image !!! prompt Please create an image for the following website. Do not place any text in the image. This website is part of a series of resources to help teachers from around the world create the foundation for free and open intelligent textbooks. There are many ways to store intelligent textbooks on a website. Many of our teachers don't want to pay a hosting service for hosting their content. Since GitHub Pages is free, we focussed on GitHub Pages publishing tools that support Markdown, code highlighting and equations on GitHub. When we gave ChatGPT the following requirements: - Content is stored in Markdown format - Easy publishing to GitHub pages - Ability to format code - Ability to format equations - Here is the summary of ChatGPT's recommendation: MkDocs with the Material Theme is the most aligned with your requirements due to its simplicity, robust features, and ease of deployment to GitHub Pages. It handles code highlighting and mathematical formulas gracefully and has a straightforward configuration process. We have also found the mkdocs-material support extremely good, with our questions often being answered within hours. Because of the close match of mkdocs-material's features with our intelligent textbook requirements, we have created about 20 sample websites that test these tools. We have also found that mkdocs-material can be quickly extended to support the features we need in advanced intelligent textbooks. Note that these tools generate a 2.9 level intelligent textbook. THis is up to but does not include personalization to the knowledge of the student. This gets your textbook ready to move to level 3, where a knowledge graph of what concepts they are aware of are used to generate personalized content. We hope the glossary and tutorials we provide are useful. Result","title":"Generate Cover Image"},{"location":"prompts/generate-cover-image/#generate-cover-image","text":"!!! prompt Please create an image for the following website. Do not place any text in the image. This website is part of a series of resources to help teachers from around the world create the foundation for free and open intelligent textbooks. There are many ways to store intelligent textbooks on a website. Many of our teachers don't want to pay a hosting service for hosting their content. Since GitHub Pages is free, we focussed on GitHub Pages publishing tools that support Markdown, code highlighting and equations on GitHub. When we gave ChatGPT the following requirements: - Content is stored in Markdown format - Easy publishing to GitHub pages - Ability to format code - Ability to format equations - Here is the summary of ChatGPT's recommendation: MkDocs with the Material Theme is the most aligned with your requirements due to its simplicity, robust features, and ease of deployment to GitHub Pages. It handles code highlighting and mathematical formulas gracefully and has a straightforward configuration process. We have also found the mkdocs-material support extremely good, with our questions often being answered within hours. Because of the close match of mkdocs-material's features with our intelligent textbook requirements, we have created about 20 sample websites that test these tools. We have also found that mkdocs-material can be quickly extended to support the features we need in advanced intelligent textbooks. Note that these tools generate a 2.9 level intelligent textbook. THis is up to but does not include personalization to the knowledge of the student. This gets your textbook ready to move to level 3, where a knowledge graph of what concepts they are aware of are used to generate personalized content. We hope the glossary and tutorials we provide are useful.","title":"Generate Cover Image"},{"location":"prompts/generate-cover-image/#result","text":"","title":"Result"},{"location":"prompts/generate-logo/","text":"Generate a Logo and Favicon In this section we will walk through the steps to create a logo for the book and use this logo as the favicon for the website. Prompt !!! prompt Please generate a minimalistic image of a orange book with the lowercase letter \"i\" on it. Use blue for the background. Response Adding Logo to the Mkdocs.yml theme: name: material extra_css: - styles/custom.css logo: img/logo.png favicon: img/favicon.ico Generating Additional Favicon Files I use a website called favicon.io which has a free tool called Favicon Converter. https://favicon.io/favicon-converter/ I just drag the logo to that site and click the \"download\" button. This will generate a zip file with different sizes of the icons for the book in both png and icon formats. android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon.ico site.webmanifest We only need a single file called favicon.ico. Place this file in the docs/img directory. The other files can also be copied with the exception of the site.webmanifest file. I often rename them using the logo-Widthxheight.png format. So for example, the apple-touch-icon.png file is renamed logo-180x180.png . I typically rename the android-chrome-192x192.png to be site-logo-192x192.png. CSS for the Logo in the Upper Left .md-header__button.md-logo { margin: 0; padding: 0; } .md-header__button.md-logo img, .md-header__button.md-logo svg { height: 50px; width: 50px; }","title":"Generate a Logo and Favicon"},{"location":"prompts/generate-logo/#generate-a-logo-and-favicon","text":"In this section we will walk through the steps to create a logo for the book and use this logo as the favicon for the website.","title":"Generate a Logo and Favicon"},{"location":"prompts/generate-logo/#prompt","text":"!!! prompt Please generate a minimalistic image of a orange book with the lowercase letter \"i\" on it. Use blue for the background.","title":"Prompt"},{"location":"prompts/generate-logo/#response","text":"","title":"Response"},{"location":"prompts/generate-logo/#adding-logo-to-the-mkdocsyml","text":"theme: name: material extra_css: - styles/custom.css logo: img/logo.png favicon: img/favicon.ico","title":"Adding Logo to the Mkdocs.yml"},{"location":"prompts/generate-logo/#generating-additional-favicon-files","text":"I use a website called favicon.io which has a free tool called Favicon Converter. https://favicon.io/favicon-converter/ I just drag the logo to that site and click the \"download\" button. This will generate a zip file with different sizes of the icons for the book in both png and icon formats. android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon.ico site.webmanifest We only need a single file called favicon.ico. Place this file in the docs/img directory. The other files can also be copied with the exception of the site.webmanifest file. I often rename them using the logo-Widthxheight.png format. So for example, the apple-touch-icon.png file is renamed logo-180x180.png . I typically rename the android-chrome-192x192.png to be site-logo-192x192.png.","title":"Generating Additional Favicon Files"},{"location":"prompts/generate-logo/#css-for-the-logo-in-the-upper-left","text":".md-header__button.md-logo { margin: 0; padding: 0; } .md-header__button.md-logo img, .md-header__button.md-logo svg { height: 50px; width: 50px; }","title":"CSS for the Logo in the Upper Left"},{"location":"prompts/level-questions/","text":"Intelligent Textbook Level Questions We need an objective that would allow a instructor or a student to assess the \"level\" of an intelligent textbook. Here is a set of prompts that will generate the questions for this assessment and then the HTML form that can be used to score the question results. The result of the questions is a web form with JavaScript that will return a score of 1-5 for a textbook. Prompt !!! prompt I am working on a project to help educators and students evaluate the score of an intelligent textbook. We have developed the following \"Bands\" for general scoring, but I would like you to help generate a series of questions to help a specific textbook be assigned to a level. So please generate a list of 20 questions that would be used to assign the level of a textbook. For each question, generate rules that would discriminate the levels. Use questions that have the ability to discriminate each level. Here is a list of the levels: **Level 0** - A printed textbook. Give a higher score to a textbook that has a high quality table of contents, index, glossary and detailed annotated biography for students that want to learn more. **Level 1** - An online PDF or PPT of a textbook. Give a slightly higher score to versions that have high-quality search and many internal and external links. **Level 2** - A website with rich media including videos, animations and simulations but no personalization. Give a higher score to great navigation, deep links, great animations and simulations and a tools like linked word clouds, concept graphs and FAQ. Level 2 books are not personalized with any student-spcific information. **Level 3** - A website that is connected to a learning management systems that has knowledge of each person's current knowledge about concepts and learning goals **Level 4** - A website that includes a conversational interface such as a chatbot. The chabot can answer questions given your personal knowledge. It can also recommend content for a topic. **Level 5** - A fully intelligent textbook that can answer questions, suggest learning paths and provide detailed recommendations for content. It uses reinforcement learning to continually learn about what learning paths work for students. It can also generate customized lesson plans and generate new animations and simulations of the real world on demand. Response Below is a set of 20 questions designed to help determine the \"intelligence\" level of a textbook according to the given bands. Each question focuses on a feature or capability that differentiates one level from another. For each question, there are guidelines on how the presence, quality, or sophistication of that feature might map to one of the six levels (0 to 5). Key to Levels: Level 0: Printed textbook (High-quality static reference tools) Level 1: Online PDF/PPT (Basic digital format, possibly with search and simple links) Level 2: Website with rich media (videos, animations, simulations, interactive navigation), but no personalization Level 3: Website integrated with an LMS (knows students' progress/concepts) Level 4: Website with a conversational interface (chatbot) that uses personal knowledge Level 5: Fully intelligent textbook (suggesting paths, reinforcement learning, generating new content/visualizations on demand) 1. Table of Contents, Index, Glossary Quality Question: How comprehensive and well-structured are the textbook's table of contents, index, and glossary? Discrimination Rules: Level 0: Detailed, well-formatted table of contents, index, and glossary present in a print textbook. Level 1+: Basic digital TOC and glossary may be present, but does not surpass the printed quality. If the textbook excels only in static reference quality (no interactivity), it's likely Level 0. 2. Availability of Digital Format and Simple Search Question: Is the textbook available in a digital format with a basic keyword search function? Discrimination Rules: Level 0: Not available digitally, or only as a scanned static PDF without search. Level 1: Available as a digital PDF or PPT with basic keyword search, possibly simple internal links. Higher levels also have digital formats, but if only a basic search is present (no personalization, no rich media), Level 1 is indicated. 3. Presence and Quality of Hyperlinks (Internal and External) Question: Does the resource contain clickable links that connect to related sections or external references? Discrimination Rules: Level 0: No hyperlinks (print only). Level 1: Has basic hyperlinks (e.g., from a digital PDF's table of contents to chapters). Level 2+: Enhanced hyperlinking including deep internal cross-references and external resource links is common, but if only simple links are present, that suggests Level 1. 4. Inclusion of Rich Media (Videos, Animations, Simulations) Question: Does the resource integrate videos, animations, or simulations directly into the learning material? Discrimination Rules: Level 0-1: No embedded rich media, or only static images. Level 2: Multiple embedded videos, animations, simulations that support the text. Level 3-5: Will also have rich media, but for discriminating Level 2, focus on presence of rich media without personalization. 5. Interactivity and Navigational Tools Question: How interactive and navigable is the resource? Does it provide advanced navigation tools like concept maps, word clouds, or FAQ sections? Discrimination Rules: Level 0-1: Limited to simple linear navigation (page turning, basic scroll). Level 2: Offers concept graphs, linked word clouds, advanced FAQ pages, and dynamic navigation menus. Level 3-5: Similar navigation exists, but the presence of personalization or intelligence must be examined in other questions. 6. Personalization or Adaptation of Content Question: Does the textbook adapt its content based on an individual student's learning profile, prior knowledge, or assessment data? Discrimination Rules: Level 0-2: No personalization; same content for all users. Level 3: Content or navigation adjusts based on student progress data from an LMS. Level 4-5: Personalized recommendations or conversation-based personalization is evident. 7. Integration with Learning Management Systems (LMS) Question: Is the textbook integrated with an LMS to track individual learner progress and adjust experiences? Discrimination Rules: Level 0-2: No LMS integration. Level 3: Integrated with LMS, uses learner data to guide content selection. Level 4-5: LMS integration plus more advanced, intelligent personalization or conversational interfaces. 8. Ability to Assess Student Knowledge Question: Does the textbook include quizzes, assessments, or tools that adapt based on the student's performance? Discrimination Rules: Level 0-1: No adaptive assessment---may only offer static questions at the end of chapters. Level 2: Possibly interactive quizzes, but not adaptive based on user profile. Level 3: Adaptive assessments informed by LMS data. Level 4-5: Assessments dynamically adjust based on a richer student model and can suggest new paths or respond to queries conversationally. 9. Conversational Interface or Chatbot Presence Question: Is there a built-in conversational agent that can answer student questions directly? Discrimination Rules: Level 0-3: No conversational interface. Level 4: A chatbot that can answer questions based on personal user data and recommend relevant topics. Level 5: A chatbot with advanced reasoning, capable of generating entirely new content/visualizations on demand. 10. Ability to Suggest Next Steps or Learning Paths Question: Can the textbook suggest what a student should study next based on their interactions or mastery? Discrimination Rules: Level 0-2: No suggestion of personalized next steps. Level 3: Basic suggestions informed by LMS data. Level 4: Conversational suggestions tailored to the user's performance. Level 5: Intelligent, continuously improving recommendations (reinforcement learning) that adapt learning paths dynamically. 11. Dynamic Content Generation Question: Can the resource generate new examples, problems, or explanations on demand rather than just serving static content? Discrimination Rules: Level 0-3: Content is predefined and static. Level 4: Some dynamic retrieval of suitable content may occur, but primarily curated. Level 5: Fully dynamic content generation, including new examples, problems, and custom explanations. 12. Ability to Create Custom Visualizations or Simulations on Demand Question: Can the textbook create new animations, simulations, or visual content in response to user queries or learning needs? Discrimination Rules: Level 0-2: Only preset images/videos. Level 3-4: Might select the best pre-existing simulations based on user need. Level 5: Can generate entirely new visualizations or simulations dynamically. 13. Reinforcement Learning and Continuous Improvement Question: Does the system use data from student interactions over time to improve its recommendations or content delivery? Discrimination Rules: Level 0-4: No true reinforcement learning capabilities. At best, these levels adapt to user profiles statically or rule-based. Level 5: Employs reinforcement learning to continually refine learning paths and strategies for individual and aggregated learners. 14. External Resource Integration Question: Does the textbook integrate with external resources (like encyclopedias, research databases, or educational tools) in a context-aware manner? Discrimination Rules: Level 0: Only static references or a printed bibliography. Level 1: Possibly static hyperlinks to external sites. Level 2: Rich external link integration within an interactive website. Level 3-5: External resources chosen or recommended based on the student's profile (increasing personalization with each higher level). 15. Ability to Handle User Inquiries Beyond Pre-Defined FAQ Question: Can the textbook address student questions that aren't explicitly covered in the predefined text (e.g., open-ended queries)? Discrimination Rules: Level 0-2: Only predefined content, no handling of open-ended queries. Level 3: Might direct students to sections based on knowledge of their gaps but not truly \"answer\" novel queries. Level 4: Conversational agent attempts to answer new questions contextually. Level 5: Conversational agent with advanced reasoning and content generation responds fully and contextually, even creating new explanatory materials. 16. Support for Multiple Learning Styles Question: Does the textbook adjust or present content to support various learning styles (visual, auditory, kinesthetic) based on the learner? Discrimination Rules: Level 0-2: Static presentation with some variety (images, text, videos), but not tailored to an individual's style. Level 3-4: Selection of content type may adjust based on user performance or preferences. Level 5: Dynamically generates or selects content formats best suited to the individual's learning patterns as observed and improved over time. 17. Integration of Learner Profiles (Goals, Interests, Past Performance) Question: Can the textbook use the learner's stated goals, interests, or performance history to prioritize or highlight certain topics? Discrimination Rules: Level 0-2: No user-specific profiling. Level 3: Basic use of learner profile from LMS (e.g., knowing which modules the student has completed). Level 4: Conversationally tailors suggestions and answers based on the learner's profile. Level 5: Sophisticated, data-driven personalization and continuous updating of learner profiles to refine suggestions. 18. Depth of Internal Cross-Referencing Question: Does the textbook dynamically highlight related concepts and prerequisites based on the user's current focus? Discrimination Rules: Level 0-1: Static cross-references. Level 2: Rich static cross-referencing with interactive concept maps. Level 3+: Cross-references informed by user knowledge state; the textbook might highlight the most relevant concepts for that learner. Level 4-5: Uses conversation or intelligence to highlight or generate links specifically tuned to individual needs. 19. FAQ and Trouble-Shooting Adaptation Question: Are FAQs or help features adapted to the learner's known difficulties or frequently asked questions from similar users? Discrimination Rules: Level 0-2: Static FAQ sections. Level 3: FAQ suggestions pulled from common misunderstandings related to user's performance. Level 4-5: Adaptive FAQ that can expand or generate new answers in response to user input and historical data. 20. Generation of Custom Lesson Plans and Curricula Question: Can the resource create an entirely custom lesson plan or course sequence tailored to an individual's learning trajectory? Discrimination Rules: Level 0-3: Content is structured, but no custom lesson plans are generated. At best, Level 3 might reorder suggestions from a fixed set. Level 4: Might recommend sequences conversationally, but still largely draws from predefined options. Level 5: Fully generates personalized lesson plans and sequences dynamically, informed by continual learning and reinforcement feedback loops. Overall Usage: By examining which level of capability applies to each question (0 through 5), an evaluator can determine the textbook's strongest match. A textbook that consistently answers in the realm of basic static features (0-1) remains at the lower levels. As it exhibits more interactivity (2), personalization and LMS integration (3), conversational capabilities (4), and finally dynamic, intelligent adaptation with generated content and reinforcement learning (5), the classification becomes clear. Generate HTML Form !!! prompt Now create an single-page HTML form that implements these 20 questions. Use JavaScript within the HTML file to calculate progress on the number of questions remaining and give a running total of the level. After the last question, add a \"Calculate Score\" that will calculate the \"intelligence score\" of of textbook and give an explanation of how the score was calculated. Make the title of the page be \"Calculating Intelligence Level of A Textbook\". Sample HTML Form Intelligent Textbook Level Questions Level Questions (prior version)","title":"Intelligent Textbook Level Questions"},{"location":"prompts/level-questions/#intelligent-textbook-level-questions","text":"We need an objective that would allow a instructor or a student to assess the \"level\" of an intelligent textbook. Here is a set of prompts that will generate the questions for this assessment and then the HTML form that can be used to score the question results. The result of the questions is a web form with JavaScript that will return a score of 1-5 for a textbook.","title":"Intelligent Textbook Level Questions"},{"location":"prompts/level-questions/#prompt","text":"!!! prompt I am working on a project to help educators and students evaluate the score of an intelligent textbook. We have developed the following \"Bands\" for general scoring, but I would like you to help generate a series of questions to help a specific textbook be assigned to a level. So please generate a list of 20 questions that would be used to assign the level of a textbook. For each question, generate rules that would discriminate the levels. Use questions that have the ability to discriminate each level. Here is a list of the levels: **Level 0** - A printed textbook. Give a higher score to a textbook that has a high quality table of contents, index, glossary and detailed annotated biography for students that want to learn more. **Level 1** - An online PDF or PPT of a textbook. Give a slightly higher score to versions that have high-quality search and many internal and external links. **Level 2** - A website with rich media including videos, animations and simulations but no personalization. Give a higher score to great navigation, deep links, great animations and simulations and a tools like linked word clouds, concept graphs and FAQ. Level 2 books are not personalized with any student-spcific information. **Level 3** - A website that is connected to a learning management systems that has knowledge of each person's current knowledge about concepts and learning goals **Level 4** - A website that includes a conversational interface such as a chatbot. The chabot can answer questions given your personal knowledge. It can also recommend content for a topic. **Level 5** - A fully intelligent textbook that can answer questions, suggest learning paths and provide detailed recommendations for content. It uses reinforcement learning to continually learn about what learning paths work for students. It can also generate customized lesson plans and generate new animations and simulations of the real world on demand.","title":"Prompt"},{"location":"prompts/level-questions/#response","text":"Below is a set of 20 questions designed to help determine the \"intelligence\" level of a textbook according to the given bands. Each question focuses on a feature or capability that differentiates one level from another. For each question, there are guidelines on how the presence, quality, or sophistication of that feature might map to one of the six levels (0 to 5). Key to Levels: Level 0: Printed textbook (High-quality static reference tools) Level 1: Online PDF/PPT (Basic digital format, possibly with search and simple links) Level 2: Website with rich media (videos, animations, simulations, interactive navigation), but no personalization Level 3: Website integrated with an LMS (knows students' progress/concepts) Level 4: Website with a conversational interface (chatbot) that uses personal knowledge Level 5: Fully intelligent textbook (suggesting paths, reinforcement learning, generating new content/visualizations on demand)","title":"Response"},{"location":"prompts/level-questions/#1-table-of-contents-index-glossary-quality","text":"Question: How comprehensive and well-structured are the textbook's table of contents, index, and glossary? Discrimination Rules: Level 0: Detailed, well-formatted table of contents, index, and glossary present in a print textbook. Level 1+: Basic digital TOC and glossary may be present, but does not surpass the printed quality. If the textbook excels only in static reference quality (no interactivity), it's likely Level 0.","title":"1. Table of Contents, Index, Glossary Quality"},{"location":"prompts/level-questions/#2-availability-of-digital-format-and-simple-search","text":"Question: Is the textbook available in a digital format with a basic keyword search function? Discrimination Rules: Level 0: Not available digitally, or only as a scanned static PDF without search. Level 1: Available as a digital PDF or PPT with basic keyword search, possibly simple internal links. Higher levels also have digital formats, but if only a basic search is present (no personalization, no rich media), Level 1 is indicated.","title":"2. Availability of Digital Format and Simple Search"},{"location":"prompts/level-questions/#3-presence-and-quality-of-hyperlinks-internal-and-external","text":"Question: Does the resource contain clickable links that connect to related sections or external references? Discrimination Rules: Level 0: No hyperlinks (print only). Level 1: Has basic hyperlinks (e.g., from a digital PDF's table of contents to chapters). Level 2+: Enhanced hyperlinking including deep internal cross-references and external resource links is common, but if only simple links are present, that suggests Level 1.","title":"3. Presence and Quality of Hyperlinks (Internal and External)"},{"location":"prompts/level-questions/#4-inclusion-of-rich-media-videos-animations-simulations","text":"Question: Does the resource integrate videos, animations, or simulations directly into the learning material? Discrimination Rules: Level 0-1: No embedded rich media, or only static images. Level 2: Multiple embedded videos, animations, simulations that support the text. Level 3-5: Will also have rich media, but for discriminating Level 2, focus on presence of rich media without personalization.","title":"4. Inclusion of Rich Media (Videos, Animations, Simulations)"},{"location":"prompts/level-questions/#5-interactivity-and-navigational-tools","text":"Question: How interactive and navigable is the resource? Does it provide advanced navigation tools like concept maps, word clouds, or FAQ sections? Discrimination Rules: Level 0-1: Limited to simple linear navigation (page turning, basic scroll). Level 2: Offers concept graphs, linked word clouds, advanced FAQ pages, and dynamic navigation menus. Level 3-5: Similar navigation exists, but the presence of personalization or intelligence must be examined in other questions.","title":"5. Interactivity and Navigational Tools"},{"location":"prompts/level-questions/#6-personalization-or-adaptation-of-content","text":"Question: Does the textbook adapt its content based on an individual student's learning profile, prior knowledge, or assessment data? Discrimination Rules: Level 0-2: No personalization; same content for all users. Level 3: Content or navigation adjusts based on student progress data from an LMS. Level 4-5: Personalized recommendations or conversation-based personalization is evident.","title":"6. Personalization or Adaptation of Content"},{"location":"prompts/level-questions/#7-integration-with-learning-management-systems-lms","text":"Question: Is the textbook integrated with an LMS to track individual learner progress and adjust experiences? Discrimination Rules: Level 0-2: No LMS integration. Level 3: Integrated with LMS, uses learner data to guide content selection. Level 4-5: LMS integration plus more advanced, intelligent personalization or conversational interfaces.","title":"7. Integration with Learning Management Systems (LMS)"},{"location":"prompts/level-questions/#8-ability-to-assess-student-knowledge","text":"Question: Does the textbook include quizzes, assessments, or tools that adapt based on the student's performance? Discrimination Rules: Level 0-1: No adaptive assessment---may only offer static questions at the end of chapters. Level 2: Possibly interactive quizzes, but not adaptive based on user profile. Level 3: Adaptive assessments informed by LMS data. Level 4-5: Assessments dynamically adjust based on a richer student model and can suggest new paths or respond to queries conversationally.","title":"8. Ability to Assess Student Knowledge"},{"location":"prompts/level-questions/#9-conversational-interface-or-chatbot-presence","text":"Question: Is there a built-in conversational agent that can answer student questions directly? Discrimination Rules: Level 0-3: No conversational interface. Level 4: A chatbot that can answer questions based on personal user data and recommend relevant topics. Level 5: A chatbot with advanced reasoning, capable of generating entirely new content/visualizations on demand.","title":"9. Conversational Interface or Chatbot Presence"},{"location":"prompts/level-questions/#10-ability-to-suggest-next-steps-or-learning-paths","text":"Question: Can the textbook suggest what a student should study next based on their interactions or mastery? Discrimination Rules: Level 0-2: No suggestion of personalized next steps. Level 3: Basic suggestions informed by LMS data. Level 4: Conversational suggestions tailored to the user's performance. Level 5: Intelligent, continuously improving recommendations (reinforcement learning) that adapt learning paths dynamically.","title":"10. Ability to Suggest Next Steps or Learning Paths"},{"location":"prompts/level-questions/#11-dynamic-content-generation","text":"Question: Can the resource generate new examples, problems, or explanations on demand rather than just serving static content? Discrimination Rules: Level 0-3: Content is predefined and static. Level 4: Some dynamic retrieval of suitable content may occur, but primarily curated. Level 5: Fully dynamic content generation, including new examples, problems, and custom explanations.","title":"11. Dynamic Content Generation"},{"location":"prompts/level-questions/#12-ability-to-create-custom-visualizations-or-simulations-on-demand","text":"Question: Can the textbook create new animations, simulations, or visual content in response to user queries or learning needs? Discrimination Rules: Level 0-2: Only preset images/videos. Level 3-4: Might select the best pre-existing simulations based on user need. Level 5: Can generate entirely new visualizations or simulations dynamically.","title":"12. Ability to Create Custom Visualizations or Simulations on Demand"},{"location":"prompts/level-questions/#13-reinforcement-learning-and-continuous-improvement","text":"Question: Does the system use data from student interactions over time to improve its recommendations or content delivery? Discrimination Rules: Level 0-4: No true reinforcement learning capabilities. At best, these levels adapt to user profiles statically or rule-based. Level 5: Employs reinforcement learning to continually refine learning paths and strategies for individual and aggregated learners.","title":"13. Reinforcement Learning and Continuous Improvement"},{"location":"prompts/level-questions/#14-external-resource-integration","text":"Question: Does the textbook integrate with external resources (like encyclopedias, research databases, or educational tools) in a context-aware manner? Discrimination Rules: Level 0: Only static references or a printed bibliography. Level 1: Possibly static hyperlinks to external sites. Level 2: Rich external link integration within an interactive website. Level 3-5: External resources chosen or recommended based on the student's profile (increasing personalization with each higher level).","title":"14. External Resource Integration"},{"location":"prompts/level-questions/#15-ability-to-handle-user-inquiries-beyond-pre-defined-faq","text":"Question: Can the textbook address student questions that aren't explicitly covered in the predefined text (e.g., open-ended queries)? Discrimination Rules: Level 0-2: Only predefined content, no handling of open-ended queries. Level 3: Might direct students to sections based on knowledge of their gaps but not truly \"answer\" novel queries. Level 4: Conversational agent attempts to answer new questions contextually. Level 5: Conversational agent with advanced reasoning and content generation responds fully and contextually, even creating new explanatory materials.","title":"15. Ability to Handle User Inquiries Beyond Pre-Defined FAQ"},{"location":"prompts/level-questions/#16-support-for-multiple-learning-styles","text":"Question: Does the textbook adjust or present content to support various learning styles (visual, auditory, kinesthetic) based on the learner? Discrimination Rules: Level 0-2: Static presentation with some variety (images, text, videos), but not tailored to an individual's style. Level 3-4: Selection of content type may adjust based on user performance or preferences. Level 5: Dynamically generates or selects content formats best suited to the individual's learning patterns as observed and improved over time.","title":"16. Support for Multiple Learning Styles"},{"location":"prompts/level-questions/#17-integration-of-learner-profiles-goals-interests-past-performance","text":"Question: Can the textbook use the learner's stated goals, interests, or performance history to prioritize or highlight certain topics? Discrimination Rules: Level 0-2: No user-specific profiling. Level 3: Basic use of learner profile from LMS (e.g., knowing which modules the student has completed). Level 4: Conversationally tailors suggestions and answers based on the learner's profile. Level 5: Sophisticated, data-driven personalization and continuous updating of learner profiles to refine suggestions.","title":"17. Integration of Learner Profiles (Goals, Interests, Past Performance)"},{"location":"prompts/level-questions/#18-depth-of-internal-cross-referencing","text":"Question: Does the textbook dynamically highlight related concepts and prerequisites based on the user's current focus? Discrimination Rules: Level 0-1: Static cross-references. Level 2: Rich static cross-referencing with interactive concept maps. Level 3+: Cross-references informed by user knowledge state; the textbook might highlight the most relevant concepts for that learner. Level 4-5: Uses conversation or intelligence to highlight or generate links specifically tuned to individual needs.","title":"18. Depth of Internal Cross-Referencing"},{"location":"prompts/level-questions/#19-faq-and-trouble-shooting-adaptation","text":"Question: Are FAQs or help features adapted to the learner's known difficulties or frequently asked questions from similar users? Discrimination Rules: Level 0-2: Static FAQ sections. Level 3: FAQ suggestions pulled from common misunderstandings related to user's performance. Level 4-5: Adaptive FAQ that can expand or generate new answers in response to user input and historical data.","title":"19. FAQ and Trouble-Shooting Adaptation"},{"location":"prompts/level-questions/#20-generation-of-custom-lesson-plans-and-curricula","text":"Question: Can the resource create an entirely custom lesson plan or course sequence tailored to an individual's learning trajectory? Discrimination Rules: Level 0-3: Content is structured, but no custom lesson plans are generated. At best, Level 3 might reorder suggestions from a fixed set. Level 4: Might recommend sequences conversationally, but still largely draws from predefined options. Level 5: Fully generates personalized lesson plans and sequences dynamically, informed by continual learning and reinforcement feedback loops. Overall Usage: By examining which level of capability applies to each question (0 through 5), an evaluator can determine the textbook's strongest match. A textbook that consistently answers in the realm of basic static features (0-1) remains at the lower levels. As it exhibits more interactivity (2), personalization and LMS integration (3), conversational capabilities (4), and finally dynamic, intelligent adaptation with generated content and reinforcement learning (5), the classification becomes clear.","title":"20. Generation of Custom Lesson Plans and Curricula"},{"location":"prompts/level-questions/#generate-html-form","text":"!!! prompt Now create an single-page HTML form that implements these 20 questions. Use JavaScript within the HTML file to calculate progress on the number of questions remaining and give a running total of the level. After the last question, add a \"Calculate Score\" that will calculate the \"intelligence score\" of of textbook and give an explanation of how the score was calculated. Make the title of the page be \"Calculating Intelligence Level of A Textbook\".","title":"Generate HTML Form"},{"location":"prompts/level-questions/#sample-html-form","text":"Intelligent Textbook Level Questions Level Questions (prior version)","title":"Sample HTML Form"},{"location":"prompts/quality-metrics/","text":"Generating Analytics for Intelligent Textbook Quality Metrics This prompt helps us generate a Python program that generates additional quality metrics on an intelligent textbook that is stored on a website where the source is markdown. To run the script you will need to have cloned the textbook on a local drive. !!! prompt We have already created python programs that do simple reporting on the counts of things like total number of markdown files, total word count, number of MicroSims and the number of terms in the glossary. What additional metrics can we use to measure the quality of content in a intelligent textbook? Please look in the project folder for the file `get-metrics-json.py` for an example of the type of metrics we are already gathering and the sample format for the JSON output of these metrics. Response I'll help analyze metrics for intelligent textbooks based on the provided files. Let me break this down systematically. From the provided files and examples, I can identify several key metrics that can help measure the quality of content in an intelligent textbook: 1. Quantitative Metrics (already being tracked in get-metrics-json.py): Markdown file count (content breadth) Image count (visual content) Word count (content depth) MicroSim count (interactive elements) Glossary term count (terminology coverage) 2. Additional Quality Metrics to Consider: * Content Structure: Learning graph completeness (prerequisites and dependencies mapped) Navigation depth and organization (from mkdocs.yml structure) Admonition usage (notes, warnings, tips that enhance learning) Quiz coverage per chapter Code example coverage Interactive element distribution Engagement Features: MicroSim complexity and interactivity levels Feedback mechanisms implementation Google Analytics integration for usage tracking Student progress tracking capabilities Practice problem availability Technical Quality: Build system completeness (proper mkdocs.yml configuration) Mobile responsiveness Accessibility compliance Load time performance Code quality in MicroSims Let me create a tool to help evaluate these metrics: Advanced Metrics Python Program Here is a sample report for the Graph Systems Thinking Site: # Intelligent Textbook Quality Report ## Basic Metrics - Markdown Files: 47 - Images: 25 - Word Count: 18029 - MicroSims: 3 - Glossary Terms: 38 ## Content Structure - Navigation Depth: 1 - Admonitions: 0 - Code Examples: 28 ## Engagement Features - Microsim Complexity: - Simple: 2 - Medium: 1 - Complex: 0 - Has Analytics: False ## Technical Quality - Build Config Complete: - Site Name: True - Theme: True - Nav: True - Responsive Design: - Mobile Navigation: False This analyzer tool provides a comprehensive framework for evaluating intelligent textbooks. It measures: Content Completeness: Proper navigation structure Balanced distribution of content types Comprehensive glossary coverage Learning graph implementation Interactive Elements: MicroSim distribution and complexity Quiz coverage Practice problems Feedback mechanisms Technical Implementation: Build system configuration Analytics integration Accessibility features Code quality Would you like me to focus on any particular aspect of these metrics or help implement specific checks for any of these areas? I can also help create visualization tools to track these metrics across multiple textbooks in your collection.","title":"Generating Analytics for Intelligent Textbook Quality Metrics"},{"location":"prompts/quality-metrics/#generating-analytics-for-intelligent-textbook-quality-metrics","text":"This prompt helps us generate a Python program that generates additional quality metrics on an intelligent textbook that is stored on a website where the source is markdown. To run the script you will need to have cloned the textbook on a local drive. !!! prompt We have already created python programs that do simple reporting on the counts of things like total number of markdown files, total word count, number of MicroSims and the number of terms in the glossary. What additional metrics can we use to measure the quality of content in a intelligent textbook? Please look in the project folder for the file `get-metrics-json.py` for an example of the type of metrics we are already gathering and the sample format for the JSON output of these metrics.","title":"Generating Analytics for Intelligent Textbook Quality Metrics"},{"location":"prompts/quality-metrics/#response","text":"I'll help analyze metrics for intelligent textbooks based on the provided files. Let me break this down systematically. From the provided files and examples, I can identify several key metrics that can help measure the quality of content in an intelligent textbook:","title":"Response"},{"location":"prompts/quality-metrics/#1-quantitative-metrics-already-being-tracked-in-get-metrics-jsonpy","text":"Markdown file count (content breadth) Image count (visual content) Word count (content depth) MicroSim count (interactive elements) Glossary term count (terminology coverage)","title":"1. Quantitative Metrics (already being tracked in get-metrics-json.py):"},{"location":"prompts/quality-metrics/#2-additional-quality-metrics-to-consider","text":"* Content Structure: Learning graph completeness (prerequisites and dependencies mapped) Navigation depth and organization (from mkdocs.yml structure) Admonition usage (notes, warnings, tips that enhance learning) Quiz coverage per chapter Code example coverage Interactive element distribution Engagement Features: MicroSim complexity and interactivity levels Feedback mechanisms implementation Google Analytics integration for usage tracking Student progress tracking capabilities Practice problem availability Technical Quality: Build system completeness (proper mkdocs.yml configuration) Mobile responsiveness Accessibility compliance Load time performance Code quality in MicroSims Let me create a tool to help evaluate these metrics: Advanced Metrics Python Program Here is a sample report for the Graph Systems Thinking Site: # Intelligent Textbook Quality Report ## Basic Metrics - Markdown Files: 47 - Images: 25 - Word Count: 18029 - MicroSims: 3 - Glossary Terms: 38 ## Content Structure - Navigation Depth: 1 - Admonitions: 0 - Code Examples: 28 ## Engagement Features - Microsim Complexity: - Simple: 2 - Medium: 1 - Complex: 0 - Has Analytics: False ## Technical Quality - Build Config Complete: - Site Name: True - Theme: True - Nav: True - Responsive Design: - Mobile Navigation: False This analyzer tool provides a comprehensive framework for evaluating intelligent textbooks. It measures: Content Completeness: Proper navigation structure Balanced distribution of content types Comprehensive glossary coverage Learning graph implementation Interactive Elements: MicroSim distribution and complexity Quiz coverage Practice problems Feedback mechanisms Technical Implementation: Build system configuration Analytics integration Accessibility features Code quality Would you like me to focus on any particular aspect of these metrics or help implement specific checks for any of these areas? I can also help create visualization tools to track these metrics across multiple textbooks in your collection.","title":"2. Additional Quality Metrics to Consider:"},{"location":"prompts/semantic-search/","text":"Semantic Search Although the keyword search feature built in to mkdocs is pretty good for a microsite architecture (just hosted on a web server with no search backend), it still leaves a lot to be desired. Here is a prompt that will get you started and building your own semantic search tool. !!! prompt The search features of mkdocs seem to be limited to matching keywords. Is there a way to use embeddings to increase the quality of search? I know we can create embeddings for each word, phrase, sentence, paragraph and page at build time. Response ChatGPT o1-preview Thought for 17 seconds Yes, you can enhance MkDocs' search capabilities by incorporating embeddings to enable semantic search, which can significantly improve the relevance and quality of search results compared to traditional keyword-based approaches. While MkDocs' default search relies on keyword matching (typically using Lunr.js ), integrating embeddings allows the search to understand the context and meaning behind queries and documents. Approaches to Implement Embedding-Based Search in MkDocs Using Third-Party Search Services a. Algolia DocSearch Overview : Algolia's DocSearch is a popular choice for documentation sites. While it primarily uses keyword-based search, it offers advanced ranking and relevance features that can be customized to mimic some semantic capabilities. Setup : Apply for DocSearch here. Follow the setup instructions to integrate it with your MkDocs site. Pros : Easy to set up with comprehensive documentation. Fast and reliable search experience. Cons : Primarily keyword-based; true embedding-based semantic search would require additional customization or different services. b. Typesense Overview : Typesense is an open-source, typo-tolerant search engine that can be integrated with MkDocs. It supports advanced search features and can be extended for semantic search. Setup : Host a Typesense server or use Typesense Cloud. Use a custom script or plugin to index your MkDocs content with embeddings. Integrate the search UI with your MkDocs site. Pros : Open-source with flexible deployment options. Supports custom ranking and relevance tuning. Cons : Requires more setup and maintenance compared to managed services. Custom Implementation with Embeddings a. Generating Embeddings at Build Time Process : Choose an Embedding Model : Utilize models like Sentence Transformers or OpenAI's embedding APIs to generate embeddings. Build Script Integration : Modify your MkDocs build process to include a step that processes each page (or sections within pages) to generate embeddings. Store Embeddings : Save the embeddings in a JSON file or another suitable format that can be accessed by the client-side search script. Example with Python and Sentence Transformers : ``` python Copy code `from sentence_transformers import SentenceTransformer import json import os model = SentenceTransformer('all-MiniLM-L6-v2') # Choose a suitable model embeddings = {} docs_dir = 'docs' # Your MkDocs docs directory for root, dirs, files in os.walk(docs_dir): for file in files: if file.endswith('.md'): path = os.path.join(root, file) with open(path, 'r', encoding='utf-8') as f: content = f.read() embedding = model.encode(content).tolist() page = os.path.relpath(path, docs_dir).replace('\\', '/') embeddings[page] = embedding with open('search_embeddings.json', 'w') as f: json.dump(embeddings, f) ` ``` b. Client-Side Search Interface Embedding Computation : Computing embeddings directly in the browser is resource-intensive. Instead, consider precomputing embeddings for queries or leveraging lightweight models via WebAssembly or similar technologies. Similarity Search : Implement a similarity search mechanism (e.g., cosine similarity) to compare the query embedding with stored embeddings. Libraries : TensorFlow.js : For running lightweight models in the browser. faiss.js : Though primarily for Python, alternatives for JavaScript may be needed. Example Workflow : User Enters Query : Capture the search query input. Compute Query Embedding : Use a lightweight model to generate the embedding. Load Precomputed Embeddings : Fetch the search_embeddings.json . Compute Similarities : Calculate cosine similarities between the query embedding and document embeddings. Display Results : Show the top N most similar documents. Considerations : Performance : Handling large embedding files in the browser can be slow. Optimize by limiting the number of documents or using indexing techniques. Security : If using third-party APIs for embedding computation, ensure data privacy. Server-Side Search with APIs Overview : Offload the embedding computation and similarity search to a backend service or serverless functions. Process : Build Process : Generate and store embeddings as in the custom implementation. API Setup : Create an API endpoint that accepts search queries, computes the query embedding server-side, performs similarity search against stored embeddings, and returns the results. Client Integration : Modify the MkDocs frontend to send search queries to the API and display the returned results. Pros : Performance : More efficient handling of embeddings and similarity computations. Scalability : Easier to manage larger datasets. Cons : Infrastructure : Requires hosting and maintaining the backend service. Latency : Potential delays due to network requests. Leveraging MkDocs Plugins Current State : As of the latest updates, there may not be a widely-adopted MkDocs plugin specifically for embedding-based search. However, you can develop a custom plugin or adapt existing search plugins to incorporate embeddings. Developing a Custom Plugin : Functionality : Integrate the embedding generation step into the MkDocs build process. Modify the search index to include embedding data. Enhance the frontend search script to utilize embeddings for query processing and result ranking. Resources : Refer to the MkDocs plugin development guide for creating custom plugins. Example Resources : mkdocs-material : This popular MkDocs theme offers advanced search features and might serve as a foundation for customization. Challenges and Considerations Performance : Embedding-based search, especially on the client side, can be resource-intensive. Optimizing embedding sizes and search algorithms is crucial. Complexity : Implementing semantic search requires a good understanding of machine learning models, embedding generation, and efficient search algorithms. Hosting and Infrastructure : Depending on the chosen approach, you might need additional hosting for search services or backend APIs. Maintenance : Custom solutions may require ongoing maintenance to handle updates in models, dependencies, or MkDocs versions. Conclusion While MkDocs does not natively support embedding-based search, enhancing its search functionality with embeddings is achievable through custom implementations or integrating third-party services. This enhancement can provide a more intuitive and context-aware search experience for your documentation users. Depending on your resources and technical expertise, you can choose between leveraging existing search platforms, developing a custom MkDocs plugin, or setting up a server-side search infrastructure to incorporate embeddings effectively. If you're looking for a more straightforward solution and don't require full semantic capabilities, consider exploring advanced configurations of existing search plugins or services that offer improved relevance without the complexity of embeddings. Additional Resources Sentence Transformers : https://www.sbert.net/ OpenAI Embeddings API : https://platform.openai.com/docs/guides/embeddings MkDocs Plugin Development : https://www.mkdocs.org/dev-guide/plugins/ Algolia DocSearch : https://docsearch.algolia.com/ Typesense : https://typesense.org/","title":"Semantic Search"},{"location":"prompts/semantic-search/#semantic-search","text":"Although the keyword search feature built in to mkdocs is pretty good for a microsite architecture (just hosted on a web server with no search backend), it still leaves a lot to be desired. Here is a prompt that will get you started and building your own semantic search tool. !!! prompt The search features of mkdocs seem to be limited to matching keywords. Is there a way to use embeddings to increase the quality of search? I know we can create embeddings for each word, phrase, sentence, paragraph and page at build time.","title":"Semantic Search"},{"location":"prompts/semantic-search/#response","text":"ChatGPT o1-preview Thought for 17 seconds Yes, you can enhance MkDocs' search capabilities by incorporating embeddings to enable semantic search, which can significantly improve the relevance and quality of search results compared to traditional keyword-based approaches. While MkDocs' default search relies on keyword matching (typically using Lunr.js ), integrating embeddings allows the search to understand the context and meaning behind queries and documents.","title":"Response"},{"location":"prompts/semantic-search/#approaches-to-implement-embedding-based-search-in-mkdocs","text":"Using Third-Party Search Services a. Algolia DocSearch Overview : Algolia's DocSearch is a popular choice for documentation sites. While it primarily uses keyword-based search, it offers advanced ranking and relevance features that can be customized to mimic some semantic capabilities. Setup : Apply for DocSearch here. Follow the setup instructions to integrate it with your MkDocs site. Pros : Easy to set up with comprehensive documentation. Fast and reliable search experience. Cons : Primarily keyword-based; true embedding-based semantic search would require additional customization or different services. b. Typesense Overview : Typesense is an open-source, typo-tolerant search engine that can be integrated with MkDocs. It supports advanced search features and can be extended for semantic search. Setup : Host a Typesense server or use Typesense Cloud. Use a custom script or plugin to index your MkDocs content with embeddings. Integrate the search UI with your MkDocs site. Pros : Open-source with flexible deployment options. Supports custom ranking and relevance tuning. Cons : Requires more setup and maintenance compared to managed services. Custom Implementation with Embeddings a. Generating Embeddings at Build Time Process : Choose an Embedding Model : Utilize models like Sentence Transformers or OpenAI's embedding APIs to generate embeddings. Build Script Integration : Modify your MkDocs build process to include a step that processes each page (or sections within pages) to generate embeddings. Store Embeddings : Save the embeddings in a JSON file or another suitable format that can be accessed by the client-side search script. Example with Python and Sentence Transformers : ``` python Copy code `from sentence_transformers import SentenceTransformer import json import os model = SentenceTransformer('all-MiniLM-L6-v2') # Choose a suitable model embeddings = {} docs_dir = 'docs' # Your MkDocs docs directory for root, dirs, files in os.walk(docs_dir): for file in files: if file.endswith('.md'): path = os.path.join(root, file) with open(path, 'r', encoding='utf-8') as f: content = f.read() embedding = model.encode(content).tolist() page = os.path.relpath(path, docs_dir).replace('\\', '/') embeddings[page] = embedding with open('search_embeddings.json', 'w') as f: json.dump(embeddings, f) ` ``` b. Client-Side Search Interface Embedding Computation : Computing embeddings directly in the browser is resource-intensive. Instead, consider precomputing embeddings for queries or leveraging lightweight models via WebAssembly or similar technologies. Similarity Search : Implement a similarity search mechanism (e.g., cosine similarity) to compare the query embedding with stored embeddings. Libraries : TensorFlow.js : For running lightweight models in the browser. faiss.js : Though primarily for Python, alternatives for JavaScript may be needed. Example Workflow : User Enters Query : Capture the search query input. Compute Query Embedding : Use a lightweight model to generate the embedding. Load Precomputed Embeddings : Fetch the search_embeddings.json . Compute Similarities : Calculate cosine similarities between the query embedding and document embeddings. Display Results : Show the top N most similar documents. Considerations : Performance : Handling large embedding files in the browser can be slow. Optimize by limiting the number of documents or using indexing techniques. Security : If using third-party APIs for embedding computation, ensure data privacy. Server-Side Search with APIs Overview : Offload the embedding computation and similarity search to a backend service or serverless functions. Process : Build Process : Generate and store embeddings as in the custom implementation. API Setup : Create an API endpoint that accepts search queries, computes the query embedding server-side, performs similarity search against stored embeddings, and returns the results. Client Integration : Modify the MkDocs frontend to send search queries to the API and display the returned results. Pros : Performance : More efficient handling of embeddings and similarity computations. Scalability : Easier to manage larger datasets. Cons : Infrastructure : Requires hosting and maintaining the backend service. Latency : Potential delays due to network requests. Leveraging MkDocs Plugins Current State : As of the latest updates, there may not be a widely-adopted MkDocs plugin specifically for embedding-based search. However, you can develop a custom plugin or adapt existing search plugins to incorporate embeddings. Developing a Custom Plugin : Functionality : Integrate the embedding generation step into the MkDocs build process. Modify the search index to include embedding data. Enhance the frontend search script to utilize embeddings for query processing and result ranking. Resources : Refer to the MkDocs plugin development guide for creating custom plugins. Example Resources : mkdocs-material : This popular MkDocs theme offers advanced search features and might serve as a foundation for customization.","title":"Approaches to Implement Embedding-Based Search in MkDocs"},{"location":"prompts/semantic-search/#challenges-and-considerations","text":"Performance : Embedding-based search, especially on the client side, can be resource-intensive. Optimizing embedding sizes and search algorithms is crucial. Complexity : Implementing semantic search requires a good understanding of machine learning models, embedding generation, and efficient search algorithms. Hosting and Infrastructure : Depending on the chosen approach, you might need additional hosting for search services or backend APIs. Maintenance : Custom solutions may require ongoing maintenance to handle updates in models, dependencies, or MkDocs versions.","title":"Challenges and Considerations"},{"location":"prompts/semantic-search/#conclusion","text":"While MkDocs does not natively support embedding-based search, enhancing its search functionality with embeddings is achievable through custom implementations or integrating third-party services. This enhancement can provide a more intuitive and context-aware search experience for your documentation users. Depending on your resources and technical expertise, you can choose between leveraging existing search platforms, developing a custom MkDocs plugin, or setting up a server-side search infrastructure to incorporate embeddings effectively. If you're looking for a more straightforward solution and don't require full semantic capabilities, consider exploring advanced configurations of existing search plugins or services that offer improved relevance without the complexity of embeddings.","title":"Conclusion"},{"location":"prompts/semantic-search/#additional-resources","text":"Sentence Transformers : https://www.sbert.net/ OpenAI Embeddings API : https://platform.openai.com/docs/guides/embeddings MkDocs Plugin Development : https://www.mkdocs.org/dev-guide/plugins/ Algolia DocSearch : https://docsearch.algolia.com/ Typesense : https://typesense.org/","title":"Additional Resources"},{"location":"prompts/word-cloud/","text":"Generating A Word Cloud for Your Book Run the Wordloud MicroSim { .md-button .md-button--primary } Word clouds for intelligent textbooks are graphic images that display the most important concepts in a book where the size of the font is related to how frequently the concept appears in the textbook or how important the concept is in the textbook. Wordclouds MicroSims can be easily be generated by generative AI applications. Here is a sample prompt to generate a wordcloud Basic Prompt !!! prompt Create a list of the 50 most important terms in a course on [Course Name]. Create a single HTML file with embedded javascript using the wordcloud2 library that displays a word-cloud of these words. For each word or phrase, rank it on a scale of 20 to 70 with the with the most important word or phrases given a score of 70. Prompt 2: Provide the List of Words !!! prompt Given the CSV list of phrases below, create a single HTML file that uses the wordcloud2 javascript library to create a wordcloud using the weights after the column. When the user clicks on the link allow them to go to the glossary at href=\"../glossary.md#NAME LABEL, WEIGHT Intelligent Textbook,70 MicroSim,65 Open Standards,60 Markdown,60 mkdocs,55 mkdocs-material,55 Theme,45 Build Process,55 mkdocs.yml,50 Navigation,50 Docs,45 Images,45 Links,45 Deep Linking,40 Search,50 Admonitions,45 Assessments,45 Footer,40 License,40 Previous and Next Page,40 Social Previews,40 Logo,30 Favicon,30 Equations,30 LaTeX,25 MathJax,25 Code Highlighting,25 Simulations,25 p5.js,40 iframe,40 Glossary,50 Table of Contents,45 Prompts,50 Open Graph,45 Preview Testing,40 Feedback Form,40 Google Analytics,50 Plugins,45 Conda,40 Python,40 Learning Graph,50 Chatbot,45 Recommendation,45 Broken Link,35 GitHub Pages,40 Prompt 3: Provide the Wordlist Code Use the following to link from the word to the glossary term: const wordList = wordData.map(([label, weight]) => { return [ label, weight, () => window.location.href = `../../glossary#${label.replace(/\\s+/g, '-').toLowerCase()}` ]; }); Note that this converts the entire string to lowercase and replaces the spaces with a dash to conform to the standards used by mkdocs-material.","title":"Generating A Word Cloud for Your Book"},{"location":"prompts/word-cloud/#generating-a-word-cloud-for-your-book","text":"Run the Wordloud MicroSim { .md-button .md-button--primary } Word clouds for intelligent textbooks are graphic images that display the most important concepts in a book where the size of the font is related to how frequently the concept appears in the textbook or how important the concept is in the textbook. Wordclouds MicroSims can be easily be generated by generative AI applications. Here is a sample prompt to generate a wordcloud","title":"Generating A Word Cloud for Your Book"},{"location":"prompts/word-cloud/#basic-prompt","text":"!!! prompt Create a list of the 50 most important terms in a course on [Course Name]. Create a single HTML file with embedded javascript using the wordcloud2 library that displays a word-cloud of these words. For each word or phrase, rank it on a scale of 20 to 70 with the with the most important word or phrases given a score of 70.","title":"Basic Prompt"},{"location":"prompts/word-cloud/#prompt-2-provide-the-list-of-words","text":"!!! prompt Given the CSV list of phrases below, create a single HTML file that uses the wordcloud2 javascript library to create a wordcloud using the weights after the column. When the user clicks on the link allow them to go to the glossary at href=\"../glossary.md#NAME LABEL, WEIGHT Intelligent Textbook,70 MicroSim,65 Open Standards,60 Markdown,60 mkdocs,55 mkdocs-material,55 Theme,45 Build Process,55 mkdocs.yml,50 Navigation,50 Docs,45 Images,45 Links,45 Deep Linking,40 Search,50 Admonitions,45 Assessments,45 Footer,40 License,40 Previous and Next Page,40 Social Previews,40 Logo,30 Favicon,30 Equations,30 LaTeX,25 MathJax,25 Code Highlighting,25 Simulations,25 p5.js,40 iframe,40 Glossary,50 Table of Contents,45 Prompts,50 Open Graph,45 Preview Testing,40 Feedback Form,40 Google Analytics,50 Plugins,45 Conda,40 Python,40 Learning Graph,50 Chatbot,45 Recommendation,45 Broken Link,35 GitHub Pages,40","title":"Prompt 2: Provide the List of Words"},{"location":"prompts/word-cloud/#prompt-3-provide-the-wordlist-code","text":"Use the following to link from the word to the glossary term: const wordList = wordData.map(([label, weight]) => { return [ label, weight, () => window.location.href = `../../glossary#${label.replace(/\\s+/g, '-').toLowerCase()}` ]; }); Note that this converts the entire string to lowercase and replaces the spaces with a dash to conform to the standards used by mkdocs-material.","title":"Prompt 3: Provide the Wordlist Code"},{"location":"prompts/learning-graph/","text":"Prompts for Generating a Learning Graph for Intelligent Textbooks","title":"Prompts for Generating a Learning Graph for Intelligent Textbooks"},{"location":"prompts/learning-graph/#prompts-for-generating-a-learning-graph-for-intelligent-textbooks","text":"","title":"Prompts for Generating a Learning Graph for Intelligent Textbooks"},{"location":"prompts/learning-graph/02-enumerate-concepts/","text":"Enumerating Concepts Prompt #1 !!! prompt I am writing a book on \"using mkdocs to create intelligent textbooks\". I have found the following concepts to be important. Please review this list and add other concepts that are required for a newcomer to build an intelligent textbook with mkdocs and the material theme. Assume the audience is a high-school teacher that wants to create an online intelligent textbook but does not have a programming background. Prompt #2 !!! prompt You are an expert at generating concept lists for online training courses. I am writing a book on the topic of using mkdocs build system and the material theme to create intelligent textbooks. I want a hands-on course that walks teachers though each of the steps to create compelling online intelligent textbooks that feature semantic search, chatbots and real-time content recommendations for customized lesson plan and MicroSim generation. I want you to list the 150 most important concepts in this course. Just return a simple ordered list in markdown with no other content. I have found the following concepts to be important. Assume the audience is a high-school teacher that wants to create an online intelligent textbook but does not have a programming background. Here is a list of the concepts in this course, listed roughly from the core concepts to the most advanced topics. - intelligent textbook - microsite - build process - docs directory - mkdocs - markdown - markdown images - docs/img directory - markdown links - deep linking - GitHub Pages - mkdocs material theme - mkdocs.yml - material features - navigation - navigation top - navigation footer - navigation options - previous page - next page - logo - favicon - color palette - primary color - accent color - content-code-copy - content-action-edit - screen regions - search - deep linking - yml config files - admonitions - formatting equations - LaTeX - MathJax - code highlighting - interactive content - simulations - animations - MicroSims - iframe - glossary - glossary linking - table of contents - quizzes - multiple-choice questions - mk_in_html - logo - favicon - CSS - HTML - social previews - open graph metadata - testing previews - image standards - page metadata - social graph testing - feedback forms - Google Analytics - Visual Studio Code - VS Code Markdown plugins - VS Code GitHub integration - Git commands - Conda - Conda commands - sematic search - embeddings - vector stores - concept graph - customized lesson plans - chatbot - graph database - concept graph - content graph - personalization - cookies - data privacy - recommendations - cloud-based APIs - the future of intelligent textbooks ChatGPT o1-Preview Response Certainly! Building an intelligent textbook with MkDocs and the Material theme involves various concepts that are crucial for a smooth experience, especially for someone without a programming background. Here's a review of your list, along with additional concepts that would be beneficial for a newcomer: Additional Concepts to Consider Installation and Setup Python Installation : MkDocs requires Python. Guidance on installing Python and setting up the environment is essential. Pip and Package Installation : Understanding how to use pip to install MkDocs and other necessary packages. Command Line Basics Terminal Usage : Basic commands for navigating directories and running MkDocs commands ( mkdocs serve , mkdocs build ). Understanding the Command Prompt : For executing MkDocs-related commands. Virtual Environments Using venv or Conda Environments : Isolating project dependencies to prevent conflicts. MkDocs Plugins and Extensions Installing and Configuring Plugins : Enhancing functionality with plugins like mkdocs-material-extensions or mkdocs-macros-plugin . Search Enhancement : Improving search capabilities with plugins. Content Organization Directory Structure Beyond docs/ : Managing additional folders for assets like docs/assets or docs/media . File Naming Conventions : Best practices for naming files and folders. Advanced Markdown Usage Tables : Creating and styling tables in Markdown. Footnotes and References : Adding supplementary information. Task Lists and Checkboxes : Interactive elements within content. Multimedia Integration Embedding Videos and Audio : Including multimedia content using Markdown. Responsive Images and Media : Ensuring media adjusts for different screen sizes. Custom Styling Custom CSS and JavaScript : Modifying styles beyond the default theme options. Fonts and Typography : Customizing text appearance. Accessibility Alt Text for Images : Improving accessibility for visually impaired users. Keyboard Navigation : Ensuring the site is navigable without a mouse. Version Control Basics Understanding Git Concepts : Commits, branches, merging, and resolving conflicts. Using GitHub Desktop : A user-friendly alternative to command-line Git. Deployment Options Alternative Hosting Platforms : Using Netlify or Read the Docs for deployment. Continuous Deployment : Setting up automated deployment pipelines. Search Engine Optimization (SEO) Metadata Best Practices : Improving visibility in search engines. Sitemap Generation : Helping search engines index the site. Testing and Previewing Local Development Server : Using mkdocs serve to preview changes live. Cross-Browser Testing : Ensuring the site works across different browsers. Troubleshooting Common Issues Debugging Build Errors : Interpreting error messages and fixing issues. Community Resources : Where to find help (MkDocs forums, Stack Overflow). Backup and Collaboration Using GitHub for Backup : Safeguarding your work. Collaborative Editing : Working with others on the same project. Legal and Ethical Considerations Content Licensing : Understanding how to legally use and share content. Privacy Policies : If collecting user data or analytics. Analytics and Monitoring Alternative Analytics Tools : Such as Matomo or Plausible for those who prefer not to use Google Analytics. Interpreting Analytics Data : Understanding user behavior to improve the textbook. Internationalization Multilingual Support : Making the textbook accessible in multiple languages. Localization Strategies : Adapting content for different regions. Backup Strategies Regular Backups : Using services or scripts to backup your content regularly. Legal Compliance GDPR Compliance : If the site is accessible to users in the EU. Concepts from Your List with Additional Notes Markdown : Emphasize learning advanced Markdown features for richer content. LaTeX and Equations : Provide tools or plugins that simplify the inclusion of mathematical formulas. Admonitions : Use for highlighting important information, tips, or warnings. Quizzes and Interactive Content : Introduce tools like H5P for creating interactive exercises. Git Commands : Simplify by using graphical interfaces if the command line is intimidating. Conda Commands : If using Conda, ensure that instructions are clear on managing environments. Simplifying for Non-Programmers Visual Tools : Recommend Markdown editors with live preview (e.g., Typora, Visual Studio Code with Markdown preview). Step-by-Step Guides : Provide detailed instructions with screenshots for each step. Avoid Jargon : Explain technical terms in plain language. Templates : Offer pre-made templates that teachers can modify. Security Best Practices HTTPS and SSL Certificates : Ensure the site is secure, especially if hosted outside GitHub Pages. Dependency Management : Keeping packages up to date to avoid security vulnerabilities. Community and Support Joining MkDocs Communities : Forums, GitHub discussions, or local groups. Contributing Back : Encouraging sharing of improvements or templates with others. Final Thoughts Building an intelligent textbook with MkDocs and the Material theme is an achievable goal for a high-school teacher without a programming background, provided they have access to clear, concise, and jargon-free resources. By expanding on the concepts you've listed and including the additional ones above, you'll create a comprehensive guide that empowers educators to create engaging and interactive online textbooks.","title":"Enumerating Concepts"},{"location":"prompts/learning-graph/02-enumerate-concepts/#enumerating-concepts","text":"","title":"Enumerating Concepts"},{"location":"prompts/learning-graph/02-enumerate-concepts/#prompt-1","text":"!!! prompt I am writing a book on \"using mkdocs to create intelligent textbooks\". I have found the following concepts to be important. Please review this list and add other concepts that are required for a newcomer to build an intelligent textbook with mkdocs and the material theme. Assume the audience is a high-school teacher that wants to create an online intelligent textbook but does not have a programming background.","title":"Prompt #1"},{"location":"prompts/learning-graph/02-enumerate-concepts/#prompt-2","text":"!!! prompt You are an expert at generating concept lists for online training courses. I am writing a book on the topic of using mkdocs build system and the material theme to create intelligent textbooks. I want a hands-on course that walks teachers though each of the steps to create compelling online intelligent textbooks that feature semantic search, chatbots and real-time content recommendations for customized lesson plan and MicroSim generation. I want you to list the 150 most important concepts in this course. Just return a simple ordered list in markdown with no other content. I have found the following concepts to be important. Assume the audience is a high-school teacher that wants to create an online intelligent textbook but does not have a programming background. Here is a list of the concepts in this course, listed roughly from the core concepts to the most advanced topics. - intelligent textbook - microsite - build process - docs directory - mkdocs - markdown - markdown images - docs/img directory - markdown links - deep linking - GitHub Pages - mkdocs material theme - mkdocs.yml - material features - navigation - navigation top - navigation footer - navigation options - previous page - next page - logo - favicon - color palette - primary color - accent color - content-code-copy - content-action-edit - screen regions - search - deep linking - yml config files - admonitions - formatting equations - LaTeX - MathJax - code highlighting - interactive content - simulations - animations - MicroSims - iframe - glossary - glossary linking - table of contents - quizzes - multiple-choice questions - mk_in_html - logo - favicon - CSS - HTML - social previews - open graph metadata - testing previews - image standards - page metadata - social graph testing - feedback forms - Google Analytics - Visual Studio Code - VS Code Markdown plugins - VS Code GitHub integration - Git commands - Conda - Conda commands - sematic search - embeddings - vector stores - concept graph - customized lesson plans - chatbot - graph database - concept graph - content graph - personalization - cookies - data privacy - recommendations - cloud-based APIs - the future of intelligent textbooks","title":"Prompt #2"},{"location":"prompts/learning-graph/02-enumerate-concepts/#chatgpt-o1-preview-response","text":"Certainly! Building an intelligent textbook with MkDocs and the Material theme involves various concepts that are crucial for a smooth experience, especially for someone without a programming background. Here's a review of your list, along with additional concepts that would be beneficial for a newcomer:","title":"ChatGPT o1-Preview Response"},{"location":"prompts/learning-graph/02-enumerate-concepts/#additional-concepts-to-consider","text":"Installation and Setup Python Installation : MkDocs requires Python. Guidance on installing Python and setting up the environment is essential. Pip and Package Installation : Understanding how to use pip to install MkDocs and other necessary packages. Command Line Basics Terminal Usage : Basic commands for navigating directories and running MkDocs commands ( mkdocs serve , mkdocs build ). Understanding the Command Prompt : For executing MkDocs-related commands. Virtual Environments Using venv or Conda Environments : Isolating project dependencies to prevent conflicts. MkDocs Plugins and Extensions Installing and Configuring Plugins : Enhancing functionality with plugins like mkdocs-material-extensions or mkdocs-macros-plugin . Search Enhancement : Improving search capabilities with plugins. Content Organization Directory Structure Beyond docs/ : Managing additional folders for assets like docs/assets or docs/media . File Naming Conventions : Best practices for naming files and folders. Advanced Markdown Usage Tables : Creating and styling tables in Markdown. Footnotes and References : Adding supplementary information. Task Lists and Checkboxes : Interactive elements within content. Multimedia Integration Embedding Videos and Audio : Including multimedia content using Markdown. Responsive Images and Media : Ensuring media adjusts for different screen sizes. Custom Styling Custom CSS and JavaScript : Modifying styles beyond the default theme options. Fonts and Typography : Customizing text appearance. Accessibility Alt Text for Images : Improving accessibility for visually impaired users. Keyboard Navigation : Ensuring the site is navigable without a mouse. Version Control Basics Understanding Git Concepts : Commits, branches, merging, and resolving conflicts. Using GitHub Desktop : A user-friendly alternative to command-line Git. Deployment Options Alternative Hosting Platforms : Using Netlify or Read the Docs for deployment. Continuous Deployment : Setting up automated deployment pipelines. Search Engine Optimization (SEO) Metadata Best Practices : Improving visibility in search engines. Sitemap Generation : Helping search engines index the site. Testing and Previewing Local Development Server : Using mkdocs serve to preview changes live. Cross-Browser Testing : Ensuring the site works across different browsers. Troubleshooting Common Issues Debugging Build Errors : Interpreting error messages and fixing issues. Community Resources : Where to find help (MkDocs forums, Stack Overflow). Backup and Collaboration Using GitHub for Backup : Safeguarding your work. Collaborative Editing : Working with others on the same project. Legal and Ethical Considerations Content Licensing : Understanding how to legally use and share content. Privacy Policies : If collecting user data or analytics. Analytics and Monitoring Alternative Analytics Tools : Such as Matomo or Plausible for those who prefer not to use Google Analytics. Interpreting Analytics Data : Understanding user behavior to improve the textbook. Internationalization Multilingual Support : Making the textbook accessible in multiple languages. Localization Strategies : Adapting content for different regions. Backup Strategies Regular Backups : Using services or scripts to backup your content regularly. Legal Compliance GDPR Compliance : If the site is accessible to users in the EU.","title":"Additional Concepts to Consider"},{"location":"prompts/learning-graph/02-enumerate-concepts/#concepts-from-your-list-with-additional-notes","text":"Markdown : Emphasize learning advanced Markdown features for richer content. LaTeX and Equations : Provide tools or plugins that simplify the inclusion of mathematical formulas. Admonitions : Use for highlighting important information, tips, or warnings. Quizzes and Interactive Content : Introduce tools like H5P for creating interactive exercises. Git Commands : Simplify by using graphical interfaces if the command line is intimidating. Conda Commands : If using Conda, ensure that instructions are clear on managing environments.","title":"Concepts from Your List with Additional Notes"},{"location":"prompts/learning-graph/02-enumerate-concepts/#simplifying-for-non-programmers","text":"Visual Tools : Recommend Markdown editors with live preview (e.g., Typora, Visual Studio Code with Markdown preview). Step-by-Step Guides : Provide detailed instructions with screenshots for each step. Avoid Jargon : Explain technical terms in plain language. Templates : Offer pre-made templates that teachers can modify.","title":"Simplifying for Non-Programmers"},{"location":"prompts/learning-graph/02-enumerate-concepts/#security-best-practices","text":"HTTPS and SSL Certificates : Ensure the site is secure, especially if hosted outside GitHub Pages. Dependency Management : Keeping packages up to date to avoid security vulnerabilities.","title":"Security Best Practices"},{"location":"prompts/learning-graph/02-enumerate-concepts/#community-and-support","text":"Joining MkDocs Communities : Forums, GitHub discussions, or local groups. Contributing Back : Encouraging sharing of improvements or templates with others.","title":"Community and Support"},{"location":"prompts/learning-graph/02-enumerate-concepts/#final-thoughts","text":"Building an intelligent textbook with MkDocs and the Material theme is an achievable goal for a high-school teacher without a programming background, provided they have access to clear, concise, and jargon-free resources. By expanding on the concepts you've listed and including the additional ones above, you'll create a comprehensive guide that empowers educators to create engaging and interactive online textbooks.","title":"Final Thoughts"},{"location":"prompts/learning-graph/03-dependency/","text":"Dependency List !!! prompt OK, now let us focus on these 150 concepts. For the next step, please create a fully connected concept learning dependency graph for the concepts in this course in a new CSV file. Learning dependancies focus on understanding what order the Concepts should be taught to a student reading a textbook. Here are some terms. In the list above, each item represents a Concept. The number on each line is called the ConceptID. The label after the period in list is called the ConceptLabel. Now, please create a new CSV file that includes new information about the other concepts on which it depends before it can be understood. If a concept depends on a specific concept that is not listed, then we will need to add it as a new concept. This will help us determine the teaching order of the Concepts. Return the new list as a CSV file using the following format: 1. The first column in the CSV file is a numeric ConceptID in the list above. 2. The second column is the ConceptName. 3. The third column is a pipe-delimited list of the Concept IDs that the concept depends upon. For example, to indicate that to understand Markdown Images you must first understand the build process and Markdown Basics we would add \"3|6\" in the new 3rd column like this: 3,Build Process 4,Docs Directory 5,Mkdocs Setup 6,Markdown Basics 7,Markdown Images,3|6 8,Image Directory 9,Markdown Links Check your results to make sure that all concepts are connected to at least one other concept. Foundation Concepts are concepts that have no dependent concepts in this set. They have an empty third column.","title":"Dependency List"},{"location":"prompts/learning-graph/03-dependency/#dependency-list","text":"!!! prompt OK, now let us focus on these 150 concepts. For the next step, please create a fully connected concept learning dependency graph for the concepts in this course in a new CSV file. Learning dependancies focus on understanding what order the Concepts should be taught to a student reading a textbook. Here are some terms. In the list above, each item represents a Concept. The number on each line is called the ConceptID. The label after the period in list is called the ConceptLabel. Now, please create a new CSV file that includes new information about the other concepts on which it depends before it can be understood. If a concept depends on a specific concept that is not listed, then we will need to add it as a new concept. This will help us determine the teaching order of the Concepts. Return the new list as a CSV file using the following format: 1. The first column in the CSV file is a numeric ConceptID in the list above. 2. The second column is the ConceptName. 3. The third column is a pipe-delimited list of the Concept IDs that the concept depends upon. For example, to indicate that to understand Markdown Images you must first understand the build process and Markdown Basics we would add \"3|6\" in the new 3rd column like this: 3,Build Process 4,Docs Directory 5,Mkdocs Setup 6,Markdown Basics 7,Markdown Images,3|6 8,Image Directory 9,Markdown Links Check your results to make sure that all concepts are connected to at least one other concept. Foundation Concepts are concepts that have no dependent concepts in this set. They have an empty third column.","title":"Dependency List"},{"location":"prompts/learning-graph/04-taxonomy/","text":"Concept Taxonomy Prompt !!! prompt Next, I would like you to create a 10-classification taxonomy system to classify each Concept. For example here are some suggestions: 1. Foundation Concepts 2. Terms and Definitions 3. Mkdocs Build Process 4. Material Features Response Below is one possible 10-classification taxonomy system for the 150 concepts. This taxonomy is designed to broadly categorize the concepts into thematic groups that represent different aspects of creating and managing an intelligent textbook using Mkdocs and the Material theme. Proposed 10-Class Taxonomy: Foundation Concepts Core ideas, initial concepts, and baseline understandings of intelligent textbooks. Terms & Definitions Basic terminology, standard definitions, and conceptual frameworks (graphs, embeddings, etc.). Mkdocs Setup & Configuration Concepts related to installing, configuring, and organizing Mkdocs projects (directories, YAML config, build process). Material Theme & UI Customization Concepts that involve the Material theme's features, navigation structures, color palettes, and layout customization. Markdown & Content Formatting Concepts focusing on Markdown usage, linking, images, tables of contents, admonitions, and equation formatting. Interactivity & Multimedia Concepts for embedding interactive elements, multimedia content, simulations, quizzes, and MicroSims. Advanced Features & Integrations Higher-level concepts such as semantic search, embeddings, vector stores, chatbots, and concept graphs. Deployment & Publishing Concepts on hosting (GitHub Pages, custom domains), CI/CD (GitHub Actions), versioning, large media handling, multi-language support, and exporting formats. Analytics, Personalization & User Experience Concepts related to analyzing user behavior, personalizing lessons, recommendations, feedback forms, and improving engagement. Accessibility, Localization & Future Outlook Concepts that address accessibility (WCAG), assistive technologies, localization, machine translation, and future-proofing strategies. o1 ChatGPT can make mistakes. Check important info.","title":"Concept Taxonomy"},{"location":"prompts/learning-graph/04-taxonomy/#concept-taxonomy","text":"","title":"Concept Taxonomy"},{"location":"prompts/learning-graph/04-taxonomy/#prompt","text":"!!! prompt Next, I would like you to create a 10-classification taxonomy system to classify each Concept. For example here are some suggestions: 1. Foundation Concepts 2. Terms and Definitions 3. Mkdocs Build Process 4. Material Features","title":"Prompt"},{"location":"prompts/learning-graph/04-taxonomy/#response","text":"Below is one possible 10-classification taxonomy system for the 150 concepts. This taxonomy is designed to broadly categorize the concepts into thematic groups that represent different aspects of creating and managing an intelligent textbook using Mkdocs and the Material theme. Proposed 10-Class Taxonomy: Foundation Concepts Core ideas, initial concepts, and baseline understandings of intelligent textbooks. Terms & Definitions Basic terminology, standard definitions, and conceptual frameworks (graphs, embeddings, etc.). Mkdocs Setup & Configuration Concepts related to installing, configuring, and organizing Mkdocs projects (directories, YAML config, build process). Material Theme & UI Customization Concepts that involve the Material theme's features, navigation structures, color palettes, and layout customization. Markdown & Content Formatting Concepts focusing on Markdown usage, linking, images, tables of contents, admonitions, and equation formatting. Interactivity & Multimedia Concepts for embedding interactive elements, multimedia content, simulations, quizzes, and MicroSims. Advanced Features & Integrations Higher-level concepts such as semantic search, embeddings, vector stores, chatbots, and concept graphs. Deployment & Publishing Concepts on hosting (GitHub Pages, custom domains), CI/CD (GitHub Actions), versioning, large media handling, multi-language support, and exporting formats. Analytics, Personalization & User Experience Concepts related to analyzing user behavior, personalizing lessons, recommendations, feedback forms, and improving engagement. Accessibility, Localization & Future Outlook Concepts that address accessibility (WCAG), assistive technologies, localization, machine translation, and future-proofing strategies. o1 ChatGPT can make mistakes. Check important info.","title":"Response"},{"location":"sims/","text":"List of MicroSims for This Intelligent Textbook Here is a list of MicroSims that are used in our intelligent textbooks. Learning Graph Learning Graph Word Cloud Word Cloud Sine Wave Sine Wave Templates","title":"List of MicroSims for This Intelligent Textbook"},{"location":"sims/#list-of-microsims-for-this-intelligent-textbook","text":"Here is a list of MicroSims that are used in our intelligent textbooks.","title":"List of MicroSims for This Intelligent Textbook"},{"location":"sims/#learning-graph","text":"Learning Graph","title":"Learning Graph"},{"location":"sims/#word-cloud","text":"Word Cloud","title":"Word Cloud"},{"location":"sims/#sine-wave","text":"Sine Wave","title":"Sine Wave"},{"location":"sims/#templates","text":"","title":"Templates"},{"location":"sims/ai-flywheel/","text":"AI Flywheel You can include this MicroSim infographic in your web page by adding the following line to your web page: <iframe src=\"./main.html\" height=\"470px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the AI Flywheel MicroSim { .md-button .md-button--primary } Edit the AI Flywheel MicroSim !!! prompt AI Flywheel Infographic Please generate a new MicroSim using vis.js. The MicroSim is a causal loop diagram that illustrates the AI flywheel architype. The title should be at the top and centered. The title is \"AI Flywheel\" Here are the four components: There are for concepts in the diagram arraged in a circle: \"Data\", \"Model\", \"Prediction\" and \"Feedback\" At the top of the diagram we have concept of \"Data\" Data is connected through an arc called \"Used to Create\" to \"Model\" At the right of the diagram is ithe concept \"Model\" \"Model\" is connected through an arc to \"Prediction\" with the label \"Used to Create\" \"Prediction\" is at the bottom of the diagram \"Prediction\" is connected with an arc to \"Feedback\" with the label \"Generates\" \"Feedback\" is connected with an arc to \"Data\" with the label \"Provides More\" Freese the positions and do not allow the objects to move. When the user hovers over an object, display an infobox at the bottom of the canvas that describes what the object is and its function in the AI Flywheel. Make the background of the canvas aliceblue. Recenter the objects if the container is resized. Response I've created an AI Flywheel MicroSim using vis.js that displays the cyclical relationship between the four key components of an AI system. Here are the key features: Design Elements Circular Layout: The four concepts (Data, Model, Prediction, Feedback) are arranged in a circle with fixed positions Directional Flow: Curved arrows show the flow between concepts with descriptive labels Color Coding: Each concept has a distinct color (Data=Green, Model=Blue, Prediction=Orange, Feedback=Purple) Interactive Hover: Hovering over any concept displays a detailed description in the control area below Components Flow Data (top) \u2192 \"Used to Create\" \u2192 Model (right) Model (right) \u2192 \"Used to Create\" \u2192 Prediction (bottom) Prediction (bottom) \u2192 \"Generates\" \u2192 Feedback (left) Feedback (left) \u2192 \"Provides More\" \u2192 Data (top) Responsive Features Automatically adjusts to container width changes Recalculates node positions when window is resized Scales text and descriptions appropriately Maintains circular layout proportions The diagram effectively illustrates how AI systems create a self-reinforcing cycle where each component feeds into the next, creating continuous improvement over time. The flywheel concept shows how initial momentum builds upon itself to create increasingly better AI systems.","title":"The AI Flywheel"},{"location":"sims/ai-flywheel/#ai-flywheel","text":"You can include this MicroSim infographic in your web page by adding the following line to your web page: <iframe src=\"./main.html\" height=\"470px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the AI Flywheel MicroSim { .md-button .md-button--primary } Edit the AI Flywheel MicroSim !!! prompt AI Flywheel Infographic Please generate a new MicroSim using vis.js. The MicroSim is a causal loop diagram that illustrates the AI flywheel architype. The title should be at the top and centered. The title is \"AI Flywheel\" Here are the four components: There are for concepts in the diagram arraged in a circle: \"Data\", \"Model\", \"Prediction\" and \"Feedback\" At the top of the diagram we have concept of \"Data\" Data is connected through an arc called \"Used to Create\" to \"Model\" At the right of the diagram is ithe concept \"Model\" \"Model\" is connected through an arc to \"Prediction\" with the label \"Used to Create\" \"Prediction\" is at the bottom of the diagram \"Prediction\" is connected with an arc to \"Feedback\" with the label \"Generates\" \"Feedback\" is connected with an arc to \"Data\" with the label \"Provides More\" Freese the positions and do not allow the objects to move. When the user hovers over an object, display an infobox at the bottom of the canvas that describes what the object is and its function in the AI Flywheel. Make the background of the canvas aliceblue. Recenter the objects if the container is resized.","title":"AI Flywheel"},{"location":"sims/ai-flywheel/#response","text":"I've created an AI Flywheel MicroSim using vis.js that displays the cyclical relationship between the four key components of an AI system. Here are the key features: Design Elements Circular Layout: The four concepts (Data, Model, Prediction, Feedback) are arranged in a circle with fixed positions Directional Flow: Curved arrows show the flow between concepts with descriptive labels Color Coding: Each concept has a distinct color (Data=Green, Model=Blue, Prediction=Orange, Feedback=Purple) Interactive Hover: Hovering over any concept displays a detailed description in the control area below","title":"Response"},{"location":"sims/ai-flywheel/#components-flow","text":"Data (top) \u2192 \"Used to Create\" \u2192 Model (right) Model (right) \u2192 \"Used to Create\" \u2192 Prediction (bottom) Prediction (bottom) \u2192 \"Generates\" \u2192 Feedback (left) Feedback (left) \u2192 \"Provides More\" \u2192 Data (top) Responsive Features Automatically adjusts to container width changes Recalculates node positions when window is resized Scales text and descriptions appropriately Maintains circular layout proportions The diagram effectively illustrates how AI systems create a self-reinforcing cycle where each component feeds into the next, creating continuous improvement over time. The flywheel concept shows how initial momentum builds upon itself to create increasingly better AI systems.","title":"Components Flow"},{"location":"sims/ai-pace-accelerating/","text":"The Accelerating Pace of AI Use these templates to create a MicroSim that can be added to any website with just a single iframe HTML element. You can include this MicroSim in your code by copying the following into your website: <iframe src=\"/mains.html\" width=\"600px\" height=\"450px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the Circle Radius MicroSim { .md-button .md-button--primary } Edit this MicroSim","title":"The Accelerating Pace of AI"},{"location":"sims/ai-pace-accelerating/#the-accelerating-pace-of-ai","text":"Use these templates to create a MicroSim that can be added to any website with just a single iframe HTML element. You can include this MicroSim in your code by copying the following into your website: <iframe src=\"/mains.html\" width=\"600px\" height=\"450px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the Circle Radius MicroSim { .md-button .md-button--primary } Edit this MicroSim","title":"The Accelerating Pace of AI"},{"location":"sims/blooms-taxonomy/","text":"MicroSim Folder index.md Template <iframe src=\"./main.html\" height=\"600px\" width=\"600px\" scrolling=\"no\" style=\"overflow: hidden\"></iframe> Run the MicroSim Template { .md-button .md-button--primary } Edit this MicroSim About this MicroSim This MicroSim teaches us how to specify the drawing of a static filled circle. Sample Prompt !!! prompt Create a single file p5.js sketch. Draw a green circle on a 600x400 canvas with a radius of 200.","title":"MicroSim Folder index.md Template"},{"location":"sims/blooms-taxonomy/#microsim-folder-indexmd-template","text":"<iframe src=\"./main.html\" height=\"600px\" width=\"600px\" scrolling=\"no\" style=\"overflow: hidden\"></iframe> Run the MicroSim Template { .md-button .md-button--primary } Edit this MicroSim","title":"MicroSim Folder index.md Template"},{"location":"sims/blooms-taxonomy/#about-this-microsim","text":"This MicroSim teaches us how to specify the drawing of a static filled circle.","title":"About this MicroSim"},{"location":"sims/blooms-taxonomy/#sample-prompt","text":"!!! prompt Create a single file p5.js sketch. Draw a green circle on a 600x400 canvas with a radius of 200.","title":"Sample Prompt"},{"location":"sims/book-gen-workflow/","text":"Book Build Workflow Use these templates to create a MicroSim that can be added to any website with just a single iframe HTML element. You can include this interactive infographic MicroSim in your textbook by adding the following HTML statement to your website: <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/book-gen-workflow/main.html\" height=\"610px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the Circle Radius MicroSim { .md-button .md-button--primary } Edit this MicroSim","title":"Workflow for Generating Intelligent Textbooks"},{"location":"sims/book-gen-workflow/#book-build-workflow","text":"Use these templates to create a MicroSim that can be added to any website with just a single iframe HTML element. You can include this interactive infographic MicroSim in your textbook by adding the following HTML statement to your website: <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/book-gen-workflow/main.html\" height=\"610px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the Circle Radius MicroSim { .md-button .md-button--primary } Edit this MicroSim","title":"Book Build Workflow"},{"location":"sims/book-levels/","text":"Book Levels MicroSim Use this MicroSim to create an interactive tool to view the five levels of intelligent textbooks. Run the Book Levels MicroSim - Responsive Version { .md-button .md-button--primary } Edit the Book Levels MicroSim (Responsive) Copy this line of HTML into your website to include this MicroSim in your class website: <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/book-levels/main.html\" height=\"500px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> How to Use Five Levels of Intelligent Textbooks Infographic in Your Classroom This guide explains how to use the interactive \"Five Levels of Intelligent Textbooks\" MicroSim to understand the progression from traditional static textbooks to advanced AI-driven educational resources. The iframe above makes it easy to include on any website. Overview The MicroSim presents a visual stair-step diagram showing the five levels of intelligent textbooks: Level 1: Static Textbooks (Red) Level 2: Interactive Content Textbooks (Blue) Level 3: Adaptive Textbooks (Teal) Level 4: Textbooks with Chatbots (Purple) Level 5: Autonomous AI Textbooks (Gold) How to Interact with the MicroSim Hover Interaction : Move your cursor over any of the five colored step levels to display detailed information about that level. Touch Interaction : On touch devices, tap a step to see its description. Responsive Design : The visualization automatically adjusts to your screen size, making it accessible on various devices. Understanding Each Level Level 1: Static Textbooks Characteristics : Traditional printed or digital formats with no interactive elements Usage : Over 90% of college textbooks remain at this level Applications : Suitable for simple content delivery where interaction isn't necessary Level 2: Interactive Content Textbooks Characteristics : Digital elements that engage readers beyond passive consumption Features : Keyword search, hyperlinks, embedded videos, simple quizzes, AI-generated MicroSims Benefits : Cost-effective enhancements that improve engagement with multimedia elements Level 3: Adaptive Textbooks Characteristics : Dynamic content adjustment based on user input and performance Features : Personalized learning pathways, concept graph traversal, performance-based content selection Implementation : Requires data management systems and graph algorithms Privacy Caution : These systems collect and analyze student learning data to provide adaptivity, raising important privacy considerations that educators should address when implementing Level 4: Textbooks with Chatbots Characteristics : Integration of intelligent conversational interfaces Features : LLM-powered tutoring assistants, GraphRAG architecture combining multiple AI technologies Implementation : Balances powerful LLMs with cost-effective smaller models Privacy Caution : Interactions with chatbots involve collecting potentially sensitive student questions and responses; institutions should implement proper data protection measures and transparency about how this interaction data is used Level 5: Autonomous AI Textbooks Characteristics : Future systems that fully understand individual learner needs Features : Deep understanding of student knowledge, real-time generation of customized lessons Current Status : Aspirational, requiring advanced hardware and more reliable LLMs Privacy Caution : The most advanced system would require extensive student data collection, including detailed cognitive and behavioral patterns; the educational benefits must be balanced against stringent privacy protections and ethical considerations about AI autonomy in educational settings Educational Applications Comparative Analysis : Use the MicroSim to compare the features and capabilities of different textbook technologies Educational Planning : Help administrators understand the progression of educational technology to make informed decisions about textbook adoption Student Information : Introduce students to the different types of learning resources they might encounter in their educational journey Privacy Considerations Across Levels As textbooks advance from static (Level 1) to autonomous (Level 5), data collection and privacy concerns increase significantly: Level 1-2 : Minimal privacy concerns as little or no student-specific data is collected Level 3 : Begins collecting student performance and behavior data to enable adaptation Level 4 : Stores conversation histories and student queries that may contain personal information Level 5 : Would require comprehensive student profiling to deliver fully personalized experiences Educational institutions implementing higher-level intelligent textbooks should: Develop clear data privacy policies Obtain informed consent from students Implement robust data security measures Consider data minimization principles Provide transparency about how AI systems use student data Offer opt-out options where feasible Technical Notes The MicroSim is built using p5.js and adapts to different screen sizes by: - Adjusting step sizes and text formatting based on screen width - Shortening labels on smaller screens for better readability - Maintaining touch functionality for mobile devices By exploring this MicroSim, users can gain a deeper understanding of how educational content is evolving with technology and the important considerations that come with these advancements.","title":"Book Levels MicroSim"},{"location":"sims/book-levels/#book-levels-microsim","text":"Use this MicroSim to create an interactive tool to view the five levels of intelligent textbooks. Run the Book Levels MicroSim - Responsive Version { .md-button .md-button--primary } Edit the Book Levels MicroSim (Responsive) Copy this line of HTML into your website to include this MicroSim in your class website: <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/book-levels/main.html\" height=\"500px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe>","title":"Book Levels MicroSim"},{"location":"sims/book-levels/#how-to-use-five-levels-of-intelligent-textbooks-infographic-in-your-classroom","text":"This guide explains how to use the interactive \"Five Levels of Intelligent Textbooks\" MicroSim to understand the progression from traditional static textbooks to advanced AI-driven educational resources. The iframe above makes it easy to include on any website.","title":"How to Use Five Levels of Intelligent Textbooks Infographic in Your Classroom"},{"location":"sims/book-levels/#overview","text":"The MicroSim presents a visual stair-step diagram showing the five levels of intelligent textbooks: Level 1: Static Textbooks (Red) Level 2: Interactive Content Textbooks (Blue) Level 3: Adaptive Textbooks (Teal) Level 4: Textbooks with Chatbots (Purple) Level 5: Autonomous AI Textbooks (Gold)","title":"Overview"},{"location":"sims/book-levels/#how-to-interact-with-the-microsim","text":"Hover Interaction : Move your cursor over any of the five colored step levels to display detailed information about that level. Touch Interaction : On touch devices, tap a step to see its description. Responsive Design : The visualization automatically adjusts to your screen size, making it accessible on various devices.","title":"How to Interact with the MicroSim"},{"location":"sims/book-levels/#understanding-each-level","text":"","title":"Understanding Each Level"},{"location":"sims/book-levels/#level-1-static-textbooks","text":"Characteristics : Traditional printed or digital formats with no interactive elements Usage : Over 90% of college textbooks remain at this level Applications : Suitable for simple content delivery where interaction isn't necessary","title":"Level 1: Static Textbooks"},{"location":"sims/book-levels/#level-2-interactive-content-textbooks","text":"Characteristics : Digital elements that engage readers beyond passive consumption Features : Keyword search, hyperlinks, embedded videos, simple quizzes, AI-generated MicroSims Benefits : Cost-effective enhancements that improve engagement with multimedia elements","title":"Level 2: Interactive Content Textbooks"},{"location":"sims/book-levels/#level-3-adaptive-textbooks","text":"Characteristics : Dynamic content adjustment based on user input and performance Features : Personalized learning pathways, concept graph traversal, performance-based content selection Implementation : Requires data management systems and graph algorithms Privacy Caution : These systems collect and analyze student learning data to provide adaptivity, raising important privacy considerations that educators should address when implementing","title":"Level 3: Adaptive Textbooks"},{"location":"sims/book-levels/#level-4-textbooks-with-chatbots","text":"Characteristics : Integration of intelligent conversational interfaces Features : LLM-powered tutoring assistants, GraphRAG architecture combining multiple AI technologies Implementation : Balances powerful LLMs with cost-effective smaller models Privacy Caution : Interactions with chatbots involve collecting potentially sensitive student questions and responses; institutions should implement proper data protection measures and transparency about how this interaction data is used","title":"Level 4: Textbooks with Chatbots"},{"location":"sims/book-levels/#level-5-autonomous-ai-textbooks","text":"Characteristics : Future systems that fully understand individual learner needs Features : Deep understanding of student knowledge, real-time generation of customized lessons Current Status : Aspirational, requiring advanced hardware and more reliable LLMs Privacy Caution : The most advanced system would require extensive student data collection, including detailed cognitive and behavioral patterns; the educational benefits must be balanced against stringent privacy protections and ethical considerations about AI autonomy in educational settings","title":"Level 5: Autonomous AI Textbooks"},{"location":"sims/book-levels/#educational-applications","text":"Comparative Analysis : Use the MicroSim to compare the features and capabilities of different textbook technologies Educational Planning : Help administrators understand the progression of educational technology to make informed decisions about textbook adoption Student Information : Introduce students to the different types of learning resources they might encounter in their educational journey","title":"Educational Applications"},{"location":"sims/book-levels/#privacy-considerations-across-levels","text":"As textbooks advance from static (Level 1) to autonomous (Level 5), data collection and privacy concerns increase significantly: Level 1-2 : Minimal privacy concerns as little or no student-specific data is collected Level 3 : Begins collecting student performance and behavior data to enable adaptation Level 4 : Stores conversation histories and student queries that may contain personal information Level 5 : Would require comprehensive student profiling to deliver fully personalized experiences Educational institutions implementing higher-level intelligent textbooks should: Develop clear data privacy policies Obtain informed consent from students Implement robust data security measures Consider data minimization principles Provide transparency about how AI systems use student data Offer opt-out options where feasible","title":"Privacy Considerations Across Levels"},{"location":"sims/book-levels/#technical-notes","text":"The MicroSim is built using p5.js and adapts to different screen sizes by: - Adjusting step sizes and text formatting based on screen width - Shortening labels on smaller screens for better readability - Maintaining touch functionality for mobile devices By exploring this MicroSim, users can gain a deeper understanding of how educational content is evolving with technology and the important considerations that come with these advancements.","title":"Technical Notes"},{"location":"sims/learning-graph/","text":"Learning Graph MicroSim Graph Viewer","title":"Learning Graph MicroSim"},{"location":"sims/learning-graph/#learning-graph-microsim","text":"Graph Viewer","title":"Learning Graph MicroSim"},{"location":"sims/levels-of-interactivity/","text":"Levels of Interactivity MicroSim To use this MicroSim, just copy this iframe HTML element onto your website. <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/levels-of-interactivity/main.html\" height=\"505px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the Levels of Interactivity MicroSim { .md-button .md-button--primary } Edit this MicroSim","title":"Levels of Interactivity MicroSim"},{"location":"sims/levels-of-interactivity/#levels-of-interactivity-microsim","text":"To use this MicroSim, just copy this iframe HTML element onto your website. <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/levels-of-interactivity/main.html\" height=\"505px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the Levels of Interactivity MicroSim { .md-button .md-button--primary } Edit this MicroSim","title":"Levels of Interactivity MicroSim"},{"location":"sims/sine-wave/","text":"Sine Wave Run the Sine Wave MicroSim { .md-button .md-button--primary } Edit the Sine Wave MicroSim To include this MicroSim on your web site, just copy the following line of HTML code: <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/sine-wave/main.html\" height=\"480px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> In this demo, we use three range control sliders to change the ways a sine wave is drawn on a canvas. The three parameters are: amplitude period and phase Prompt ```linenums=\"0\" Generate a static sine wave on a grid of cartesian coordinates. Make (0,0) be at the center of an 600x400 canvas and larger y at the top. Add sliders for period, amplitude and phase. Provide the label and values to the left of the sliders. Make the sliders span the width less the leftSliderMargin of 100. Draw and label the X and Y Axis. [Edit This MicroSim with the P5.js Editor](https://editor.p5js.org/dmccreary/sketches/f7E377T03) ### Result ```js // sine wave with 3 sliders let width = 600; let height = 400; let halfWidth = width / 2 let halfHeight = height / 2 let amplitude = 100; let phase = 0; let amplitudeSlider, periodSlider, phaseSlider; let labelValueMargin = 120; function setup() { createCanvas(width, height); textSize(16) // Create sliders amplitudeSlider = createSlider(0, 200, 100); amplitudeSlider.position(labelValueMargin, height - 20); amplitudeSlider.style('width', width - labelValueMargin + 'px') periodSlider = createSlider(1, 100, 50); periodSlider.position(labelValueMargin, height - 40); periodSlider.style('width', width - labelValueMargin + 'px') phaseSlider = createSlider(-PI*100, PI*100, 0, 0.01); phaseSlider.position(labelValueMargin, height - 60); phaseSlider.style('width', width - labelValueMargin + 'px') } function draw() { background(240); amplitude = amplitudeSlider.value(); period = periodSlider.value(); phase = phaseSlider.value(); // draw on the standard axis to keep text upright drawAxis(); translate(width / 2, height / 2); // Shift origin to center scale(1, -1); // Flip y-axis to make positive y up drawSineWave(amplitude, 1/period, phase); } function setLineDash(list) { drawingContext.setLineDash(list); } function drawAxis() { fill('black') strokeWeight(0) text('y', halfWidth-20, 15) text('x', width-20, halfHeight + 20) stroke('gray') strokeWeight(1) setLineDash([5, 5]) // horizontal line line(0, halfHeight, width, halfHeight) // vertical line line(halfWidth, 0, halfWidth, height) stroke(0) strokeWeight(0); fill('black'); // Text color text('Amplitude: ' + amplitude/100, 10, height - 5); text('Period: ' + period, 10, height - 25); text('Phase: ' + phase.toFixed(2), 10, height - 45); } function drawSineWave(amplitude, frequency, phase) { stroke('blue'); strokeWeight(3) noFill(); // turn off dash line setLineDash([1, 0]) beginShape(); for (let x = -width / 2; x < width / 2; x++) { let y = amplitude * sin(frequency * (x - phase)); vertex(x, y); } endShape(); } !!! Challenge Create your own trigonometry demos by drawing the cosine and tangent functions. Lesson Plan Prompt ```linenums=\"0\" Generate a lesson plan for a 9th grade geometry class that accompanies the following p5.js demonstration: The users see a sine wave on the screen. There are three range control sliders under the sine wave. One slider changes the amplitude of the sine wave. One slider changes the period of the sine wave. One slider changes the phase of the sine wave. ``` Grade Level 9th Grade Subject Geometry Duration 1-2 class periods (40-80 minutes) Tools Needed Computers with internet access, p5.js web editor, projector for demonstrations. Objectives Understand the basic properties of sine waves (amplitude, period, phase). Learn how to manipulate these properties using p5.js. Visualize the effects of changing each property on the shape of the sine wave. Introduction (10 minutes) Begin with a brief overview of sine waves and their significance in mathematics and the real world (e.g., sound waves, light waves). Introduce the p5.js tool and its purpose in visualizing mathematical concepts. Demonstration (15 minutes) Project the p5.js sine wave demonstration on the screen. Explain each control slider and its corresponding property: Amplitude: Height of the wave peaks. Period: Distance between successive wave peaks. Phase: Horizontal shift of the entire wave. Interactive Activity (30 minutes) Students will use the p5.js web editor to experiment with the sine wave. Tasks for students: Adjust the amplitude and observe changes. Modify the period and note the effects. Change the phase and discuss how the wave shifts. Encourage students to note their observations and any patterns they discover. Group Discussion (10 minutes) Regroup and discuss the findings. Ask students to explain how each parameter affects the wave. Discuss practical applications of sine waves. Assessment (5-15 minutes) Provide a short quiz or worksheet asking students to match wave diagrams with their corresponding amplitude, period, and phase settings. Homework (optional) Students create their own p5.js sketch that includes a sine wave with adjustable properties. They should write a brief report explaining how changing each property affects the wave and include screenshots of their sketch. Extensions (optional) Introduce concepts of frequency and angular velocity related to sine waves. Explore other trigonometric functions like cosine and tangent using p5.js. Resources Access to the p5.js web editor and basic tutorials. Diagrams and explanations of sine waves and their properties. References","title":"Sine Wave"},{"location":"sims/sine-wave/#sine-wave","text":"Run the Sine Wave MicroSim { .md-button .md-button--primary } Edit the Sine Wave MicroSim To include this MicroSim on your web site, just copy the following line of HTML code: <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/sine-wave/main.html\" height=\"480px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> In this demo, we use three range control sliders to change the ways a sine wave is drawn on a canvas. The three parameters are: amplitude period and phase","title":"Sine Wave"},{"location":"sims/sine-wave/#prompt","text":"```linenums=\"0\" Generate a static sine wave on a grid of cartesian coordinates. Make (0,0) be at the center of an 600x400 canvas and larger y at the top. Add sliders for period, amplitude and phase. Provide the label and values to the left of the sliders. Make the sliders span the width less the leftSliderMargin of 100. Draw and label the X and Y Axis. [Edit This MicroSim with the P5.js Editor](https://editor.p5js.org/dmccreary/sketches/f7E377T03) ### Result ```js // sine wave with 3 sliders let width = 600; let height = 400; let halfWidth = width / 2 let halfHeight = height / 2 let amplitude = 100; let phase = 0; let amplitudeSlider, periodSlider, phaseSlider; let labelValueMargin = 120; function setup() { createCanvas(width, height); textSize(16) // Create sliders amplitudeSlider = createSlider(0, 200, 100); amplitudeSlider.position(labelValueMargin, height - 20); amplitudeSlider.style('width', width - labelValueMargin + 'px') periodSlider = createSlider(1, 100, 50); periodSlider.position(labelValueMargin, height - 40); periodSlider.style('width', width - labelValueMargin + 'px') phaseSlider = createSlider(-PI*100, PI*100, 0, 0.01); phaseSlider.position(labelValueMargin, height - 60); phaseSlider.style('width', width - labelValueMargin + 'px') } function draw() { background(240); amplitude = amplitudeSlider.value(); period = periodSlider.value(); phase = phaseSlider.value(); // draw on the standard axis to keep text upright drawAxis(); translate(width / 2, height / 2); // Shift origin to center scale(1, -1); // Flip y-axis to make positive y up drawSineWave(amplitude, 1/period, phase); } function setLineDash(list) { drawingContext.setLineDash(list); } function drawAxis() { fill('black') strokeWeight(0) text('y', halfWidth-20, 15) text('x', width-20, halfHeight + 20) stroke('gray') strokeWeight(1) setLineDash([5, 5]) // horizontal line line(0, halfHeight, width, halfHeight) // vertical line line(halfWidth, 0, halfWidth, height) stroke(0) strokeWeight(0); fill('black'); // Text color text('Amplitude: ' + amplitude/100, 10, height - 5); text('Period: ' + period, 10, height - 25); text('Phase: ' + phase.toFixed(2), 10, height - 45); } function drawSineWave(amplitude, frequency, phase) { stroke('blue'); strokeWeight(3) noFill(); // turn off dash line setLineDash([1, 0]) beginShape(); for (let x = -width / 2; x < width / 2; x++) { let y = amplitude * sin(frequency * (x - phase)); vertex(x, y); } endShape(); } !!! Challenge Create your own trigonometry demos by drawing the cosine and tangent functions.","title":"Prompt"},{"location":"sims/sine-wave/#lesson-plan","text":"","title":"Lesson Plan"},{"location":"sims/sine-wave/#prompt_1","text":"```linenums=\"0\" Generate a lesson plan for a 9th grade geometry class that accompanies the following p5.js demonstration: The users see a sine wave on the screen. There are three range control sliders under the sine wave. One slider changes the amplitude of the sine wave. One slider changes the period of the sine wave. One slider changes the phase of the sine wave. ```","title":"Prompt"},{"location":"sims/sine-wave/#grade-level","text":"9th Grade","title":"Grade Level"},{"location":"sims/sine-wave/#subject","text":"Geometry","title":"Subject"},{"location":"sims/sine-wave/#duration","text":"1-2 class periods (40-80 minutes)","title":"Duration"},{"location":"sims/sine-wave/#tools-needed","text":"Computers with internet access, p5.js web editor, projector for demonstrations.","title":"Tools Needed"},{"location":"sims/sine-wave/#objectives","text":"Understand the basic properties of sine waves (amplitude, period, phase). Learn how to manipulate these properties using p5.js. Visualize the effects of changing each property on the shape of the sine wave.","title":"Objectives"},{"location":"sims/sine-wave/#introduction-10-minutes","text":"Begin with a brief overview of sine waves and their significance in mathematics and the real world (e.g., sound waves, light waves). Introduce the p5.js tool and its purpose in visualizing mathematical concepts.","title":"Introduction (10 minutes)"},{"location":"sims/sine-wave/#demonstration-15-minutes","text":"Project the p5.js sine wave demonstration on the screen. Explain each control slider and its corresponding property: Amplitude: Height of the wave peaks. Period: Distance between successive wave peaks. Phase: Horizontal shift of the entire wave.","title":"Demonstration (15 minutes)"},{"location":"sims/sine-wave/#interactive-activity-30-minutes","text":"Students will use the p5.js web editor to experiment with the sine wave. Tasks for students: Adjust the amplitude and observe changes. Modify the period and note the effects. Change the phase and discuss how the wave shifts. Encourage students to note their observations and any patterns they discover.","title":"Interactive Activity (30 minutes)"},{"location":"sims/sine-wave/#group-discussion-10-minutes","text":"Regroup and discuss the findings. Ask students to explain how each parameter affects the wave. Discuss practical applications of sine waves.","title":"Group Discussion (10 minutes)"},{"location":"sims/sine-wave/#assessment-5-15-minutes","text":"Provide a short quiz or worksheet asking students to match wave diagrams with their corresponding amplitude, period, and phase settings.","title":"Assessment (5-15 minutes)"},{"location":"sims/sine-wave/#homework-optional","text":"Students create their own p5.js sketch that includes a sine wave with adjustable properties. They should write a brief report explaining how changing each property affects the wave and include screenshots of their sketch.","title":"Homework (optional)"},{"location":"sims/sine-wave/#extensions-optional","text":"Introduce concepts of frequency and angular velocity related to sine waves. Explore other trigonometric functions like cosine and tangent using p5.js.","title":"Extensions (optional)"},{"location":"sims/sine-wave/#resources","text":"Access to the p5.js web editor and basic tutorials. Diagrams and explanations of sine waves and their properties.","title":"Resources"},{"location":"sims/sine-wave/#references","text":"","title":"References"},{"location":"sims/templates/","text":"MicroSim Templates Use these templates to create a MicroSim that can be added to any website with just a single iframe HTML element. <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/NAME/mains.html\" width=\"600px\" height=\"450px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the MicroSim Fullscreen { .md-button .md-button--primary } Edit this MicroSim","title":"MicroSim Templates"},{"location":"sims/templates/#microsim-templates","text":"Use these templates to create a MicroSim that can be added to any website with just a single iframe HTML element. <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/NAME/mains.html\" width=\"600px\" height=\"450px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the MicroSim Fullscreen { .md-button .md-button--primary } Edit this MicroSim","title":"MicroSim Templates"},{"location":"sims/templates/index-social-override/","text":"MicroSim Templates Use an image ratio of 1.91:1 Use these templates to create a MicroSim that can be added to any website with just a single iframe HTML element. <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/NAME/mains.html\" width=\"600px\" height=\"450px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the Circle Radius MicroSim { .md-button .md-button--primary } Edit this MicroSim","title":"A title under 60 characters."},{"location":"sims/templates/index-social-override/#microsim-templates","text":"Use an image ratio of 1.91:1 Use these templates to create a MicroSim that can be added to any website with just a single iframe HTML element. <iframe src=\"https://dmccreary.github.io/intelligent-textbooks/sims/NAME/mains.html\" width=\"600px\" height=\"450px\" scrolling=\"no\" style=\"overflow: hidden;\"></iframe> Run the Circle Radius MicroSim { .md-button .md-button--primary } Edit this MicroSim","title":"MicroSim Templates"},{"location":"sims/word-cloud/","text":"Word Cloud MicroSim Run the WordCloud MicroSim { .md-button .md-button--primary } Adding Glossary Links We can add links from each word to the Glossary of Terms First, we need to turn off the link decorations in the CSS: body { font-family: Arial, Helvetica, sans-serif; } #wordcloud { width: 100%; height: 600px; border: 1px solid #ddd; } #wordcloud a { text-decoration: none; color: inherit; } Next, we add a JavaScript function to convert the links into a lower-case string with dashes used to replace spaces. const wordList = wordData.map(([label, weight]) => { return [ label, weight, () => window.location.href = `../../glossary#${label.replace(/\\s+/g, '-').toLowerCase()}` ]; });","title":"Word Cloud MicroSim"},{"location":"sims/word-cloud/#word-cloud-microsim","text":"Run the WordCloud MicroSim { .md-button .md-button--primary }","title":"Word Cloud MicroSim"},{"location":"sims/word-cloud/#adding-glossary-links","text":"We can add links from each word to the Glossary of Terms First, we need to turn off the link decorations in the CSS: body { font-family: Arial, Helvetica, sans-serif; } #wordcloud { width: 100%; height: 600px; border: 1px solid #ddd; } #wordcloud a { text-decoration: none; color: inherit; } Next, we add a JavaScript function to convert the links into a lower-case string with dashes used to replace spaces. const wordList = wordData.map(([label, weight]) => { return [ label, weight, () => window.location.href = `../../glossary#${label.replace(/\\s+/g, '-').toLowerCase()}` ]; });","title":"Adding Glossary Links"},{"location":"tutorial/","text":"Tutorial: Building Intelligent Textbooks with mkdocs This is a step-by-step tutorial on how to build intelligent textbooks with the mkdocs build tool. Getting Started In our Getting Started guide we will walk you though the basic steps in creating a minimal intelligent text book with three chapters. This getting started guide assumes you have Python 3 installed on your local system and you have the permissions to install conda and pip. Directory Structure Sample directory structure for an intelligent book. Directory Structure Navigation How to set up a left-side navigation system using mkdocs. Got to the Navigation Tutorial Markdown Here is a short tutorial on how to use the Markdown syntax: Markdown Quizzes This section shows you how to format multiple choice questions using uppercase letters for each option. The answer can be hidden until the user selects \"Show Answer\". Quizzes Admonitions How to add admonitions to your pages. Admonitions Prompt Admonition Add a custom admonition for prompts that include a copy button in the upper right corner. Prompt Admonition Adding a MicroSim Adding a interactive simulation is as easy as copying a single iframe directly into your markdown file. Adding a MicroSim Feedback How to add a feedback form to the footer of each page. Feedback Google Analytics How to enable the Google Analytics features on mkdocs so you can track how many users are coming to your website, how often they visit, where the come from and what pages they visit. Go to Google Analytics Logging Although setting up Google Analytics is straightforward, there are many times you need more details on what controls are being used by each MicroSim. This section guides you how to add JavaScript to pages to log specific events. Detailed Logging Logo And Favicon We can add a customized logo to the upper left corner and a favicon which will show up on your bookmarks bar. Logo and MicroSim","title":"Tutorial: Building Intelligent Textbooks with mkdocs"},{"location":"tutorial/#tutorial-building-intelligent-textbooks-with-mkdocs","text":"This is a step-by-step tutorial on how to build intelligent textbooks with the mkdocs build tool.","title":"Tutorial: Building Intelligent Textbooks with mkdocs"},{"location":"tutorial/#getting-started","text":"In our Getting Started guide we will walk you though the basic steps in creating a minimal intelligent text book with three chapters. This getting started guide assumes you have Python 3 installed on your local system and you have the permissions to install conda and pip.","title":"Getting Started"},{"location":"tutorial/#directory-structure","text":"Sample directory structure for an intelligent book. Directory Structure","title":"Directory Structure"},{"location":"tutorial/#navigation","text":"How to set up a left-side navigation system using mkdocs. Got to the Navigation Tutorial","title":"Navigation"},{"location":"tutorial/#markdown","text":"Here is a short tutorial on how to use the Markdown syntax: Markdown","title":"Markdown"},{"location":"tutorial/#quizzes","text":"This section shows you how to format multiple choice questions using uppercase letters for each option. The answer can be hidden until the user selects \"Show Answer\". Quizzes","title":"Quizzes"},{"location":"tutorial/#admonitions","text":"How to add admonitions to your pages. Admonitions","title":"Admonitions"},{"location":"tutorial/#prompt-admonition","text":"Add a custom admonition for prompts that include a copy button in the upper right corner. Prompt Admonition","title":"Prompt Admonition"},{"location":"tutorial/#adding-a-microsim","text":"Adding a interactive simulation is as easy as copying a single iframe directly into your markdown file. Adding a MicroSim","title":"Adding a MicroSim"},{"location":"tutorial/#feedback","text":"How to add a feedback form to the footer of each page. Feedback","title":"Feedback"},{"location":"tutorial/#google-analytics","text":"How to enable the Google Analytics features on mkdocs so you can track how many users are coming to your website, how often they visit, where the come from and what pages they visit. Go to Google Analytics","title":"Google Analytics"},{"location":"tutorial/#logging","text":"Although setting up Google Analytics is straightforward, there are many times you need more details on what controls are being used by each MicroSim. This section guides you how to add JavaScript to pages to log specific events. Detailed Logging","title":"Logging"},{"location":"tutorial/#logo-and-favicon","text":"We can add a customized logo to the upper left corner and a favicon which will show up on your bookmarks bar. Logo and MicroSim","title":"Logo And Favicon"},{"location":"tutorial/adding-a-microsim/","text":"Adding a MicroSim In this section we show you how to add an individual p5.js MicroSim to your intelligent textbook. A MicroSim is a single-page simulation used to illustrate a concept in your textbook. It is often written in JavaScript and the simulation run within a rectangular canvas that fills the center area of the page. We design the MicroSim so that it can be easily added to any web page with a single reference such as an HTML iframe . The Need for Consistency Although these guidelines might seem somewhat rigid at first, our experience has show that by forcing consistency we get much better results when we ask generative AI programs to generate new MicroSims or have generative AI customize a MicroSim. Giving a generative AI program a well-documented sketch.js file maximizes the probability that the generative AI application or agent will generate the correct MicroSim without the need for manual interventions. MicroSim Layout Strategy Based on feedback from instructors, we use the following layout conventions. The canvas is typically around 670 pixels wide to fit in the default center section of a mkdocs material page. The canvas is divided into two regions. The top region is the drawing region and the bottom region holds the controls such as sliders and buttons. The top drawing region is drawn with a background color of aliceblue . The bottom control have a white background. A JavaScript template using p5.js or vis.js is used to create a consistent layout so an iframe can be quickly inserted into any markdown page in the textbook. A CSS file creates a 2-pixel wide border so that the users know it is an active region that they can change simulation parameters. Note that these are default intelligent textbook conventions, but there is still a wide variety of options you can still use. Some MicroSims are best used in a screen that takes the full-with of your browser. These are easy to create by overriding the default behavior. File Conventions There are a variety of ways you can store MicroSims based on the needs of your users. The structure below is to promote high-quality documentation and reuse by allowing users to drag-and-drop MicroSim folders from repositories. We also try to be consistent with the file naming conventions of the p5.js editor as shown above. One Directory Per MicroSim - we encourage MicroSim authors to package everything a MicroSim needs into a single folder or directory. This allows the folder to be quickly copied by users or build tools. A index.md - each MicroSim should contain an index.md file. This is the main markdown file for the MicroSim. A index.html file - each MicroSim contains a pure HTML file that executes the MicroSim on a canvas. By default this is called the index.html as per the conventions in the p5.js editor A sketch.js file - this contains the JavaScript for the MicroSim. This is the default name used by the p5.js editor. Although the p5.js editor also has a style.css file, this is seldom used by our MicroSims since much of the default CSS behavior is handled by a site-wide CSS file in our on-line textbooks. Example of MicroSim Copy Command If we stick to these conventions, you can quickly add a new MicroSim to your textbook with the following UNIX copy command with the recursive and verify options: $ cp -rv ../microsims/docs/sims/sine-wave docs/sims ../microsims/docs/sims/sine-wave -> docs/sims/sine-wave ../microsims/docs/sims/sine-wave/sine-wave.js -> docs/sims/sine-wave/sine-wave.js ../microsims/docs/sims/sine-wave/sine-wave.html -> docs/sims/sine-wave/sine-wave.html ../microsims/docs/sims/sine-wave/index.md -> docs/sims/sine-wave/index.md ../microsims/docs/sims/sine-wave/sine-wave.png -> docs/sims/sine-wave/sine-wave.png This command assumes you have checked out the MicroSims repository in a sibling directory for your textbook and you are in the home directory of your textbook. After you execute this command you can then modify your mkdocs.yml and your sims/index.md files to reference this MicroSim. Addition to mkdocs.md - Sims: - Gallery: sims/index.md - Sine Wave: sims/sine-wave/index.md Addition to sims/index.md ## Sine Wave [Sine Wave](./sine-wave/index.md) Iframe reference Now any chapter can easily include this MicroSim in their content with an HTML <iframe> reference <iframe src=\"/mkdocs-for-intelligent-textbooks/sims/sine-wave/sine-wave.html\" width=\"676px\" height=\"495px\" scrolling=\"no\"></iframe> Note that the name of the repository must be included in the src attribute. This seems like a bug and requires a global replacement if the name of your git repository changes. Note that the width of the MicroSim is hard coded to be 676 pixels. This can be optimized to fill the with of the main. Connection to the Element","title":"Adding a MicroSim"},{"location":"tutorial/adding-a-microsim/#adding-a-microsim","text":"In this section we show you how to add an individual p5.js MicroSim to your intelligent textbook. A MicroSim is a single-page simulation used to illustrate a concept in your textbook. It is often written in JavaScript and the simulation run within a rectangular canvas that fills the center area of the page. We design the MicroSim so that it can be easily added to any web page with a single reference such as an HTML iframe .","title":"Adding a MicroSim"},{"location":"tutorial/adding-a-microsim/#the-need-for-consistency","text":"Although these guidelines might seem somewhat rigid at first, our experience has show that by forcing consistency we get much better results when we ask generative AI programs to generate new MicroSims or have generative AI customize a MicroSim. Giving a generative AI program a well-documented sketch.js file maximizes the probability that the generative AI application or agent will generate the correct MicroSim without the need for manual interventions.","title":"The Need for Consistency"},{"location":"tutorial/adding-a-microsim/#microsim-layout-strategy","text":"Based on feedback from instructors, we use the following layout conventions. The canvas is typically around 670 pixels wide to fit in the default center section of a mkdocs material page. The canvas is divided into two regions. The top region is the drawing region and the bottom region holds the controls such as sliders and buttons. The top drawing region is drawn with a background color of aliceblue . The bottom control have a white background. A JavaScript template using p5.js or vis.js is used to create a consistent layout so an iframe can be quickly inserted into any markdown page in the textbook. A CSS file creates a 2-pixel wide border so that the users know it is an active region that they can change simulation parameters. Note that these are default intelligent textbook conventions, but there is still a wide variety of options you can still use. Some MicroSims are best used in a screen that takes the full-with of your browser. These are easy to create by overriding the default behavior.","title":"MicroSim Layout Strategy"},{"location":"tutorial/adding-a-microsim/#file-conventions","text":"There are a variety of ways you can store MicroSims based on the needs of your users. The structure below is to promote high-quality documentation and reuse by allowing users to drag-and-drop MicroSim folders from repositories. We also try to be consistent with the file naming conventions of the p5.js editor as shown above. One Directory Per MicroSim - we encourage MicroSim authors to package everything a MicroSim needs into a single folder or directory. This allows the folder to be quickly copied by users or build tools. A index.md - each MicroSim should contain an index.md file. This is the main markdown file for the MicroSim. A index.html file - each MicroSim contains a pure HTML file that executes the MicroSim on a canvas. By default this is called the index.html as per the conventions in the p5.js editor A sketch.js file - this contains the JavaScript for the MicroSim. This is the default name used by the p5.js editor. Although the p5.js editor also has a style.css file, this is seldom used by our MicroSims since much of the default CSS behavior is handled by a site-wide CSS file in our on-line textbooks.","title":"File Conventions"},{"location":"tutorial/adding-a-microsim/#example-of-microsim-copy-command","text":"If we stick to these conventions, you can quickly add a new MicroSim to your textbook with the following UNIX copy command with the recursive and verify options: $ cp -rv ../microsims/docs/sims/sine-wave docs/sims ../microsims/docs/sims/sine-wave -> docs/sims/sine-wave ../microsims/docs/sims/sine-wave/sine-wave.js -> docs/sims/sine-wave/sine-wave.js ../microsims/docs/sims/sine-wave/sine-wave.html -> docs/sims/sine-wave/sine-wave.html ../microsims/docs/sims/sine-wave/index.md -> docs/sims/sine-wave/index.md ../microsims/docs/sims/sine-wave/sine-wave.png -> docs/sims/sine-wave/sine-wave.png This command assumes you have checked out the MicroSims repository in a sibling directory for your textbook and you are in the home directory of your textbook. After you execute this command you can then modify your mkdocs.yml and your sims/index.md files to reference this MicroSim.","title":"Example of MicroSim Copy Command"},{"location":"tutorial/adding-a-microsim/#addition-to-mkdocsmd","text":"- Sims: - Gallery: sims/index.md - Sine Wave: sims/sine-wave/index.md","title":"Addition to mkdocs.md"},{"location":"tutorial/adding-a-microsim/#addition-to-simsindexmd","text":"## Sine Wave [Sine Wave](./sine-wave/index.md)","title":"Addition to sims/index.md"},{"location":"tutorial/adding-a-microsim/#iframe-reference","text":"Now any chapter can easily include this MicroSim in their content with an HTML <iframe> reference <iframe src=\"/mkdocs-for-intelligent-textbooks/sims/sine-wave/sine-wave.html\" width=\"676px\" height=\"495px\" scrolling=\"no\"></iframe> Note that the name of the repository must be included in the src attribute. This seems like a bug and requires a global replacement if the name of your git repository changes. Note that the width of the MicroSim is hard coded to be 676 pixels. This can be optimized to fill the with of the main.","title":"Iframe reference"},{"location":"tutorial/adding-a-microsim/#connection-to-the-element","text":"","title":"Connection to the Element"},{"location":"tutorial/admonition-prompt-copy/","text":"Adding \"Copy\" to Prompt Admonitions It would be wonderful if for every prompt, we could allow the user to copy that prompt directly to their pasteboard with just a single click. To do this we need to first add a JavaScript event listener that runs if we see an admonition of type prompt . When we see this the JavaScript will add a copy button that can be clicked on. Clicking on the button will copy the entire contents of the admonition to the paste buffer. We can then move the copy button to the upper right using CSS. Here is what the screen will look like after we add the JavaScript: After we add the CSS, the copy button will appear in the upper right corner of the admonition. Additional JavaScript Here is the JavaScript: document.addEventListener(\"DOMContentLoaded\", function () { // Find all admonitions with the \"prompt\" class document.querySelectorAll(\".admonition.prompt\").forEach((admonition) => { // Create a \"Copy\" button const copyButton = document.createElement(\"button\"); copyButton.textContent = \"Copy\"; copyButton.className = \"copy-button\"; // Append the button to the admonition admonition.appendChild(copyButton); // Add event listener for the button copyButton.addEventListener(\"click\", () => { // Collect all text content inside the admonition except the title and button const promptText = Array.from(admonition.querySelectorAll(\"p:not(.admonition-title)\")) .map((p) => p.textContent.trim()) .join(\"\\n\"); if (promptText) { // Copy the collected text to the clipboard navigator.clipboard.writeText(promptText).then( () => { // Show feedback on successful copy copyButton.textContent = \"Copied!\"; setTimeout(() => (copyButton.textContent = \"Copy\"), 2000); }, (err) => { console.error(\"Failed to copy text: \", err); } ); } else { console.error(\"No prompt text found to copy.\"); } }); }); }); Additional CSS /* Styling for the Copy Button */ .admonition.prompt { position: relative; } .admonition.prompt .copy-button { position: absolute; top: 4px; right: 6px; background-color: #0056d6; color: white; border: none; border-radius: 5px; padding: 0.3rem 0.3rem; cursor: pointer; font-size: 0.7rem; } .admonition.prompt .copy-button:hover { background-color: #0041a4; /* Darker blue on hover */ }","title":"Adding \"Copy\" to Prompt Admonitions"},{"location":"tutorial/admonition-prompt-copy/#adding-copy-to-prompt-admonitions","text":"It would be wonderful if for every prompt, we could allow the user to copy that prompt directly to their pasteboard with just a single click. To do this we need to first add a JavaScript event listener that runs if we see an admonition of type prompt . When we see this the JavaScript will add a copy button that can be clicked on. Clicking on the button will copy the entire contents of the admonition to the paste buffer. We can then move the copy button to the upper right using CSS. Here is what the screen will look like after we add the JavaScript: After we add the CSS, the copy button will appear in the upper right corner of the admonition.","title":"Adding \"Copy\" to Prompt Admonitions"},{"location":"tutorial/admonition-prompt-copy/#additional-javascript","text":"Here is the JavaScript: document.addEventListener(\"DOMContentLoaded\", function () { // Find all admonitions with the \"prompt\" class document.querySelectorAll(\".admonition.prompt\").forEach((admonition) => { // Create a \"Copy\" button const copyButton = document.createElement(\"button\"); copyButton.textContent = \"Copy\"; copyButton.className = \"copy-button\"; // Append the button to the admonition admonition.appendChild(copyButton); // Add event listener for the button copyButton.addEventListener(\"click\", () => { // Collect all text content inside the admonition except the title and button const promptText = Array.from(admonition.querySelectorAll(\"p:not(.admonition-title)\")) .map((p) => p.textContent.trim()) .join(\"\\n\"); if (promptText) { // Copy the collected text to the clipboard navigator.clipboard.writeText(promptText).then( () => { // Show feedback on successful copy copyButton.textContent = \"Copied!\"; setTimeout(() => (copyButton.textContent = \"Copy\"), 2000); }, (err) => { console.error(\"Failed to copy text: \", err); } ); } else { console.error(\"No prompt text found to copy.\"); } }); }); });","title":"Additional JavaScript"},{"location":"tutorial/admonition-prompt-copy/#additional-css","text":"/* Styling for the Copy Button */ .admonition.prompt { position: relative; } .admonition.prompt .copy-button { position: absolute; top: 4px; right: 6px; background-color: #0056d6; color: white; border: none; border-radius: 5px; padding: 0.3rem 0.3rem; cursor: pointer; font-size: 0.7rem; } .admonition.prompt .copy-button:hover { background-color: #0041a4; /* Darker blue on hover */ }","title":"Additional CSS"},{"location":"tutorial/admonitions/","text":"Admonitions A admonition is a section of text that is seperate from the main flow. Admonitions are designed to that they can be quickly skipped over if the user is not concerned with the topic. Admontions are used to store text such as abstracts, note, info, tip, success, question, warning, failure, danger, bug, example and quote. mkdocs-materail admonitions documentation Use of Admonitions in Intelligent Textbooks Showing the Answer #### Definition of Degree of a Node What is the \"degree\" of a node in a graph? <div class=\"upper-alpha\" markdown> 1. The shortest path between two nodes in the graph 2. The total number of edges connected to the node 3. The number of nodes directly reachable from the node 4. The maximum number of edges any node in the graph has </div> ??? Question \"Show Answer\" The correct answer is **B**. The degree of a node in a graph is the total number of edges connected to that node. For undirected graphs, this includes all edges, while for directed graphs, it can be further classified into in-degree (edges coming into the node) and out-degree (edges going out of the node). Rendering: Definition of Degree of a Node What is the \"degree\" of a node in a graph? 1. The shortest path between two nodes in the graph 2. The total number of edges connected to the node 3. The number of nodes directly reachable from the node 4. The maximum number of edges any node in the graph has ??? Question \"Show Answer\" The correct answer is B . The degree of a node in a graph is the total number of edges connected to that node. For undirected graphs, this includes all edges, while for directed graphs, it can be further classified into in-degree (edges coming into the node) and out-degree (edges going out of the node). Configuration markdown_extensions: - admonition","title":"Admonitions"},{"location":"tutorial/admonitions/#admonitions","text":"A admonition is a section of text that is seperate from the main flow. Admonitions are designed to that they can be quickly skipped over if the user is not concerned with the topic. Admontions are used to store text such as abstracts, note, info, tip, success, question, warning, failure, danger, bug, example and quote. mkdocs-materail admonitions documentation","title":"Admonitions"},{"location":"tutorial/admonitions/#use-of-admonitions-in-intelligent-textbooks","text":"","title":"Use of Admonitions in Intelligent Textbooks"},{"location":"tutorial/admonitions/#showing-the-answer","text":"#### Definition of Degree of a Node What is the \"degree\" of a node in a graph? <div class=\"upper-alpha\" markdown> 1. The shortest path between two nodes in the graph 2. The total number of edges connected to the node 3. The number of nodes directly reachable from the node 4. The maximum number of edges any node in the graph has </div> ??? Question \"Show Answer\" The correct answer is **B**. The degree of a node in a graph is the total number of edges connected to that node. For undirected graphs, this includes all edges, while for directed graphs, it can be further classified into in-degree (edges coming into the node) and out-degree (edges going out of the node). Rendering:","title":"Showing the Answer"},{"location":"tutorial/admonitions/#definition-of-degree-of-a-node","text":"What is the \"degree\" of a node in a graph? 1. The shortest path between two nodes in the graph 2. The total number of edges connected to the node 3. The number of nodes directly reachable from the node 4. The maximum number of edges any node in the graph has ??? Question \"Show Answer\" The correct answer is B . The degree of a node in a graph is the total number of edges connected to that node. For undirected graphs, this includes all edges, while for directed graphs, it can be further classified into in-degree (edges coming into the node) and out-degree (edges going out of the node).","title":"Definition of Degree of a Node"},{"location":"tutorial/admonitions/#configuration","text":"markdown_extensions: - admonition","title":"Configuration"},{"location":"tutorial/directory-structure/","text":"Directory Structure for Intelligent Textbooks Here is our recommend file structure for an intelligent textbook. The actual names of the folders and files are mostly convention, and they can be changed as long as your mkdocs.yml file is also updated. Note that in the listing below, folders are listed before files. project-root/ \u251c\u2500\u2500 data/ # Data files like the learning graph in csv and json format \u251c\u2500\u2500 data/learning-graph.json # Learning graph for this course in JSON format \u251c\u2500\u2500 data/learning-graph.csv # Learning graph for this course in CSV format \u251c\u2500\u2500 docs/ # All markdown content that is converted to HTML goes here \u2502 \u251c\u2500\u2500 img/ # Images for general use \u2502 \u251c\u2500\u2500 img/cover.png # Book cover \u2502 \u251c\u2500\u2500 img/logo.png # Book logo for upper left corner \u2502 \u251c\u2500\u2500 img/favicon.ico # Book favicon for logo in browser bookmarks | \u251c\u2500\u2500 chapters/ # Directory for all textbook chapter content \u2502 \u2514\u2500\u2500 index.md # Home landing page for the textbook \u2502 \u2502 \u251c\u2500\u2500 chapter-1/ # Directory for holding content for chapter 1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md # Main content for chapter 1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 fig-1.png # Chapter 1 figure 1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 fig-2.png # Chapter 1 figure 2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md # Main content for chapter 1 \u2502 \u2502 \u251c\u2500\u2500 chapter-2/ # Directory for holding content for chapter 1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 fig-1.png # Chapter 2 figure 1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 fig-2.png # Chapter 2 figure 2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md # Main content for chapter 2 \u2502 \u251c\u2500\u2500 css/ # Directory for any custom CSS files \u2502 \u251c\u2500\u2500 css/extra.css # File of CSS added to each page \u2502 \u251c\u2500\u2500 js/ # Custom JavaScript files \u2502 \u251c\u2500\u2500 js/extra.js # File of extra Javascript for each page \u2502 \u251c\u2500\u2500 sims/ # Interactive simulations \u2502 \u2502 \u251c\u2500\u2500 sim-name-1/ # Each simulation in its own directory \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md # Documentation for the simulation \u2502 \u2502 \u2502 \u251c\u2500\u2500 sketch.js # Main simulation code (if using p5.js) \u2502 \u2502 \u2502 \u2514\u2500\u2500 img/ # Simulation-specific images \u2502 \u2514\u2500\u2500 contact.md # Contact name for the book \u2502 \u2514\u2500\u2500 feedback.md # How users can provide feedback on this book \u2502 \u2514\u2500\u2500 glossary.md # Glossary of terms \u2502 \u2514\u2500\u2500 index.md # List of Chapters or Table of Contents \u2502 \u2514\u2500\u2500 license.md # Creative Commons or similar license data \u2502 \u2514\u2500\u2500 references.md # External references such as citations to other papers, books and articles \u251c\u2500\u2500 src/ # source code including content management tools \u251c\u2500\u2500 mkdocs.yml # Configuration file \u251c\u2500\u2500 README.md # Repository documentation \u2514\u2500\u2500 requirements.txt # Python dependencies including mkdocs-material and extensions !!! note You can create your own \"tree\" diagram like the one above by installing the UNIX tree command.","title":"Directory Structure for Intelligent Textbooks"},{"location":"tutorial/directory-structure/#directory-structure-for-intelligent-textbooks","text":"Here is our recommend file structure for an intelligent textbook. The actual names of the folders and files are mostly convention, and they can be changed as long as your mkdocs.yml file is also updated. Note that in the listing below, folders are listed before files. project-root/ \u251c\u2500\u2500 data/ # Data files like the learning graph in csv and json format \u251c\u2500\u2500 data/learning-graph.json # Learning graph for this course in JSON format \u251c\u2500\u2500 data/learning-graph.csv # Learning graph for this course in CSV format \u251c\u2500\u2500 docs/ # All markdown content that is converted to HTML goes here \u2502 \u251c\u2500\u2500 img/ # Images for general use \u2502 \u251c\u2500\u2500 img/cover.png # Book cover \u2502 \u251c\u2500\u2500 img/logo.png # Book logo for upper left corner \u2502 \u251c\u2500\u2500 img/favicon.ico # Book favicon for logo in browser bookmarks | \u251c\u2500\u2500 chapters/ # Directory for all textbook chapter content \u2502 \u2514\u2500\u2500 index.md # Home landing page for the textbook \u2502 \u2502 \u251c\u2500\u2500 chapter-1/ # Directory for holding content for chapter 1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md # Main content for chapter 1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 fig-1.png # Chapter 1 figure 1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 fig-2.png # Chapter 1 figure 2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md # Main content for chapter 1 \u2502 \u2502 \u251c\u2500\u2500 chapter-2/ # Directory for holding content for chapter 1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 fig-1.png # Chapter 2 figure 1 \u2502 \u2502 \u2502 \u251c\u2500\u2500 fig-2.png # Chapter 2 figure 2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md # Main content for chapter 2 \u2502 \u251c\u2500\u2500 css/ # Directory for any custom CSS files \u2502 \u251c\u2500\u2500 css/extra.css # File of CSS added to each page \u2502 \u251c\u2500\u2500 js/ # Custom JavaScript files \u2502 \u251c\u2500\u2500 js/extra.js # File of extra Javascript for each page \u2502 \u251c\u2500\u2500 sims/ # Interactive simulations \u2502 \u2502 \u251c\u2500\u2500 sim-name-1/ # Each simulation in its own directory \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md # Documentation for the simulation \u2502 \u2502 \u2502 \u251c\u2500\u2500 sketch.js # Main simulation code (if using p5.js) \u2502 \u2502 \u2502 \u2514\u2500\u2500 img/ # Simulation-specific images \u2502 \u2514\u2500\u2500 contact.md # Contact name for the book \u2502 \u2514\u2500\u2500 feedback.md # How users can provide feedback on this book \u2502 \u2514\u2500\u2500 glossary.md # Glossary of terms \u2502 \u2514\u2500\u2500 index.md # List of Chapters or Table of Contents \u2502 \u2514\u2500\u2500 license.md # Creative Commons or similar license data \u2502 \u2514\u2500\u2500 references.md # External references such as citations to other papers, books and articles \u251c\u2500\u2500 src/ # source code including content management tools \u251c\u2500\u2500 mkdocs.yml # Configuration file \u251c\u2500\u2500 README.md # Repository documentation \u2514\u2500\u2500 requirements.txt # Python dependencies including mkdocs-material and extensions !!! note You can create your own \"tree\" diagram like the one above by installing the UNIX tree command.","title":"Directory Structure for Intelligent Textbooks"},{"location":"tutorial/feedback/","text":"","title":"Feedback"},{"location":"tutorial/getting-started/","text":"Getting Started Building a Intelligent Textbook with mkdocs-material Prerequisites This getting started guide assumes you have Python installed on your local system and you have the permissions to install conda and pip. You can test this by typing the python --version command into your terminal: $ python --version Python 3.13.0 If this does not work, we suggest using ChatGPT with the prompt: \"How do I install Python on my Windows 11 PC?\" or similar. Sample Book Structure In this getting started section we will have the following pages of our book: home page list of chapters chapter 1 chapter 2 chapter 3 We will build a simple website with page navigation and search (turned on by default in mkdocs). File structure Here are the paths to these documents relative to the base of your GitHub repository ```linenums=\"0\" docs/index.md docs/chapters/index.md docs/chapters/chapter-1.md docs/chapters/chapter-2.md docs/chapters/chapter-3.md mkdocs.yml You can find all of these files on a sample test GitHub repository here: [https://github.com/dmccreary/i-book-v1](https://github.com/dmccreary/i-book-v1) ## Structure of the mkdocs.yml file ```yml site_name: Mkdocs for Intelligent Textbooks repo_url: 'https://github.com/YOUR_GITHUB_ID/i-book-v1' nav: - Home: index.md - List of Chapters: - Intro: chapters/index.md - Chapter 1: chapters/chapter-1.md - Chapter 2: chapters/chapter-2.md - Chapter 3: chapters/chapter-3.md theme: name: material !!! Note In the above, make sure you change YOUR_GITHUB_ID to your actual GitHub account id. When we finish this lesson, this will will render the following site: Creating a Local Build We will use the conda system to create a virtual private environment for building our site. This environment will make sure the versions of libraries we need for our site will not conflict with your other Python projects. Step 1: Install Conda Follow the instructions for your computer on the anaconda website for downloading miniconda. https://docs.anaconda.com/miniconda/install/ Make sure you $PATH variable has conda on it. If not, you can setup an alias or use the whereis program to find the full path: $ whereis conda conda: /Users/dan/miniconda3/condabin/conda To test that it is installed run conda with the --version option: $ conda --version conda 24.9.2 Step 2: Create a Python 3 Virtual Environment for mkdocs conda deactivate conda create -n mkdocs python=3 conda activate mkdocs Your prompt should now indicate that you are in the mkdocs environment: (mkdocs) $ Step 3: Install mkdocs and the mkdocs-material Libraries with pip We will use the Python pip command to install the right libraries: (mkdocs) $ pip install mkdocs mkdocs-material This command will intall the latest version of the mkdocs and mkdocs-material libraries. Alternatively, you can leverage our requirements.txt file and run the following command: pip install -r requirements.txt This will make sure you get at least the minimal versions of these libraries that we tested our site with. Next, test that the mkdocs command is working: (mkdocs) $ mkdocs --version mkdocs, version 1.6.1 from /Users/YOUR_LOCAL_NAME/miniconda3/envs/mkdocs/lib/python3.13/site-packages/mkdocs (Python 3.13) Where YOUR_LOCAL_NAME is the name of your local account on your local filesystem. Step 4: Run the mkdocs build command The command mkdocs build will read all your markdown files and convert them into HTML. It will place all the HTML files in a directory called site . You want to make sure not to check this into your GitHub main branch. You can do this by adding site to the .gitignore file . Here is an example: ```linenums=\"0\" site .DS_Store ~$* ```sh (mkdocs) $ mkdocs build INFO - Cleaning site directory INFO - Building documentation to directory: /Users/YOUR_LOCAL_NAME/Documents/ws/i-book-v1/site INFO - Documentation built in 0.15 seconds Step 5: Run a Local Server This command will start a local web server and put your website on it. It will also monitor if any of the files in the docs directory change of if your mkdocs.yml file changes. If they do change, it will regenerate the required files. (mkdocs) $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.12 seconds INFO - [14:52:39] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [14:52:39] Serving on http://127.0.0.1:8000/ Now navigate to your localhost port 8000: http://localhost:8000 You should see the first version of the book. Step 6: Do a Deploy to GitHub Pages Once you preview your website on your local computer you are ready to publish your new creation for the world to see! We do this with the following command: (mkdocs) $ mkdocs gh-deploy linenums=\"0\" INFO - Cleaning site directory INFO - Building documentation to directory: /Users/YOUR_LOCAL_NAME/Documents/ws/i-book-v1/site INFO - Documentation built in 0.13 seconds WARNING - Version check skipped: No version specified in previous deployment. INFO - Copying '/Users/YOUR_LOCAL_NAME/Documents/ws/i-book-v1/site' to 'gh-pages' branch and pushing to GitHub. Enumerating objects: 67, done. Counting objects: 100% (67/67), done. Delta compression using up to 10 threads Compressing objects: 100% (60/60), done. Writing objects: 100% (67/67), 577.48 KiB | 6.56 MiB/s, done. Total 67 (delta 8), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (8/8), done. remote: remote: Create a pull request for 'gh-pages' on GitHub by visiting: remote: https://github.com/YOUR_GITHUB_ID/i-book-v1/pull/new/gh-pages remote: To https://github.com/YOUR_GITHUB_ID/i-book-v1.git * [new branch] gh-pages -> gh-pages INFO - Your documentation should shortly be available at: https://YOUR_GITHUB_ID.github.io/i-book-v1/ Where YOUR_GITHUB_ID is your GitHub account ID. Note that you can copy this last line from the terminal and paste it into your browser URL. Note that you can go to your GitHub repository and view the gh-pages branch. All of your HTML pages will be there. It is important that you don't check your site into your main branch since this is a duplicate of the gh-pages branch. As mentioned above, site should be in your .gitignore file. Step 7: Test Your Site You can now go to your site to test the deployment. The home will be in the GitHub pages domain that ends with github.io . The format is like this: https://YOUR_GITHUB_ID.github.io/i-book-v1/ You can also view the template used in this tutorial here: https://dmccreary.github.io/i-book-v1/ Feel free to use the GitHub fork function to make your own copy of this GitHub repo. This will save you from having to create your own directory and file structures. That is it! You have now published your first Intelligent Textbook. It does have search and navigation and we will now use generative AI tools to create fantastic content.","title":"Getting Started Building a Intelligent Textbook with mkdocs-material"},{"location":"tutorial/getting-started/#getting-started-building-a-intelligent-textbook-with-mkdocs-material","text":"","title":"Getting Started Building a Intelligent Textbook with mkdocs-material"},{"location":"tutorial/getting-started/#prerequisites","text":"This getting started guide assumes you have Python installed on your local system and you have the permissions to install conda and pip. You can test this by typing the python --version command into your terminal: $ python --version Python 3.13.0 If this does not work, we suggest using ChatGPT with the prompt: \"How do I install Python on my Windows 11 PC?\" or similar.","title":"Prerequisites"},{"location":"tutorial/getting-started/#sample-book-structure","text":"In this getting started section we will have the following pages of our book: home page list of chapters chapter 1 chapter 2 chapter 3 We will build a simple website with page navigation and search (turned on by default in mkdocs).","title":"Sample Book Structure"},{"location":"tutorial/getting-started/#file-structure","text":"Here are the paths to these documents relative to the base of your GitHub repository ```linenums=\"0\" docs/index.md docs/chapters/index.md docs/chapters/chapter-1.md docs/chapters/chapter-2.md docs/chapters/chapter-3.md mkdocs.yml You can find all of these files on a sample test GitHub repository here: [https://github.com/dmccreary/i-book-v1](https://github.com/dmccreary/i-book-v1) ## Structure of the mkdocs.yml file ```yml site_name: Mkdocs for Intelligent Textbooks repo_url: 'https://github.com/YOUR_GITHUB_ID/i-book-v1' nav: - Home: index.md - List of Chapters: - Intro: chapters/index.md - Chapter 1: chapters/chapter-1.md - Chapter 2: chapters/chapter-2.md - Chapter 3: chapters/chapter-3.md theme: name: material !!! Note In the above, make sure you change YOUR_GITHUB_ID to your actual GitHub account id. When we finish this lesson, this will will render the following site:","title":"File structure"},{"location":"tutorial/getting-started/#creating-a-local-build","text":"We will use the conda system to create a virtual private environment for building our site. This environment will make sure the versions of libraries we need for our site will not conflict with your other Python projects.","title":"Creating a Local Build"},{"location":"tutorial/getting-started/#step-1-install-conda","text":"Follow the instructions for your computer on the anaconda website for downloading miniconda. https://docs.anaconda.com/miniconda/install/ Make sure you $PATH variable has conda on it. If not, you can setup an alias or use the whereis program to find the full path: $ whereis conda conda: /Users/dan/miniconda3/condabin/conda To test that it is installed run conda with the --version option: $ conda --version conda 24.9.2","title":"Step 1: Install Conda"},{"location":"tutorial/getting-started/#step-2-create-a-python-3-virtual-environment-for-mkdocs","text":"conda deactivate conda create -n mkdocs python=3 conda activate mkdocs Your prompt should now indicate that you are in the mkdocs environment: (mkdocs) $","title":"Step 2: Create a Python 3 Virtual Environment for mkdocs"},{"location":"tutorial/getting-started/#step-3-install-mkdocs-and-the-mkdocs-material-libraries-with-pip","text":"We will use the Python pip command to install the right libraries: (mkdocs) $ pip install mkdocs mkdocs-material This command will intall the latest version of the mkdocs and mkdocs-material libraries. Alternatively, you can leverage our requirements.txt file and run the following command: pip install -r requirements.txt This will make sure you get at least the minimal versions of these libraries that we tested our site with. Next, test that the mkdocs command is working: (mkdocs) $ mkdocs --version mkdocs, version 1.6.1 from /Users/YOUR_LOCAL_NAME/miniconda3/envs/mkdocs/lib/python3.13/site-packages/mkdocs (Python 3.13) Where YOUR_LOCAL_NAME is the name of your local account on your local filesystem.","title":"Step 3: Install mkdocs and the mkdocs-material Libraries with pip"},{"location":"tutorial/getting-started/#step-4-run-the-mkdocs-build-command","text":"The command mkdocs build will read all your markdown files and convert them into HTML. It will place all the HTML files in a directory called site . You want to make sure not to check this into your GitHub main branch. You can do this by adding site to the .gitignore file . Here is an example: ```linenums=\"0\" site .DS_Store ~$* ```sh (mkdocs) $ mkdocs build INFO - Cleaning site directory INFO - Building documentation to directory: /Users/YOUR_LOCAL_NAME/Documents/ws/i-book-v1/site INFO - Documentation built in 0.15 seconds","title":"Step 4: Run the mkdocs build command"},{"location":"tutorial/getting-started/#step-5-run-a-local-server","text":"This command will start a local web server and put your website on it. It will also monitor if any of the files in the docs directory change of if your mkdocs.yml file changes. If they do change, it will regenerate the required files. (mkdocs) $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.12 seconds INFO - [14:52:39] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [14:52:39] Serving on http://127.0.0.1:8000/ Now navigate to your localhost port 8000: http://localhost:8000 You should see the first version of the book.","title":"Step 5: Run a Local Server"},{"location":"tutorial/getting-started/#step-6-do-a-deploy-to-github-pages","text":"Once you preview your website on your local computer you are ready to publish your new creation for the world to see! We do this with the following command: (mkdocs) $ mkdocs gh-deploy linenums=\"0\" INFO - Cleaning site directory INFO - Building documentation to directory: /Users/YOUR_LOCAL_NAME/Documents/ws/i-book-v1/site INFO - Documentation built in 0.13 seconds WARNING - Version check skipped: No version specified in previous deployment. INFO - Copying '/Users/YOUR_LOCAL_NAME/Documents/ws/i-book-v1/site' to 'gh-pages' branch and pushing to GitHub. Enumerating objects: 67, done. Counting objects: 100% (67/67), done. Delta compression using up to 10 threads Compressing objects: 100% (60/60), done. Writing objects: 100% (67/67), 577.48 KiB | 6.56 MiB/s, done. Total 67 (delta 8), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (8/8), done. remote: remote: Create a pull request for 'gh-pages' on GitHub by visiting: remote: https://github.com/YOUR_GITHUB_ID/i-book-v1/pull/new/gh-pages remote: To https://github.com/YOUR_GITHUB_ID/i-book-v1.git * [new branch] gh-pages -> gh-pages INFO - Your documentation should shortly be available at: https://YOUR_GITHUB_ID.github.io/i-book-v1/ Where YOUR_GITHUB_ID is your GitHub account ID. Note that you can copy this last line from the terminal and paste it into your browser URL. Note that you can go to your GitHub repository and view the gh-pages branch. All of your HTML pages will be there. It is important that you don't check your site into your main branch since this is a duplicate of the gh-pages branch. As mentioned above, site should be in your .gitignore file.","title":"Step 6: Do a Deploy to GitHub Pages"},{"location":"tutorial/getting-started/#step-7-test-your-site","text":"You can now go to your site to test the deployment. The home will be in the GitHub pages domain that ends with github.io . The format is like this: https://YOUR_GITHUB_ID.github.io/i-book-v1/ You can also view the template used in this tutorial here: https://dmccreary.github.io/i-book-v1/ Feel free to use the GitHub fork function to make your own copy of this GitHub repo. This will save you from having to create your own directory and file structures. That is it! You have now published your first Intelligent Textbook. It does have search and navigation and we will now use generative AI tools to create fantastic content.","title":"Step 7: Test Your Site"},{"location":"tutorial/google-analytics/","text":"Configuring Google Analytics In the mkdocs.yml template file you will find the following lines: #extra: # analytics: # provider: google # property: G-XXXX You will need to first generate a Google Analytics property ID and then remove the comment lines \"#\". extra: analytics: provider: google property: G-XXXX Google Analytics Step By Step For this step, you will need a Google Analytics account. Once you have that go to the Google Analytics developer site to create a new property: https://developers.google.com/analytics Step 1 - Find the Configure Icon Step 2 - Find the Create Button Step 3 - Select Property Step 4 - Name Your Property And give it a timezone Step 5 - Describe Your Business Step 6 - Choose Your Business Objective Step 7 - Find Your Google Analytics Measurement ID Step 8 - Copy the Google Analytics Measurement ID into Your Mkdocs.yml and Check Your ID After you do your next deploy with mkdocs gh-deploy , check that the tag in the has the Google Analytics Script. Use the Chrome Developer Tool to verify that the Google Analytics Script is Being Loaded Step 9 - Check Your ID Google Analytics has a way to check that the website had the correct ID in it. You will see the following text if the tags are found: References Google Analytics Docs","title":"Configuring Google Analytics"},{"location":"tutorial/google-analytics/#configuring-google-analytics","text":"In the mkdocs.yml template file you will find the following lines: #extra: # analytics: # provider: google # property: G-XXXX You will need to first generate a Google Analytics property ID and then remove the comment lines \"#\". extra: analytics: provider: google property: G-XXXX","title":"Configuring Google Analytics"},{"location":"tutorial/google-analytics/#google-analytics-step-by-step","text":"For this step, you will need a Google Analytics account. Once you have that go to the Google Analytics developer site to create a new property: https://developers.google.com/analytics","title":"Google Analytics Step By Step"},{"location":"tutorial/google-analytics/#step-1-find-the-configure-icon","text":"","title":"Step 1 - Find the Configure Icon"},{"location":"tutorial/google-analytics/#step-2-find-the-create-button","text":"","title":"Step 2 - Find the Create Button"},{"location":"tutorial/google-analytics/#step-3-select-property","text":"","title":"Step 3 - Select Property"},{"location":"tutorial/google-analytics/#step-4-name-your-property","text":"And give it a timezone","title":"Step 4 - Name Your Property"},{"location":"tutorial/google-analytics/#step-5-describe-your-business","text":"","title":"Step 5 - Describe Your Business"},{"location":"tutorial/google-analytics/#step-6-choose-your-business-objective","text":"","title":"Step 6 - Choose Your Business Objective"},{"location":"tutorial/google-analytics/#step-7-find-your-google-analytics-measurement-id","text":"","title":"Step 7 - Find Your Google Analytics Measurement ID"},{"location":"tutorial/google-analytics/#step-8-copy-the-google-analytics-measurement-id-into-your-mkdocsyml-and-check-your-id","text":"After you do your next deploy with mkdocs gh-deploy , check that the tag in the has the Google Analytics Script. Use the Chrome Developer Tool to verify that the Google Analytics Script is Being Loaded","title":"Step 8 - Copy the Google Analytics Measurement ID into Your Mkdocs.yml and Check Your ID"},{"location":"tutorial/google-analytics/#step-9-check-your-id","text":"Google Analytics has a way to check that the website had the correct ID in it. You will see the following text if the tags are found:","title":"Step 9 - Check Your ID"},{"location":"tutorial/google-analytics/#references","text":"Google Analytics Docs","title":"References"},{"location":"tutorial/logging/","text":"Logging Textbook Usage Intelligent textbooks offer tremendous educational possibilities, but understanding how users interact with these resources is essential for continuous improvement. Let's explore comprehensive logging strategies that can help you measure engagement and optimize your intelligent textbooks. Using Web Analytics Google Analytics provides a solid foundation for understanding basic usage patterns in your intelligent textbook sites. The mkdocs-material theme makes integration straightforward: Setting Up Google Analytics Create a Google Analytics 4 Property - Sign up for a Google Analytics account if you don't already have one, and create a new property for your intelligent textbook site. Get Your Measurement ID - After setting up your property, you'll receive a measurement ID (format: G-XXXXXXXXXX). Configure mkdocs.yml - Add the following to your mkdocs.yml file: extra: analytics: provider: google property: G-XXXXXXXXXX # Replace with your actual measurement ID As seen in your configuration file, you're already using the property ID G-D7X1XT7Z19 . Key Metrics to Track With Google Analytics successfully implemented, you can track: Page Views - Which pages are most frequently visited Session Duration - How long users spend on each page User Flow - How users navigate through your content Bounce Rate - The percentage of visitors who leave after viewing only one page Geographic Data - Where your users are located Device Information - What devices and browsers are being used Creating Custom Events Beyond the default tracking, you can implement custom events to track specific interactions: // In your js/extra.js file document.addEventListener('DOMContentLoaded', function() { // Track clicks on MicroSim launch buttons const simButtons = document.querySelectorAll('.microsim-launch'); simButtons.forEach(button => { button.addEventListener('click', function() { const simName = this.getAttribute('data-sim-name'); gtag('event', 'launch_microsim', { 'sim_name': simName }); }); }); }); Detailed Logging While Google Analytics provides excellent high-level insights, intelligent textbooks benefit from more detailed logging capabilities, especially for tracking interactive elements like MicroSims and quiz interactions. Setting Up a Logging Backend API Endpoint Creation - Establish a simple API that can receive and store interaction events: # Example Flask backend for logging from flask import Flask, request, jsonify from flask_cors import CORS import json import datetime app = Flask(__name__) CORS(app) @app.route('/log', methods=['POST']) def log_event(): data = request.json data['timestamp'] = datetime.datetime.now().isoformat() # Add to log file with open('interaction_logs.jsonl', 'a') as f: f.write(json.dumps(data) + '\\n') return jsonify({\"success\": True}) if __name__ == '__main__': app.run(debug=True) Client-Side Implementation - Create JavaScript functions for event logging: // In js/extra.js function logInteraction(eventType, eventData) { const payload = { eventType: eventType, eventData: eventData, page: window.location.pathname, timestamp: new Date().toISOString() }; fetch('https://your-logging-endpoint.com/log', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(payload) }).catch(err => console.error('Logging error:', err)); } MicroSim Specific Logging For MicroSims, track detailed usage patterns: // For p5.js based MicroSims function setupMicroSimLogging(simId) { // Log start time const startTime = new Date(); logInteraction('microsim_start', { simId: simId, startTime: startTime.toISOString() }); // Setup interval monitoring for active usage let lastInteractionTime = startTime; const interactionInterval = setInterval(() => { // If user hasn't interacted in 2 minutes, consider session ended const currentTime = new Date(); if (currentTime - lastInteractionTime > 120000) { clearInterval(interactionInterval); logInteraction('microsim_end', { simId: simId, startTime: startTime.toISOString(), endTime: lastInteractionTime.toISOString(), duration: (lastInteractionTime - startTime) / 1000 }); } }, 10000); // Update last interaction time on user input document.getElementById(simId).addEventListener('mousemove', () => { lastInteractionTime = new Date(); }); } Logging Search Terms and Questions For built-in search functionality or AI chatbots integrated with your intelligent textbook: // Log search queries document.addEventListener('DOMContentLoaded', function() { const searchInput = document.querySelector('.md-search__input'); if (searchInput) { searchInput.addEventListener('keyup', function(e) { if (e.key === 'Enter') { logInteraction('search_query', { query: this.value }); } }); } // For AI chatbot logging const chatForm = document.querySelector('.chatbot-form'); if (chatForm) { chatForm.addEventListener('submit', function(e) { const userQuestion = document.querySelector('.chatbot-input').value; logInteraction('chatbot_question', { question: userQuestion }); }); } }); Logging User-Specific Activities For personalized learning experiences, implementing user-specific logging provides valuable insights into individual learning patterns. Anonymous vs. Authenticated Logging You can implement both options: Anonymous Session Tracking - Use browser storage to maintain consistency across a single user session: // Generate anonymous user ID if not present let userId = localStorage.getItem('anonymous_user_id'); if (!userId) { userId = 'anon_' + Math.random().toString(36).substring(2, 15); localStorage.setItem('anonymous_user_id', userId); } // Include in all logging events function enhancedLogInteraction(eventType, eventData) { const payload = { userId: userId, eventType: eventType, eventData: eventData, page: window.location.pathname, timestamp: new Date().toISOString() }; // Logging code... } Authenticated User Tracking - For classroom or institutional settings where users log in: // Assuming currentUser is set on login function userLogInteraction(eventType, eventData) { if (!window.currentUser) return; // Don't log if not logged in const payload = { userId: window.currentUser.id, username: window.currentUser.username, eventType: eventType, eventData: eventData, page: window.location.pathname, timestamp: new Date().toISOString() }; // Logging code... } Progress Tracking For comprehensive learning progress analysis: // Track completion of chapters/sections function markAsCompleted(sectionId) { logInteraction('section_completed', { sectionId: sectionId, completionTime: new Date().toISOString() }); // Update UI to show completion status document.querySelector(`#${sectionId} .completion-indicator`) .classList.add('completed'); } // Track quiz performance function logQuizResult(quizId, score, maxPossible) { logInteraction('quiz_completed', { quizId: quizId, score: score, maxPossible: maxPossible, percentage: (score / maxPossible) * 100 }); } Regulatory Compliance When implementing logging systems, especially for educational purposes, adherence to privacy regulations is critical. GDPR Compliance For users in the European Union, the General Data Protection Regulation (GDPR) applies: Explicit Consent - Implement a consent banner: // Cookie consent implementation function showConsentBanner() { const banner = document.createElement('div'); banner.className = 'consent-banner'; banner.innerHTML = ` <p>This site uses cookies and logging to improve your learning experience. We track how you use our educational materials to make them better.</p> <button id=\"accept-consent\">Accept</button> <button id=\"reject-consent\">Reject</button> `; document.body.appendChild(banner); document.getElementById('accept-consent').addEventListener('click', () => { localStorage.setItem('consent_given', 'true'); banner.remove(); initializeLogging(); }); document.getElementById('reject-consent').addEventListener('click', () => { localStorage.setItem('consent_given', 'false'); banner.remove(); }); } // Check if consent already given if (localStorage.getItem('consent_given') === 'true') { initializeLogging(); } else if (localStorage.getItem('consent_given') === null) { showConsentBanner(); } Data Minimization** - Only collect what's necessary: // Example of data minimization in logging function logMinimalData(eventType, eventData) { // Remove any personally identifiable information const sanitizedData = {...eventData}; delete sanitizedData.email; delete sanitizedData.fullName; // Log only essential data logInteraction(eventType, sanitizedData); } COPPA and FERPA Compliance For educational materials that might be used by children or in educational institutions in the US: Children's Online Privacy Protection Act (COPPA) - For users under 13: // Age verification for COPPA compliance function checkAgeCompliance() { const userAge = localStorage.getItem('user_age'); if (!userAge) { const age = prompt(\"Please enter your age for compliance purposes:\"); localStorage.setItem('user_age', age); if (parseInt(age) < 13) { // Disable personal data collection for under 13 window.loggingLevel = 'minimal'; } else { window.loggingLevel = 'standard'; } } } Family Educational Rights and Privacy Act (FERPA) - For educational institutions: // Example of FERPA compliant logging function educationalLogging(eventType, eventData) { // Use institution-assigned ID instead of personal identifiers const payload = { institutionId: window.institutionId, courseId: window.courseId, studentId: window.studentId, // Institution-assigned, not PII eventType: eventType, eventData: eventData }; // Logging code... } Building an Analytics Dashboard Once you've collected detailed usage data, a dashboard helps visualize patterns and gain actionable insights. Dashboard Implementation Data Processing Pipeline : # Example data processing script for dashboard import pandas as pd import json # Load the log data logs = [] with open('interaction_logs.jsonl', 'r') as f: for line in f: logs.append(json.loads(line)) # Convert to pandas DataFrame df = pd.DataFrame(logs) # Process by event type microsim_usage = df[df['eventType'] == 'microsim_end'].groupby('eventData.simId').agg({ 'eventData.duration': ['count', 'mean', 'median', 'min', 'max'] }) # Generate insights underutilized_pages = df.groupby('page').size().sort_values().head(10) popular_pages = df.groupby('page').size().sort_values(ascending=False).head(10) popular_search_terms = df[df['eventType'] == 'search_query']['eventData.query'].value_counts().head(20) # Export for dashboard microsim_usage.to_csv('dashboard_data/microsim_usage.csv') underutilized_pages.to_csv('dashboard_data/underutilized_pages.csv') popular_pages.to_csv('dashboard_data/popular_pages.csv') popular_search_terms.to_csv('dashboard_data/popular_search_terms.csv') Dashboard Visualization // Using a library like Chart.js for the dashboard function loadDashboard() { // MicroSim usage chart fetch('dashboard_data/microsim_usage.json') .then(response => response.json()) .then(data => { const ctx = document.getElementById('microsim-usage-chart').getContext('2d'); new Chart(ctx, { type: 'bar', data: { labels: Object.keys(data), datasets: [{ label: 'Average Usage Time (seconds)', data: Object.values(data).map(item => item.mean), backgroundColor: 'rgba(54, 162, 235, 0.5)' }] } }); }); // Other dashboard charts... } Real-time Monitoring For real-time insights into active usage: // Server-side with Socket.io for real-time dashboard const io = require('socket.io')(server); // When logging an event app.post('/log', (req, res) => { const data = req.body; // Save to database... // Emit for real-time dashboard io.emit('new_event', data); res.json({success: true}); }); // Client-side dashboard updates const socket = io.connect('https://your-logging-server.com'); socket.on('new_event', (data) => { // Update dashboard in real-time updateDashboardMetrics(data); }); Intelligent Content Recommendations Use your logging data to power a recommendation engine: # Simplified recommendation engine def generate_recommendations(user_id): # Get user's recent activity user_logs = db.query(f\"SELECT * FROM logs WHERE user_id = '{user_id}' ORDER BY timestamp DESC LIMIT 100\") # Extract concepts and topics the user has engaged with user_concepts = extract_concepts_from_logs(user_logs) # Find related content that hasn't been viewed recommendations = db.query(f\"\"\" SELECT page_id, title FROM content WHERE primary_concept IN ({','.join(user_concepts)}) AND page_id NOT IN ( SELECT page FROM logs WHERE user_id = '{user_id}' AND eventType = 'page_view' ) LIMIT 5 \"\"\") return recommendations Identifying Underutilized Content One key advantage of comprehensive logging is identifying which sections of your intelligent textbook aren't receiving adequate attention. Content Engagement Analysis # Analyze content engagement def analyze_content_engagement(logs_df, threshold=0.1): # Get all pages all_pages = get_all_pages_from_site_map() # Count views per page page_views = logs_df[logs_df['eventType'] == 'page_view'].groupby('page').size() # Calculate total views total_views = page_views.sum() # Find pages with less than threshold% of total views underutilized = [] for page in all_pages: if page not in page_views or page_views[page] / total_views < threshold: underutilized.append({ 'page': page, 'views': page_views.get(page, 0), 'percentage': (page_views.get(page, 0) / total_views) * 100 if total_views > 0 else 0 }) return sorted(underutilized, key=lambda x: x['views']) By implementing these detailed logging strategies, you'll gain valuable insights into how users interact with your intelligent textbooks. This data will guide your content development efforts, helping you create more engaging and effective educational resources that truly meet your learners' needs.","title":"Logging Textbook Usage"},{"location":"tutorial/logging/#logging-textbook-usage","text":"Intelligent textbooks offer tremendous educational possibilities, but understanding how users interact with these resources is essential for continuous improvement. Let's explore comprehensive logging strategies that can help you measure engagement and optimize your intelligent textbooks.","title":"Logging Textbook Usage"},{"location":"tutorial/logging/#using-web-analytics","text":"Google Analytics provides a solid foundation for understanding basic usage patterns in your intelligent textbook sites. The mkdocs-material theme makes integration straightforward:","title":"Using Web Analytics"},{"location":"tutorial/logging/#setting-up-google-analytics","text":"Create a Google Analytics 4 Property - Sign up for a Google Analytics account if you don't already have one, and create a new property for your intelligent textbook site. Get Your Measurement ID - After setting up your property, you'll receive a measurement ID (format: G-XXXXXXXXXX). Configure mkdocs.yml - Add the following to your mkdocs.yml file: extra: analytics: provider: google property: G-XXXXXXXXXX # Replace with your actual measurement ID As seen in your configuration file, you're already using the property ID G-D7X1XT7Z19 .","title":"Setting Up Google Analytics"},{"location":"tutorial/logging/#key-metrics-to-track","text":"With Google Analytics successfully implemented, you can track: Page Views - Which pages are most frequently visited Session Duration - How long users spend on each page User Flow - How users navigate through your content Bounce Rate - The percentage of visitors who leave after viewing only one page Geographic Data - Where your users are located Device Information - What devices and browsers are being used","title":"Key Metrics to Track"},{"location":"tutorial/logging/#creating-custom-events","text":"Beyond the default tracking, you can implement custom events to track specific interactions: // In your js/extra.js file document.addEventListener('DOMContentLoaded', function() { // Track clicks on MicroSim launch buttons const simButtons = document.querySelectorAll('.microsim-launch'); simButtons.forEach(button => { button.addEventListener('click', function() { const simName = this.getAttribute('data-sim-name'); gtag('event', 'launch_microsim', { 'sim_name': simName }); }); }); });","title":"Creating Custom Events"},{"location":"tutorial/logging/#detailed-logging","text":"While Google Analytics provides excellent high-level insights, intelligent textbooks benefit from more detailed logging capabilities, especially for tracking interactive elements like MicroSims and quiz interactions.","title":"Detailed Logging"},{"location":"tutorial/logging/#setting-up-a-logging-backend","text":"API Endpoint Creation - Establish a simple API that can receive and store interaction events: # Example Flask backend for logging from flask import Flask, request, jsonify from flask_cors import CORS import json import datetime app = Flask(__name__) CORS(app) @app.route('/log', methods=['POST']) def log_event(): data = request.json data['timestamp'] = datetime.datetime.now().isoformat() # Add to log file with open('interaction_logs.jsonl', 'a') as f: f.write(json.dumps(data) + '\\n') return jsonify({\"success\": True}) if __name__ == '__main__': app.run(debug=True) Client-Side Implementation - Create JavaScript functions for event logging: // In js/extra.js function logInteraction(eventType, eventData) { const payload = { eventType: eventType, eventData: eventData, page: window.location.pathname, timestamp: new Date().toISOString() }; fetch('https://your-logging-endpoint.com/log', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(payload) }).catch(err => console.error('Logging error:', err)); }","title":"Setting Up a Logging Backend"},{"location":"tutorial/logging/#microsim-specific-logging","text":"For MicroSims, track detailed usage patterns: // For p5.js based MicroSims function setupMicroSimLogging(simId) { // Log start time const startTime = new Date(); logInteraction('microsim_start', { simId: simId, startTime: startTime.toISOString() }); // Setup interval monitoring for active usage let lastInteractionTime = startTime; const interactionInterval = setInterval(() => { // If user hasn't interacted in 2 minutes, consider session ended const currentTime = new Date(); if (currentTime - lastInteractionTime > 120000) { clearInterval(interactionInterval); logInteraction('microsim_end', { simId: simId, startTime: startTime.toISOString(), endTime: lastInteractionTime.toISOString(), duration: (lastInteractionTime - startTime) / 1000 }); } }, 10000); // Update last interaction time on user input document.getElementById(simId).addEventListener('mousemove', () => { lastInteractionTime = new Date(); }); }","title":"MicroSim Specific Logging"},{"location":"tutorial/logging/#logging-search-terms-and-questions","text":"For built-in search functionality or AI chatbots integrated with your intelligent textbook: // Log search queries document.addEventListener('DOMContentLoaded', function() { const searchInput = document.querySelector('.md-search__input'); if (searchInput) { searchInput.addEventListener('keyup', function(e) { if (e.key === 'Enter') { logInteraction('search_query', { query: this.value }); } }); } // For AI chatbot logging const chatForm = document.querySelector('.chatbot-form'); if (chatForm) { chatForm.addEventListener('submit', function(e) { const userQuestion = document.querySelector('.chatbot-input').value; logInteraction('chatbot_question', { question: userQuestion }); }); } });","title":"Logging Search Terms and Questions"},{"location":"tutorial/logging/#logging-user-specific-activities","text":"For personalized learning experiences, implementing user-specific logging provides valuable insights into individual learning patterns.","title":"Logging User-Specific Activities"},{"location":"tutorial/logging/#anonymous-vs-authenticated-logging","text":"You can implement both options: Anonymous Session Tracking - Use browser storage to maintain consistency across a single user session: // Generate anonymous user ID if not present let userId = localStorage.getItem('anonymous_user_id'); if (!userId) { userId = 'anon_' + Math.random().toString(36).substring(2, 15); localStorage.setItem('anonymous_user_id', userId); } // Include in all logging events function enhancedLogInteraction(eventType, eventData) { const payload = { userId: userId, eventType: eventType, eventData: eventData, page: window.location.pathname, timestamp: new Date().toISOString() }; // Logging code... } Authenticated User Tracking - For classroom or institutional settings where users log in: // Assuming currentUser is set on login function userLogInteraction(eventType, eventData) { if (!window.currentUser) return; // Don't log if not logged in const payload = { userId: window.currentUser.id, username: window.currentUser.username, eventType: eventType, eventData: eventData, page: window.location.pathname, timestamp: new Date().toISOString() }; // Logging code... }","title":"Anonymous vs. Authenticated Logging"},{"location":"tutorial/logging/#progress-tracking","text":"For comprehensive learning progress analysis: // Track completion of chapters/sections function markAsCompleted(sectionId) { logInteraction('section_completed', { sectionId: sectionId, completionTime: new Date().toISOString() }); // Update UI to show completion status document.querySelector(`#${sectionId} .completion-indicator`) .classList.add('completed'); } // Track quiz performance function logQuizResult(quizId, score, maxPossible) { logInteraction('quiz_completed', { quizId: quizId, score: score, maxPossible: maxPossible, percentage: (score / maxPossible) * 100 }); }","title":"Progress Tracking"},{"location":"tutorial/logging/#regulatory-compliance","text":"When implementing logging systems, especially for educational purposes, adherence to privacy regulations is critical.","title":"Regulatory Compliance"},{"location":"tutorial/logging/#gdpr-compliance","text":"For users in the European Union, the General Data Protection Regulation (GDPR) applies: Explicit Consent - Implement a consent banner: // Cookie consent implementation function showConsentBanner() { const banner = document.createElement('div'); banner.className = 'consent-banner'; banner.innerHTML = ` <p>This site uses cookies and logging to improve your learning experience. We track how you use our educational materials to make them better.</p> <button id=\"accept-consent\">Accept</button> <button id=\"reject-consent\">Reject</button> `; document.body.appendChild(banner); document.getElementById('accept-consent').addEventListener('click', () => { localStorage.setItem('consent_given', 'true'); banner.remove(); initializeLogging(); }); document.getElementById('reject-consent').addEventListener('click', () => { localStorage.setItem('consent_given', 'false'); banner.remove(); }); } // Check if consent already given if (localStorage.getItem('consent_given') === 'true') { initializeLogging(); } else if (localStorage.getItem('consent_given') === null) { showConsentBanner(); }","title":"GDPR Compliance"},{"location":"tutorial/logging/#data-minimization-only-collect-whats-necessary","text":"// Example of data minimization in logging function logMinimalData(eventType, eventData) { // Remove any personally identifiable information const sanitizedData = {...eventData}; delete sanitizedData.email; delete sanitizedData.fullName; // Log only essential data logInteraction(eventType, sanitizedData); }","title":"Data Minimization** - Only collect what's necessary:"},{"location":"tutorial/logging/#coppa-and-ferpa-compliance","text":"For educational materials that might be used by children or in educational institutions in the US: Children's Online Privacy Protection Act (COPPA) - For users under 13: // Age verification for COPPA compliance function checkAgeCompliance() { const userAge = localStorage.getItem('user_age'); if (!userAge) { const age = prompt(\"Please enter your age for compliance purposes:\"); localStorage.setItem('user_age', age); if (parseInt(age) < 13) { // Disable personal data collection for under 13 window.loggingLevel = 'minimal'; } else { window.loggingLevel = 'standard'; } } } Family Educational Rights and Privacy Act (FERPA) - For educational institutions: // Example of FERPA compliant logging function educationalLogging(eventType, eventData) { // Use institution-assigned ID instead of personal identifiers const payload = { institutionId: window.institutionId, courseId: window.courseId, studentId: window.studentId, // Institution-assigned, not PII eventType: eventType, eventData: eventData }; // Logging code... }","title":"COPPA and FERPA Compliance"},{"location":"tutorial/logging/#building-an-analytics-dashboard","text":"Once you've collected detailed usage data, a dashboard helps visualize patterns and gain actionable insights.","title":"Building an Analytics Dashboard"},{"location":"tutorial/logging/#dashboard-implementation","text":"Data Processing Pipeline : # Example data processing script for dashboard import pandas as pd import json # Load the log data logs = [] with open('interaction_logs.jsonl', 'r') as f: for line in f: logs.append(json.loads(line)) # Convert to pandas DataFrame df = pd.DataFrame(logs) # Process by event type microsim_usage = df[df['eventType'] == 'microsim_end'].groupby('eventData.simId').agg({ 'eventData.duration': ['count', 'mean', 'median', 'min', 'max'] }) # Generate insights underutilized_pages = df.groupby('page').size().sort_values().head(10) popular_pages = df.groupby('page').size().sort_values(ascending=False).head(10) popular_search_terms = df[df['eventType'] == 'search_query']['eventData.query'].value_counts().head(20) # Export for dashboard microsim_usage.to_csv('dashboard_data/microsim_usage.csv') underutilized_pages.to_csv('dashboard_data/underutilized_pages.csv') popular_pages.to_csv('dashboard_data/popular_pages.csv') popular_search_terms.to_csv('dashboard_data/popular_search_terms.csv')","title":"Dashboard Implementation"},{"location":"tutorial/logging/#dashboard-visualization","text":"// Using a library like Chart.js for the dashboard function loadDashboard() { // MicroSim usage chart fetch('dashboard_data/microsim_usage.json') .then(response => response.json()) .then(data => { const ctx = document.getElementById('microsim-usage-chart').getContext('2d'); new Chart(ctx, { type: 'bar', data: { labels: Object.keys(data), datasets: [{ label: 'Average Usage Time (seconds)', data: Object.values(data).map(item => item.mean), backgroundColor: 'rgba(54, 162, 235, 0.5)' }] } }); }); // Other dashboard charts... }","title":"Dashboard Visualization"},{"location":"tutorial/logging/#real-time-monitoring","text":"For real-time insights into active usage: // Server-side with Socket.io for real-time dashboard const io = require('socket.io')(server); // When logging an event app.post('/log', (req, res) => { const data = req.body; // Save to database... // Emit for real-time dashboard io.emit('new_event', data); res.json({success: true}); }); // Client-side dashboard updates const socket = io.connect('https://your-logging-server.com'); socket.on('new_event', (data) => { // Update dashboard in real-time updateDashboardMetrics(data); });","title":"Real-time Monitoring"},{"location":"tutorial/logging/#intelligent-content-recommendations","text":"Use your logging data to power a recommendation engine: # Simplified recommendation engine def generate_recommendations(user_id): # Get user's recent activity user_logs = db.query(f\"SELECT * FROM logs WHERE user_id = '{user_id}' ORDER BY timestamp DESC LIMIT 100\") # Extract concepts and topics the user has engaged with user_concepts = extract_concepts_from_logs(user_logs) # Find related content that hasn't been viewed recommendations = db.query(f\"\"\" SELECT page_id, title FROM content WHERE primary_concept IN ({','.join(user_concepts)}) AND page_id NOT IN ( SELECT page FROM logs WHERE user_id = '{user_id}' AND eventType = 'page_view' ) LIMIT 5 \"\"\") return recommendations","title":"Intelligent Content Recommendations"},{"location":"tutorial/logging/#identifying-underutilized-content","text":"One key advantage of comprehensive logging is identifying which sections of your intelligent textbook aren't receiving adequate attention.","title":"Identifying Underutilized Content"},{"location":"tutorial/logging/#content-engagement-analysis","text":"# Analyze content engagement def analyze_content_engagement(logs_df, threshold=0.1): # Get all pages all_pages = get_all_pages_from_site_map() # Count views per page page_views = logs_df[logs_df['eventType'] == 'page_view'].groupby('page').size() # Calculate total views total_views = page_views.sum() # Find pages with less than threshold% of total views underutilized = [] for page in all_pages: if page not in page_views or page_views[page] / total_views < threshold: underutilized.append({ 'page': page, 'views': page_views.get(page, 0), 'percentage': (page_views.get(page, 0) / total_views) * 100 if total_views > 0 else 0 }) return sorted(underutilized, key=lambda x: x['views']) By implementing these detailed logging strategies, you'll gain valuable insights into how users interact with your intelligent textbooks. This data will guide your content development efforts, helping you create more engaging and effective educational resources that truly meet your learners' needs.","title":"Content Engagement Analysis"},{"location":"tutorial/logo-and-favicon/","text":"Logo and Favicon Step 1: Generate A Logo Image I use OpenAI to generate a first draft of a logo using the following prompt. !!! prompt Please generate a colorful but minimalistic logo for this course website. The logo should be on a square 512x512 image. The background is plain white. (include course description). Download this file and place it in the file docs/img/logo.png Step 2: Use a Favicon Tool Use a web-based favicon converter tool. I use https://favicon.io/favicon-converter/ Drag the image generated by the prompt above into the web page and then download the zip file it generates. Unzip the file and place the images into the docs/img directory: favicon.ico favicon-16x16.png favicon-32x32.png logo-180x180.png logo-192x192.png logo-512x512.png Step 3: Update Your mkdocs.yml file theme: name: material logo: img/logo.png favicon: img/favicon.ico Adjust the CSS for the Logo Size I prefer a logo in the upper left corner that is about 50x50 but up to 70x120 also work. The file is: docs/css/extra.css .md-header__button.md-logo { margin: 0; padding: 0; } .md-header__button.md-logo img, .md-header__button.md-logo svg { height: 50px; width: 50px; }","title":"Logo and Favicon"},{"location":"tutorial/logo-and-favicon/#logo-and-favicon","text":"","title":"Logo and Favicon"},{"location":"tutorial/logo-and-favicon/#step-1-generate-a-logo-image","text":"I use OpenAI to generate a first draft of a logo using the following prompt. !!! prompt Please generate a colorful but minimalistic logo for this course website. The logo should be on a square 512x512 image. The background is plain white. (include course description). Download this file and place it in the file docs/img/logo.png","title":"Step 1: Generate A Logo Image"},{"location":"tutorial/logo-and-favicon/#step-2-use-a-favicon-tool","text":"Use a web-based favicon converter tool. I use https://favicon.io/favicon-converter/ Drag the image generated by the prompt above into the web page and then download the zip file it generates. Unzip the file and place the images into the docs/img directory: favicon.ico favicon-16x16.png favicon-32x32.png logo-180x180.png logo-192x192.png logo-512x512.png","title":"Step 2: Use a Favicon Tool"},{"location":"tutorial/logo-and-favicon/#step-3-update-your-mkdocsyml-file","text":"theme: name: material logo: img/logo.png favicon: img/favicon.ico","title":"Step 3: Update Your mkdocs.yml file"},{"location":"tutorial/logo-and-favicon/#adjust-the-css-for-the-logo-size","text":"I prefer a logo in the upper left corner that is about 50x50 but up to 70x120 also work. The file is: docs/css/extra.css .md-header__button.md-logo { margin: 0; padding: 0; } .md-header__button.md-logo img, .md-header__button.md-logo svg { height: 50px; width: 50px; }","title":"Adjust the CSS for the Logo Size"},{"location":"tutorial/markdown/","text":"Markdown Tutorial Markdown Tutorial Although mature XML-based book standards such as DocBook have robust consistency for interoperability between publishing systems, Markdown has no official standards. Each project has its own way of creating and extending Markdown for their own purposes and different build tools frequently only support whatever standards they like. As a result, there is very little consistency between Markdown systems. Markdown standards are also frequently extended by different projects to support their specific needs. Headers Headers in Markdown are created using the hash symbol (#). The number of hash symbols indicates the level of the header. # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6 Lists Markdown supports both unnumbered (bullet) lists and numbered (ordered) lists. Unnumbered Lists Unnumbered lists can be created using asterisks (*), plus signs (+), or hyphens (-). * Item 1 * Item 2 * Nested item 2.1 * Nested item 2.2 * Item 3 - Alternative item 1 - Alternative item 2 + Another alternative item 1 + Another alternative item 2 Numbered Lists Numbered lists are created using numbers followed by periods. 1. First item 2. Second item 1. Nested item 2.1 2. Nested item 2.2 3. Third item Note: The actual numbers don't matter in Markdown source - they will be automatically numbered in the rendered output. 1. First item 1. Second item 1. Third item This will still render as 1, 2, 3. Images Images can be inserted with an exclamation mark, followed by alt text in brackets, and the image URL in parentheses. ![Alt text for the image](path/to/image.jpg) ![Logo of our project](img/logo.png \"Optional title\") For more control, MkDocs Material supports additional attributes: ![Image with attributes](image.jpg){: width=\"300px\" align=\"right\" } Links Links are created using square brackets for the link text followed by the URL in parentheses. [Link text](https://example.com) [Link with title](https://example.com \"Title text shown on hover\") [Reference-style link][reference id] [reference id]: https://example.com \"Optional title\" For internal links in MkDocs: [Link to another page](../folder/page.md) [Link to a section on the same page](#section-id) Admonitions MkDocs Material extends Markdown with admonitions for highlighted content. These require the admonition and pymdownx.details extensions. !!! note \"Optional explicit title\" This is a note admonition. !!! tip This is a tip. !!! warning This is a warning. !!! danger This highlights dangerous actions. ??? question \"Collapsible admonition (closed by default)\" This admonition is collapsible and closed by default. ???+ example \"Collapsible admonition (open by default)\" This admonition is collapsible and open by default. Code Inline code is wrapped with backticks. Use the `print()` function in Python. Code blocks use triple backticks, optionally followed by the language name for syntax highlighting. ```python def hello_world(): print(\"Hello, world!\") MkDocs Material also supports line numbers and highlighting specific lines: ```markdown ```python linenums=\"1\" hl_lines=\"2 3\" def hello_world(): # This line is highlighted print(\"Hello, world!\") return True ## Equations MkDocs Material supports math equations using MathJax when the appropriate extensions are enabled. Inline math equations: ```markdown The formula for the area of a circle is $A = \\pi r^2$. Block equations: $$ \\frac{n!}{k!(n-k)!} = \\binom{n}{k} $$ For more complex equations with multi-line alignment: $$ \\begin{align} x &= y + z \\\\ &= a + b \\end{align} $$","title":"Markdown Tutorial"},{"location":"tutorial/markdown/#markdown-tutorial","text":"","title":"Markdown Tutorial"},{"location":"tutorial/markdown/#markdown-tutorial_1","text":"Although mature XML-based book standards such as DocBook have robust consistency for interoperability between publishing systems, Markdown has no official standards. Each project has its own way of creating and extending Markdown for their own purposes and different build tools frequently only support whatever standards they like. As a result, there is very little consistency between Markdown systems. Markdown standards are also frequently extended by different projects to support their specific needs.","title":"Markdown Tutorial"},{"location":"tutorial/markdown/#headers","text":"Headers in Markdown are created using the hash symbol (#). The number of hash symbols indicates the level of the header. # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6","title":"Headers"},{"location":"tutorial/markdown/#lists","text":"Markdown supports both unnumbered (bullet) lists and numbered (ordered) lists.","title":"Lists"},{"location":"tutorial/markdown/#unnumbered-lists","text":"Unnumbered lists can be created using asterisks (*), plus signs (+), or hyphens (-). * Item 1 * Item 2 * Nested item 2.1 * Nested item 2.2 * Item 3 - Alternative item 1 - Alternative item 2 + Another alternative item 1 + Another alternative item 2","title":"Unnumbered Lists"},{"location":"tutorial/markdown/#numbered-lists","text":"Numbered lists are created using numbers followed by periods. 1. First item 2. Second item 1. Nested item 2.1 2. Nested item 2.2 3. Third item Note: The actual numbers don't matter in Markdown source - they will be automatically numbered in the rendered output. 1. First item 1. Second item 1. Third item This will still render as 1, 2, 3.","title":"Numbered Lists"},{"location":"tutorial/markdown/#images","text":"Images can be inserted with an exclamation mark, followed by alt text in brackets, and the image URL in parentheses. ![Alt text for the image](path/to/image.jpg) ![Logo of our project](img/logo.png \"Optional title\") For more control, MkDocs Material supports additional attributes: ![Image with attributes](image.jpg){: width=\"300px\" align=\"right\" }","title":"Images"},{"location":"tutorial/markdown/#links","text":"Links are created using square brackets for the link text followed by the URL in parentheses. [Link text](https://example.com) [Link with title](https://example.com \"Title text shown on hover\") [Reference-style link][reference id] [reference id]: https://example.com \"Optional title\" For internal links in MkDocs: [Link to another page](../folder/page.md) [Link to a section on the same page](#section-id)","title":"Links"},{"location":"tutorial/markdown/#admonitions","text":"MkDocs Material extends Markdown with admonitions for highlighted content. These require the admonition and pymdownx.details extensions. !!! note \"Optional explicit title\" This is a note admonition. !!! tip This is a tip. !!! warning This is a warning. !!! danger This highlights dangerous actions. ??? question \"Collapsible admonition (closed by default)\" This admonition is collapsible and closed by default. ???+ example \"Collapsible admonition (open by default)\" This admonition is collapsible and open by default.","title":"Admonitions"},{"location":"tutorial/markdown/#code","text":"Inline code is wrapped with backticks. Use the `print()` function in Python. Code blocks use triple backticks, optionally followed by the language name for syntax highlighting. ```python def hello_world(): print(\"Hello, world!\") MkDocs Material also supports line numbers and highlighting specific lines: ```markdown ```python linenums=\"1\" hl_lines=\"2 3\" def hello_world(): # This line is highlighted print(\"Hello, world!\") return True ## Equations MkDocs Material supports math equations using MathJax when the appropriate extensions are enabled. Inline math equations: ```markdown The formula for the area of a circle is $A = \\pi r^2$. Block equations: $$ \\frac{n!}{k!(n-k)!} = \\binom{n}{k} $$ For more complex equations with multi-line alignment: $$ \\begin{align} x &= y + z \\\\ &= a + b \\end{align} $$","title":"Code"},{"location":"tutorial/navigation/","text":"Navigation Modern displays tend to be very wide. The one in the image above is over 5120 pixels wide and 1440 pixels high. For this reason, we place our navigation links on the left of the main display. We discourage our users from using top navigation such as tabs. The typical structure of our books is the following Chapters contain content with animations imbedded using Javascript or iframes Prompts contain sample prompts that you give to large-langauge models to generate customized content Sims contain MicroSims and other standalone animation programs Tutorial contains content for step by step processes for specific tasks In addition, we suggest some of the following descrete makrdown files: License - tells the user what rules govern the reuse of this content About - gives a high-level overview about the book, the learning objectives of the book, the intended audience and the background of the authors Course Description - contains a set of one or more typical single-page descriptions of this course as it might appear in a course catalog Glossary - contains a set of level 4 markdown headers each with a term and a definition. These terms are designed to be easy to link from any page using the automatic complete of editors such as Visual Studio Code with the markdown plugin. References - links to other web sites or papers How We Built This Site - give an overview of the software and tools used to generate the website from markdown Contact - how to reach the authors or support community. Note that many books use the GitHub pages to track feature requests and to report bugs. Sample Nav Configuration yaml nav: - Home: index.md - About: about.md - Tutorial: - Introduction: tutorial/index.md - Getting Started: tutorial/getting-started.md - Navigation: tutorial/navigation.md - Admonitions: tutorial/admonitions.md - Quizzes: tutorial/quizzes.md - Upper Alpha Lists: tutorial/upper-alpha-lists.md - Google Analytics: tutorial/google-analytics.md - Prompts: - Introduction: prompts/index.md - Feature Mapping: prompts/feature-mapping.md - Enumerate Concepts: prompts/enumerate-concepts.md - Generate Logo: prompts/generate-logo.md - Glossary: glossary.md - Table of Contents: toc.md - License: license.md - How We Built This Site: how-we-built-this-site.md - References: references.md - Contact: contact.md","title":"Navigation"},{"location":"tutorial/navigation/#navigation","text":"Modern displays tend to be very wide. The one in the image above is over 5120 pixels wide and 1440 pixels high. For this reason, we place our navigation links on the left of the main display. We discourage our users from using top navigation such as tabs. The typical structure of our books is the following Chapters contain content with animations imbedded using Javascript or iframes Prompts contain sample prompts that you give to large-langauge models to generate customized content Sims contain MicroSims and other standalone animation programs Tutorial contains content for step by step processes for specific tasks In addition, we suggest some of the following descrete makrdown files: License - tells the user what rules govern the reuse of this content About - gives a high-level overview about the book, the learning objectives of the book, the intended audience and the background of the authors Course Description - contains a set of one or more typical single-page descriptions of this course as it might appear in a course catalog Glossary - contains a set of level 4 markdown headers each with a term and a definition. These terms are designed to be easy to link from any page using the automatic complete of editors such as Visual Studio Code with the markdown plugin. References - links to other web sites or papers How We Built This Site - give an overview of the software and tools used to generate the website from markdown Contact - how to reach the authors or support community. Note that many books use the GitHub pages to track feature requests and to report bugs.","title":"Navigation"},{"location":"tutorial/navigation/#sample-nav-configuration","text":"yaml nav: - Home: index.md - About: about.md - Tutorial: - Introduction: tutorial/index.md - Getting Started: tutorial/getting-started.md - Navigation: tutorial/navigation.md - Admonitions: tutorial/admonitions.md - Quizzes: tutorial/quizzes.md - Upper Alpha Lists: tutorial/upper-alpha-lists.md - Google Analytics: tutorial/google-analytics.md - Prompts: - Introduction: prompts/index.md - Feature Mapping: prompts/feature-mapping.md - Enumerate Concepts: prompts/enumerate-concepts.md - Generate Logo: prompts/generate-logo.md - Glossary: glossary.md - Table of Contents: toc.md - License: license.md - How We Built This Site: how-we-built-this-site.md - References: references.md - Contact: contact.md","title":"Sample Nav Configuration"},{"location":"tutorial/open-graph/","text":"The Open Graph Metadata Standard The Open Graph metadata standards are used by our intelligent textbooks built with mkdocs-material. This section describes how the the metadata in the HTML is used by social media platforms and how we can customize the behavior by using overrides and plugins. Open Graph Protocol Standards Open Graph is a protocol that enables any web page to become a rich object in a social graph. Originally created by Facebook in 2010, it's now widely used across many platforms including Twitter, LinkedIn, and Pinterest. The Open Graph protocol uses meta tags in the HTML <head> section of your website to define how your content should be represented when shared on social media. Here are the core Open Graph tags: Basic Open Graph Tags og:title - The title of your page/article og:type - The type of content (e.g., website, article, book) og:image - The URL of an image to represent your content og:url - The canonical URL of your page og:description - A brief description of your content og:site_name - The name of your overall site Default Social Usage You can just add the social plugin plugins: - social Using Overrides in mkdocs-material If you don't like the default social cards we can build customer ways to used markdown metadata tags to populate and override our default social cards. Here's how: Create a directory called overrides in your project root Create a file overrides/main.html with this content: {% extends \"base.html\" %} {% block extrahead %} <!-- Open Graph / Facebook --> <meta property=\"og:type\" content=\"website\"> <meta property=\"og:url\" content=\"{{ page.canonical_url }}\"> <meta property=\"og:title\" content=\"{{ page.title }} - {{ config.site_name }}\"> <meta property=\"og:description\" content=\"{{ page.meta.description or config.site_description }}\"> <meta property=\"og:image\" content=\"{{ config.site_url }}img/social-preview.png\"> <!-- Twitter --> <meta property=\"twitter:card\" content=\"summary_large_image\"> <meta property=\"twitter:url\" content=\"{{ page.canonical_url }}\"> <meta property=\"twitter:title\" content=\"{{ page.title }} - {{ config.site_name }}\"> <meta property=\"twitter:description\" content=\"{{ page.meta.description or config.site_description }}\"> <meta property=\"twitter:image\" content=\"{{ config.site_url }}img/social-preview.png\"> {% endblock %} Update your mkdocs.yml to use your custom template: theme: name: material custom_dir: overrides Page-specific Metadata For page-specific descriptions, you can add front matter to each markdown file: --- description: A detailed explanation of how to integrate MicroSims in your intelligent textbook. image: path-from-your-docs-to-your/custom-image.png --- # Your Page Title Best Practices for Open Graph Tags Image Dimensions : Use images that are at least 1200\u00d7630 pixels for optimal display Description Length : Keep descriptions between 70-200 characters Unique Images : Create unique images for important pages Testing : Use the Facebook Sharing Debugger or Twitter Card Validator to test your tags Example for a MicroSim Page For a MicroSim page, you might use: --- title: Sine Wave Visualization MicroSim description: Interactive simulation demonstrating sine wave properties with adjustable frequency and amplitude parameters. image: /img/sims/sine-wave-preview.png --- # Sine Wave MicroSim !!! note The metadata block that begins and ends with three dashes MUST be the first lines in the markdown file. And in your custom template, you'd add: <meta property=\"og:image\" content=\"{{ page.meta.image or config.site_url }}img/social-preview.png\"> This approach ensures your intelligent textbooks and MicroSims will have rich previews when shared on social platforms, increasing engagement with your educational content. Would you like more specific guidance on implementing this within your existing intelligent textbook framework?","title":"The Open Graph Metadata Standard"},{"location":"tutorial/open-graph/#the-open-graph-metadata-standard","text":"The Open Graph metadata standards are used by our intelligent textbooks built with mkdocs-material. This section describes how the the metadata in the HTML is used by social media platforms and how we can customize the behavior by using overrides and plugins.","title":"The Open Graph Metadata Standard"},{"location":"tutorial/open-graph/#open-graph-protocol-standards","text":"Open Graph is a protocol that enables any web page to become a rich object in a social graph. Originally created by Facebook in 2010, it's now widely used across many platforms including Twitter, LinkedIn, and Pinterest. The Open Graph protocol uses meta tags in the HTML <head> section of your website to define how your content should be represented when shared on social media. Here are the core Open Graph tags:","title":"Open Graph Protocol Standards"},{"location":"tutorial/open-graph/#basic-open-graph-tags","text":"og:title - The title of your page/article og:type - The type of content (e.g., website, article, book) og:image - The URL of an image to represent your content og:url - The canonical URL of your page og:description - A brief description of your content og:site_name - The name of your overall site","title":"Basic Open Graph Tags"},{"location":"tutorial/open-graph/#default-social-usage","text":"You can just add the social plugin plugins: - social","title":"Default Social Usage"},{"location":"tutorial/open-graph/#using-overrides-in-mkdocs-material","text":"If you don't like the default social cards we can build customer ways to used markdown metadata tags to populate and override our default social cards. Here's how: Create a directory called overrides in your project root Create a file overrides/main.html with this content: {% extends \"base.html\" %} {% block extrahead %} <!-- Open Graph / Facebook --> <meta property=\"og:type\" content=\"website\"> <meta property=\"og:url\" content=\"{{ page.canonical_url }}\"> <meta property=\"og:title\" content=\"{{ page.title }} - {{ config.site_name }}\"> <meta property=\"og:description\" content=\"{{ page.meta.description or config.site_description }}\"> <meta property=\"og:image\" content=\"{{ config.site_url }}img/social-preview.png\"> <!-- Twitter --> <meta property=\"twitter:card\" content=\"summary_large_image\"> <meta property=\"twitter:url\" content=\"{{ page.canonical_url }}\"> <meta property=\"twitter:title\" content=\"{{ page.title }} - {{ config.site_name }}\"> <meta property=\"twitter:description\" content=\"{{ page.meta.description or config.site_description }}\"> <meta property=\"twitter:image\" content=\"{{ config.site_url }}img/social-preview.png\"> {% endblock %} Update your mkdocs.yml to use your custom template: theme: name: material custom_dir: overrides","title":"Using Overrides in mkdocs-material"},{"location":"tutorial/open-graph/#page-specific-metadata","text":"For page-specific descriptions, you can add front matter to each markdown file: --- description: A detailed explanation of how to integrate MicroSims in your intelligent textbook. image: path-from-your-docs-to-your/custom-image.png --- # Your Page Title","title":"Page-specific Metadata"},{"location":"tutorial/open-graph/#best-practices-for-open-graph-tags","text":"Image Dimensions : Use images that are at least 1200\u00d7630 pixels for optimal display Description Length : Keep descriptions between 70-200 characters Unique Images : Create unique images for important pages Testing : Use the Facebook Sharing Debugger or Twitter Card Validator to test your tags","title":"Best Practices for Open Graph Tags"},{"location":"tutorial/open-graph/#example-for-a-microsim-page","text":"For a MicroSim page, you might use: --- title: Sine Wave Visualization MicroSim description: Interactive simulation demonstrating sine wave properties with adjustable frequency and amplitude parameters. image: /img/sims/sine-wave-preview.png --- # Sine Wave MicroSim !!! note The metadata block that begins and ends with three dashes MUST be the first lines in the markdown file. And in your custom template, you'd add: <meta property=\"og:image\" content=\"{{ page.meta.image or config.site_url }}img/social-preview.png\"> This approach ensures your intelligent textbooks and MicroSims will have rich previews when shared on social platforms, increasing engagement with your educational content. Would you like more specific guidance on implementing this within your existing intelligent textbook framework?","title":"Example for a MicroSim Page"},{"location":"tutorial/quizzes/","text":"Quizes Generative AI tools are very good at creating quizzes to help students assess their own knowledge of a concept. But how should these questions be stored within a mkdocs-material website. Here are some options. Enable Uppercase Alpha Lists By default, Markdown ordered lists only produce lists with integer numbers. However, many mulitple choice answers use uppercase alpha formats. To enable this feature we need to do two things: Enable the markdown within HTML option Add a CSS rule to turn on uppercase alpha lists Step 1: Enable the Markdown In HTML Normally when you place HTML in your Markdown, the parser will just skip over the entire block of HTML. However, if you enable the md_in_html extension the parser will look inside all HTML blocks for markdown to process. You must modify your mkdocs.yml file to add the md_in_html extension like in the following example. markdown_extensions: - md_in_html Step 2: Wrap Your Quiz Questions in an HTML div","title":"Quizes"},{"location":"tutorial/quizzes/#quizes","text":"Generative AI tools are very good at creating quizzes to help students assess their own knowledge of a concept. But how should these questions be stored within a mkdocs-material website. Here are some options.","title":"Quizes"},{"location":"tutorial/quizzes/#enable-uppercase-alpha-lists","text":"By default, Markdown ordered lists only produce lists with integer numbers. However, many mulitple choice answers use uppercase alpha formats. To enable this feature we need to do two things: Enable the markdown within HTML option Add a CSS rule to turn on uppercase alpha lists","title":"Enable Uppercase Alpha Lists"},{"location":"tutorial/quizzes/#step-1-enable-the-markdown-in-html","text":"Normally when you place HTML in your Markdown, the parser will just skip over the entire block of HTML. However, if you enable the md_in_html extension the parser will look inside all HTML blocks for markdown to process. You must modify your mkdocs.yml file to add the md_in_html extension like in the following example. markdown_extensions: - md_in_html","title":"Step 1: Enable the Markdown In HTML"},{"location":"tutorial/quizzes/#step-2-wrap-your-quiz-questions-in-an-html-div","text":"","title":"Step 2: Wrap Your Quiz Questions in an HTML div"},{"location":"tutorial/social/","text":"Adding Social Link Previews Why Social Headers Pros - allows students and learning participants to see a preview of the site they will goto when they click on a link. This dramatically increases click-through rates. Cons - requires an image card be created for each page on your website. As your sites get larger, these images can take up disk space. Publishing your site also takes longer. Modifying Your mkdocs.yml plugins: - social How It Works For each of your Markdown pages, the mkdocs-material build system creates an image. THis image is linked in the HTML header as a The Cache: Testing Your Social Media Previews There are many sites that will check for meta information in your HTML file. Metatags.io Open Graph Open Graph This Site Social Share Preview Override Test Claud Override Trials and Final Plugin","title":"Adding Social Link Previews"},{"location":"tutorial/social/#adding-social-link-previews","text":"","title":"Adding Social Link Previews"},{"location":"tutorial/social/#why-social-headers","text":"Pros - allows students and learning participants to see a preview of the site they will goto when they click on a link. This dramatically increases click-through rates. Cons - requires an image card be created for each page on your website. As your sites get larger, these images can take up disk space. Publishing your site also takes longer.","title":"Why Social Headers"},{"location":"tutorial/social/#modifying-your-mkdocsyml","text":"plugins: - social","title":"Modifying Your mkdocs.yml"},{"location":"tutorial/social/#how-it-works","text":"For each of your Markdown pages, the mkdocs-material build system creates an image. THis image is linked in the HTML header as a The Cache:","title":"How It Works"},{"location":"tutorial/social/#_1","text":"","title":""},{"location":"tutorial/social/#testing-your-social-media-previews","text":"There are many sites that will check for meta information in your HTML file. Metatags.io Open Graph Open Graph This Site Social Share Preview","title":"Testing Your Social Media Previews"},{"location":"tutorial/social/#override-test","text":"Claud Override Trials and Final Plugin","title":"Override Test"},{"location":"tutorial/testing/","text":"Testing Your Intelligent Textbook Checking for Broken Links Usability Testing","title":"Testing Your Intelligent Textbook"},{"location":"tutorial/testing/#testing-your-intelligent-textbook","text":"","title":"Testing Your Intelligent Textbook"},{"location":"tutorial/testing/#checking-for-broken-links","text":"","title":"Checking for Broken Links"},{"location":"tutorial/testing/#usability-testing","text":"","title":"Usability Testing"},{"location":"tutorial/upper-alpha-lists/","text":"Using the MD-in-HTML Markdown Extension Here is an elegant solution to the multiple-choice numbering problem. By default, Markdown parser ignores any content within a raw HTML block-level element. So when you normally wrap a markdown list in a div for styling, the Markdown parser just skips over all the markdown within the div block. However, with the md-in-html extension enabled, the content of a raw HTML block-level element is always parsed as Markdown. You can turn this on by including a markdown attribute on the opening tag. The markdown attribute will be stripped from the output, while all other attributes will be preserved. After you enable the md-in-html extension, you can add Markdown text inside an HTML element like `div . You can then add a class to that div and modify the CSS to change the formatting just within that block of Markup. This is exactly what we want for numbering our question responses with uppercase letters. Here are the three simple steps: Step 1: Modify your mkdocs.yml You need to add the md_in_html markup extension and also make sure you add an extra.css file. markdown_extensions: - md_in_html extra_css: - css/extra.css Step 2: Add A CSS Rule to extra.css Now go create or edit the docs/css/extra.css file and add the following rule: .upper-alpha ol { list-style-type: upper-alpha; } This rule says \"If you have a ordered list within any element that is in the class upper-alpha the apply the rule list-style-type: upper-alpha . This will change the lits items to use A. B. C. D. etc. instead of 1. 2. 3. 4. Step 3: Add Div to the Question Responses <div class=\"upper-alpha\" markdown> 1. First item 2. Second item 3. Third item 4. Fourth item </div> The result is perfect! 1. First item 2. Second item 3. Third item 4. Fourth item References Python Markdown Extensions md_in_html","title":"Using the MD-in-HTML Markdown Extension"},{"location":"tutorial/upper-alpha-lists/#using-the-md-in-html-markdown-extension","text":"Here is an elegant solution to the multiple-choice numbering problem. By default, Markdown parser ignores any content within a raw HTML block-level element. So when you normally wrap a markdown list in a div for styling, the Markdown parser just skips over all the markdown within the div block. However, with the md-in-html extension enabled, the content of a raw HTML block-level element is always parsed as Markdown. You can turn this on by including a markdown attribute on the opening tag. The markdown attribute will be stripped from the output, while all other attributes will be preserved. After you enable the md-in-html extension, you can add Markdown text inside an HTML element like `div . You can then add a class to that div and modify the CSS to change the formatting just within that block of Markup. This is exactly what we want for numbering our question responses with uppercase letters. Here are the three simple steps:","title":"Using the MD-in-HTML Markdown Extension"},{"location":"tutorial/upper-alpha-lists/#step-1-modify-your-mkdocsyml","text":"You need to add the md_in_html markup extension and also make sure you add an extra.css file. markdown_extensions: - md_in_html extra_css: - css/extra.css","title":"Step 1: Modify your mkdocs.yml"},{"location":"tutorial/upper-alpha-lists/#step-2-add-a-css-rule-to-extracss","text":"Now go create or edit the docs/css/extra.css file and add the following rule: .upper-alpha ol { list-style-type: upper-alpha; } This rule says \"If you have a ordered list within any element that is in the class upper-alpha the apply the rule list-style-type: upper-alpha . This will change the lits items to use A. B. C. D. etc. instead of 1. 2. 3. 4.","title":"Step 2: Add A CSS Rule to extra.css"},{"location":"tutorial/upper-alpha-lists/#step-3-add-div-to-the-question-responses","text":"<div class=\"upper-alpha\" markdown> 1. First item 2. Second item 3. Third item 4. Fourth item </div> The result is perfect! 1. First item 2. Second item 3. Third item 4. Fourth item","title":"Step 3: Add Div to the Question Responses"},{"location":"tutorial/upper-alpha-lists/#references","text":"Python Markdown Extensions md_in_html","title":"References"},{"location":"workflow/","text":"Book Generation Workflow This section is an overview of some of the workflows we use to generate intelligent textbooks from a course description. Steps Course Description Bloom Taxonomy Concept Enumeration Concept Dependency Learning Graph","title":"Book Generation Workflow"},{"location":"workflow/#book-generation-workflow","text":"This section is an overview of some of the workflows we use to generate intelligent textbooks from a course description.","title":"Book Generation Workflow"},{"location":"workflow/#steps","text":"","title":"Steps"},{"location":"workflow/#course-description","text":"","title":"Course Description"},{"location":"workflow/#bloom-taxonomy","text":"","title":"Bloom Taxonomy"},{"location":"workflow/#concept-enumeration","text":"","title":"Concept Enumeration"},{"location":"workflow/#concept-dependency","text":"","title":"Concept Dependency"},{"location":"workflow/#learning-graph","text":"","title":"Learning Graph"},{"location":"workflow/#_1","text":"","title":""},{"location":"workflow/bloom-taxonomy/","text":"Using the 2001 Bloom Taxonomy We use the 2001 Bloom's Taxonomy to categorize learning objectives across six cognitive levels: Remember, Understand, Apply, Analyze, Evaluate, and Create. This scaffolds progressive skill development. Bloom's Taxonomy (2001 revision by Anderson & Krathwohl) provides a hierarchical framework for organizing learning objectives from simple to complex cognitive processes. It's particularly valuable for course design because it: Ensures Comprehensive Coverage : Helps instructors design objectives that span all cognitive levels rather than focusing only on lower-order thinking Provides Progressive Learning Structure : Moves from foundational knowledge to higher-order thinking: Remember : Recall facts and basic concepts Understand : Explain ideas or concepts Apply : Use information in new situations Analyze : Draw connections among ideas Evaluate : Justify decisions or standpoints Create : Produce new or original work Uses Action Verbs : Each level has associated action verbs that help write measurable objectives: Remember: define, list, recall, identify Understand: summarize, paraphrase, classify, explain Apply: implement, execute, solve, use Analyze: differentiate, organize, compare, attribute Evaluate: judge, critique, check, assess Create: design, construct, plan, develop Guides Assessment Design: Learning objectives at each level suggest appropriate assessment methods Lower levels: quizzes, recognition tasks Higher levels: projects, presentations, research Shows Learning Progression : For a \"Deep Learning\" course, objectives might progress from: Remember: \"Define neural network components\" Understand: \"Explain backpropagation algorithm\" Apply: \"Implement a CNN for image classification\" Analyze: \"Compare different optimization algorithms\" Evaluate: \"Assess model performance metrics\" Create: \"Design a novel architecture for specific problem\" This structured approach ensures students develop both foundational knowledge and advanced critical thinking skills throughout the course. !!! pro tip Just remember the phrase \"Remember Understanding Allows Analyzing Everything Creatively\" !!! prompt Please generate a colorful wide-landscape drawing of a tree using bright colors of knowledge that has the following levels: 1. Remember (red) - The soil/foundation at the very bottom of the drawing where it all begins 2. Understand (orange) - The small feeding roots below ground that take in nutrients 3. Apply (yellow) - The main center root just below the surface system that grounds knowledge 4. Analyze (green) - The main trunk above the ground that connects everything 5. Evaluate (blue) - The mid-level above ground branches that judge where to grow 6. Create (purple) - The crown/fruits at the top Make sure to place all the labels in the correct order from bottom to top.","title":"Using the 2001 Bloom Taxonomy"},{"location":"workflow/bloom-taxonomy/#using-the-2001-bloom-taxonomy","text":"We use the 2001 Bloom's Taxonomy to categorize learning objectives across six cognitive levels: Remember, Understand, Apply, Analyze, Evaluate, and Create. This scaffolds progressive skill development. Bloom's Taxonomy (2001 revision by Anderson & Krathwohl) provides a hierarchical framework for organizing learning objectives from simple to complex cognitive processes. It's particularly valuable for course design because it: Ensures Comprehensive Coverage : Helps instructors design objectives that span all cognitive levels rather than focusing only on lower-order thinking Provides Progressive Learning Structure : Moves from foundational knowledge to higher-order thinking: Remember : Recall facts and basic concepts Understand : Explain ideas or concepts Apply : Use information in new situations Analyze : Draw connections among ideas Evaluate : Justify decisions or standpoints Create : Produce new or original work Uses Action Verbs : Each level has associated action verbs that help write measurable objectives: Remember: define, list, recall, identify Understand: summarize, paraphrase, classify, explain Apply: implement, execute, solve, use Analyze: differentiate, organize, compare, attribute Evaluate: judge, critique, check, assess Create: design, construct, plan, develop Guides Assessment Design: Learning objectives at each level suggest appropriate assessment methods Lower levels: quizzes, recognition tasks Higher levels: projects, presentations, research Shows Learning Progression : For a \"Deep Learning\" course, objectives might progress from: Remember: \"Define neural network components\" Understand: \"Explain backpropagation algorithm\" Apply: \"Implement a CNN for image classification\" Analyze: \"Compare different optimization algorithms\" Evaluate: \"Assess model performance metrics\" Create: \"Design a novel architecture for specific problem\" This structured approach ensures students develop both foundational knowledge and advanced critical thinking skills throughout the course. !!! pro tip Just remember the phrase \"Remember Understanding Allows Analyzing Everything Creatively\" !!! prompt Please generate a colorful wide-landscape drawing of a tree using bright colors of knowledge that has the following levels: 1. Remember (red) - The soil/foundation at the very bottom of the drawing where it all begins 2. Understand (orange) - The small feeding roots below ground that take in nutrients 3. Apply (yellow) - The main center root just below the surface system that grounds knowledge 4. Analyze (green) - The main trunk above the ground that connects everything 5. Evaluate (blue) - The mid-level above ground branches that judge where to grow 6. Create (purple) - The crown/fruits at the top Make sure to place all the labels in the correct order from bottom to top.","title":"Using the 2001 Bloom Taxonomy"},{"location":"workflow/chapters-and-sections/","text":"Generating Chapters and Sections Now that we have our overall knowledge graph generated, we can next focus on generating content for individual chapters and within a chapter an individual section.","title":"Generating Chapters and Sections"},{"location":"workflow/chapters-and-sections/#generating-chapters-and-sections","text":"Now that we have our overall knowledge graph generated, we can next focus on generating content for individual chapters and within a chapter an individual section.","title":"Generating Chapters and Sections"},{"location":"workflow/concept-dependency/","text":"Concept Dependency In this step we create a dependency graph of concepts. The dependency graph tells us what concepts we need to master before we can learn a new concept. A learning graph creates learning\u2011order relationships between concepts. These dependencies establish a structured sequence where foundational concepts precede advanced topics. This is technically called a directed acyclic graph (DAG) since there can be no loops in a dependency graph. Loops are concepts that both depend on each other. Note that a DAG might have multiple learning paths. There might be multiple different ways to master a new concept. For example, based on the student's background one path might take them through concepts that require a strong math background such as calculus. Another path might teach a new concept using metaphors and storytelling which do not require advanced math training. Sample Prompt !!! prompt Your are an expert at understanding learning dependencies in teaching new Concepts in a course. You understand how directed acyclic graphs (DAGs) are used to build learning graphs for a course. You understand how to generate a new CSV file that holds a learning graph. Learning dependencies focus on understanding what order the Concepts should be taught to a student before they are ready to learn a specific concept. For input to this step, use the attached enumerated-concepts.md file or look in the project knowledge area for this file. Note that the file contains a numbered list. The number is called the Concept ID and the label after the number is called the ConceptLabel. Please create a fully connected concept learning dependency graph for the concepts in this course in a new CSV file. Add a new pipe-delimited column that contains the dependant concept IDs. Here is the format of the new CSV output file you will create. The first row in the file contains the header metadata. Return the new list as a CSV file using the following format: 1. The first column in the CSV file is a numeric ConceptID you assigned in the list above. 2. The second column is the ConceptLabel. 3. The third column is the Dependencies which is a pipe-delimited list of the ConceptIDs that the concept depends upon. The first row of the CSV file you generate will be the following header row: ConceptID,ConceptLabel,Dependencies Check your results to make sure that all concepts are connected to at least one other concept. Foundation Concepts are concepts that have no dependant concepts in this set. They have an empty third column.","title":"Concept Dependency"},{"location":"workflow/concept-dependency/#concept-dependency","text":"In this step we create a dependency graph of concepts. The dependency graph tells us what concepts we need to master before we can learn a new concept. A learning graph creates learning\u2011order relationships between concepts. These dependencies establish a structured sequence where foundational concepts precede advanced topics. This is technically called a directed acyclic graph (DAG) since there can be no loops in a dependency graph. Loops are concepts that both depend on each other. Note that a DAG might have multiple learning paths. There might be multiple different ways to master a new concept. For example, based on the student's background one path might take them through concepts that require a strong math background such as calculus. Another path might teach a new concept using metaphors and storytelling which do not require advanced math training.","title":"Concept Dependency"},{"location":"workflow/concept-dependency/#sample-prompt","text":"!!! prompt Your are an expert at understanding learning dependencies in teaching new Concepts in a course. You understand how directed acyclic graphs (DAGs) are used to build learning graphs for a course. You understand how to generate a new CSV file that holds a learning graph. Learning dependencies focus on understanding what order the Concepts should be taught to a student before they are ready to learn a specific concept. For input to this step, use the attached enumerated-concepts.md file or look in the project knowledge area for this file. Note that the file contains a numbered list. The number is called the Concept ID and the label after the number is called the ConceptLabel. Please create a fully connected concept learning dependency graph for the concepts in this course in a new CSV file. Add a new pipe-delimited column that contains the dependant concept IDs. Here is the format of the new CSV output file you will create. The first row in the file contains the header metadata. Return the new list as a CSV file using the following format: 1. The first column in the CSV file is a numeric ConceptID you assigned in the list above. 2. The second column is the ConceptLabel. 3. The third column is the Dependencies which is a pipe-delimited list of the ConceptIDs that the concept depends upon. The first row of the CSV file you generate will be the following header row: ConceptID,ConceptLabel,Dependencies Check your results to make sure that all concepts are connected to at least one other concept. Foundation Concepts are concepts that have no dependant concepts in this set. They have an empty third column.","title":"Sample Prompt"},{"location":"workflow/concept-enumeration/","text":"Generating Concepts In this step, we create a precise inventory of all key concepts students must master. This comprehensive list ensures no important topic is overlooked. Current language models such as ChatGPT o1 and Anthropic Claude 3.7 seem to do well when we request about 250 concepts per course. We can request more concepts when their is plenty of existing knowledge about a course. For example a High School Geometry Course is well represented in training data for large-language models. However, a new course on a new topic such as the ISO GQL language standards has few online courses. Sample Prompt !!! prompt You are an expert at generating high-quality concept labels used in a knowledge graph for online training courses. For the attached course description (or course-description.md in the project knowledge) that has been enhanced with the 2001 Bloom Taxonomy, please generate a numbered list of the 250 key concepts in this course. Use a single line per concept. Each key concept should be formatted as a short concept label using title case format. Use acronyms and abbreviations only when the concept label becomes too long. Return the concept label list in the approximate order that they should be taught.","title":"Generating Concepts"},{"location":"workflow/concept-enumeration/#generating-concepts","text":"In this step, we create a precise inventory of all key concepts students must master. This comprehensive list ensures no important topic is overlooked. Current language models such as ChatGPT o1 and Anthropic Claude 3.7 seem to do well when we request about 250 concepts per course. We can request more concepts when their is plenty of existing knowledge about a course. For example a High School Geometry Course is well represented in training data for large-language models. However, a new course on a new topic such as the ISO GQL language standards has few online courses.","title":"Generating Concepts"},{"location":"workflow/concept-enumeration/#sample-prompt","text":"!!! prompt You are an expert at generating high-quality concept labels used in a knowledge graph for online training courses. For the attached course description (or course-description.md in the project knowledge) that has been enhanced with the 2001 Bloom Taxonomy, please generate a numbered list of the 250 key concepts in this course. Use a single line per concept. Each key concept should be formatted as a short concept label using title case format. Use acronyms and abbreviations only when the concept label becomes too long. Return the concept label list in the approximate order that they should be taught.","title":"Sample Prompt"},{"location":"workflow/concept-taxonomy/","text":"Generating a Course Taxonomy Overview This workflow has three parts: The generation of a 10-12 element taxonomy Updating the dependencies csv file to include the primary taxonomy as a new column of data Generating a legend in HTML for the learning graph viewer Generating the Taxonomy !!! prompt Now lets focus again on the enumerated-concepts.md file we have generated for a course. Your task is to organize these concepts into a small taxonomy of approximately a dozen classifiers. You will generate a list of the classifier labels. Here are some suggestions. The first category is \"Foundational Concepts\". These are concepts that are introduced at the start of the course and are considered prerequisites. A second category is \"Concept Definitions\" where we introduce new terms. A last category is \"Miscellaneous\". Your task is to create the rest of the classifiers and give each classifier a label and definition. Each category should include concepts that share similar characteristics, functions, or applications. Attempt to evenly divide the 150 concepts into a balanced taxonomy. Suggest 10 categories for the taxonomy and assign each concept to one or more categories. Add an 11th category called \"Miscellaneous\". Ensure that the categories cover a range of concept types, including abstract ideas, practical applications, common misunderstandings, and real-world examples. Avoid redundancy and ensure that each category is distinct. Updating the Dependency Graph CSV File !!! prompt Please update the dependencies.csv file to add a new column. The new column name is TaxonomyID. For each concept, find the primary taxonomy that the concept fits into. Only assign a single taxonomy to each concept. Here is the format for the new CSV file I want you to generate: 1. ConceptID (copied direct from the dependencies.csv file) 2. ConceptLabel (copied direct from the dependencies.csv file) 3. Dependencies (copied direct from the dependencies.csv file) 4. TaxononyID - this is the new column you will generate. Generating the Learning Graph Legend !!! prompt Please summarize the taxonomy into a numbered list with just the taxonomy label as the item in the list in raw markdown format. In this updated CSV file, each concept is assigned to a single TaxonomyID based on its primary category from our taxonomy: Here's a simplified numbered list containing just the taxonomy labels: Foundational Concepts AI Evolution and History AI Architectures and Technologies AI Capabilities and Applications Content Generation and Creativity Knowledge Management and Organization Educational Transformation Organizational Strategy and Implementation Performance Evaluation and Benchmarking Ethical and Regulatory Considerations Future Trends and Projections Implementation and Management Practices !!! prompt Please convert the list into an HTML table with the following format. Do not put any style elements ih the table other than background color and font color on the second column: <table> <tr> <td>Foundational Concepts</td> <td style=\"background-color: red; color: white;\">Red</td> </tr> <tr> <td>AI Evolution and History</td> <td style=\"background-color: orange; color: black;\">Orange</td> </tr> <td>AI Architectures and Technologies</td> <td style=\"background-color: yellow; color: black;\">Orange</td>","title":"Generating a Course Taxonomy"},{"location":"workflow/concept-taxonomy/#generating-a-course-taxonomy","text":"","title":"Generating a Course Taxonomy"},{"location":"workflow/concept-taxonomy/#overview","text":"This workflow has three parts: The generation of a 10-12 element taxonomy Updating the dependencies csv file to include the primary taxonomy as a new column of data Generating a legend in HTML for the learning graph viewer","title":"Overview"},{"location":"workflow/concept-taxonomy/#generating-the-taxonomy","text":"!!! prompt Now lets focus again on the enumerated-concepts.md file we have generated for a course. Your task is to organize these concepts into a small taxonomy of approximately a dozen classifiers. You will generate a list of the classifier labels. Here are some suggestions. The first category is \"Foundational Concepts\". These are concepts that are introduced at the start of the course and are considered prerequisites. A second category is \"Concept Definitions\" where we introduce new terms. A last category is \"Miscellaneous\". Your task is to create the rest of the classifiers and give each classifier a label and definition. Each category should include concepts that share similar characteristics, functions, or applications. Attempt to evenly divide the 150 concepts into a balanced taxonomy. Suggest 10 categories for the taxonomy and assign each concept to one or more categories. Add an 11th category called \"Miscellaneous\". Ensure that the categories cover a range of concept types, including abstract ideas, practical applications, common misunderstandings, and real-world examples. Avoid redundancy and ensure that each category is distinct.","title":"Generating the Taxonomy"},{"location":"workflow/concept-taxonomy/#updating-the-dependency-graph-csv-file","text":"!!! prompt Please update the dependencies.csv file to add a new column. The new column name is TaxonomyID. For each concept, find the primary taxonomy that the concept fits into. Only assign a single taxonomy to each concept. Here is the format for the new CSV file I want you to generate: 1. ConceptID (copied direct from the dependencies.csv file) 2. ConceptLabel (copied direct from the dependencies.csv file) 3. Dependencies (copied direct from the dependencies.csv file) 4. TaxononyID - this is the new column you will generate.","title":"Updating the Dependency Graph CSV File"},{"location":"workflow/concept-taxonomy/#generating-the-learning-graph-legend","text":"!!! prompt Please summarize the taxonomy into a numbered list with just the taxonomy label as the item in the list in raw markdown format. In this updated CSV file, each concept is assigned to a single TaxonomyID based on its primary category from our taxonomy: Here's a simplified numbered list containing just the taxonomy labels: Foundational Concepts AI Evolution and History AI Architectures and Technologies AI Capabilities and Applications Content Generation and Creativity Knowledge Management and Organization Educational Transformation Organizational Strategy and Implementation Performance Evaluation and Benchmarking Ethical and Regulatory Considerations Future Trends and Projections Implementation and Management Practices !!! prompt Please convert the list into an HTML table with the following format. Do not put any style elements ih the table other than background color and font color on the second column: <table> <tr> <td>Foundational Concepts</td> <td style=\"background-color: red; color: white;\">Red</td> </tr> <tr> <td>AI Evolution and History</td> <td style=\"background-color: orange; color: black;\">Orange</td> </tr> <td>AI Architectures and Technologies</td> <td style=\"background-color: yellow; color: black;\">Orange</td>","title":"Generating the Learning Graph Legend"},{"location":"workflow/course-description/","text":"Beginning with a Course Description We begin the textbook generation process starting with a detailed course description that outlines the target audience, prerequisites, learning objectives, and scope of content. This document forms the foundation for all subsequent development stages. Structure of a Course Description New course descriptions can be created by an individual author from scratch. In general they have the following structure. Course Title - such as \"Introduction to Deep Learning with Python\" Target Audience - such as \"High school or college students that want to learn Deep Learning\" Prerequisites - a list of prior knowledge concepts that should be mastered before they take this course. Example: Python programming Course Description - a narrative summary of what the course covers, teaching methodology, and key outcomes. Example: \"This hands-on course introduces students to deep learning fundamentals through practical Python programming...\" Learning Objectives - specific skills or knowledge students will gain by the end of the course. Example: Understand fundamental neural network architectures Build classification models using TensorFlow or PyTorch Apply deep learning to real-world datasets Evaluate and optimize model performance Topics Covered - main subject areas or modules in the course. Example: Neural network basics Convolutional neural networks (CNNs) Recurrent neural networks (RNNs) Transfer learning Ethics in AI Course Duration - length and format of instruction (8 weeks, 40 hours total, online/in-person) Assessment Methods - how student progress is evaluated (projects, assignments, exams) Tools/Software Required - technical requirements (Python 3.x, Jupyter notebook, specific libraries) Credits - academic credit value if applicable Instructor Information - relevant qualifications and experience Sample Prompt !!! prompt Please help me create a detailed course description of a new course on the topic of \"MY TOPIC\". Include: 1. Course title 2. Audience 3. Prerequisites 4. Detailed Course Description (Narrative) 5. Numbered list of Learning Objectives 6. Topics Covered 7. Tools/Software Required","title":"Beginning with a Course Description"},{"location":"workflow/course-description/#beginning-with-a-course-description","text":"We begin the textbook generation process starting with a detailed course description that outlines the target audience, prerequisites, learning objectives, and scope of content. This document forms the foundation for all subsequent development stages.","title":"Beginning with a Course Description"},{"location":"workflow/course-description/#structure-of-a-course-description","text":"New course descriptions can be created by an individual author from scratch. In general they have the following structure. Course Title - such as \"Introduction to Deep Learning with Python\" Target Audience - such as \"High school or college students that want to learn Deep Learning\" Prerequisites - a list of prior knowledge concepts that should be mastered before they take this course. Example: Python programming Course Description - a narrative summary of what the course covers, teaching methodology, and key outcomes. Example: \"This hands-on course introduces students to deep learning fundamentals through practical Python programming...\" Learning Objectives - specific skills or knowledge students will gain by the end of the course. Example: Understand fundamental neural network architectures Build classification models using TensorFlow or PyTorch Apply deep learning to real-world datasets Evaluate and optimize model performance Topics Covered - main subject areas or modules in the course. Example: Neural network basics Convolutional neural networks (CNNs) Recurrent neural networks (RNNs) Transfer learning Ethics in AI Course Duration - length and format of instruction (8 weeks, 40 hours total, online/in-person) Assessment Methods - how student progress is evaluated (projects, assignments, exams) Tools/Software Required - technical requirements (Python 3.x, Jupyter notebook, specific libraries) Credits - academic credit value if applicable Instructor Information - relevant qualifications and experience","title":"Structure of a Course Description"},{"location":"workflow/course-description/#sample-prompt","text":"!!! prompt Please help me create a detailed course description of a new course on the topic of \"MY TOPIC\". Include: 1. Course title 2. Audience 3. Prerequisites 4. Detailed Course Description (Narrative) 5. Numbered list of Learning Objectives 6. Topics Covered 7. Tools/Software Required","title":"Sample Prompt"},{"location":"workflow/faq/","text":"Generating Frequently Asked Questions (FAQs) Generating a list of frequently asked questions is a great way to help you understand what types of questions students might ask and how to create new content to make sure they get answered. It is also a good step toward build a chatbot that will answer these questions.","title":"Generating Frequently Asked Questions (FAQs)"},{"location":"workflow/faq/#generating-frequently-asked-questions-faqs","text":"Generating a list of frequently asked questions is a great way to help you understand what types of questions students might ask and how to create new content to make sure they get answered. It is also a good step toward build a chatbot that will answer these questions.","title":"Generating Frequently Asked Questions (FAQs)"},{"location":"workflow/figures-diagrams-charts/","text":"Generating Figures Diagrams and Charts Low Level SVG Drawings Mermaid Drawings Charts","title":"Generating Figures Diagrams and Charts"},{"location":"workflow/figures-diagrams-charts/#generating-figures-diagrams-and-charts","text":"","title":"Generating Figures Diagrams and Charts"},{"location":"workflow/figures-diagrams-charts/#low-level-svg-drawings","text":"","title":"Low Level SVG Drawings"},{"location":"workflow/figures-diagrams-charts/#mermaid-drawings","text":"","title":"Mermaid Drawings"},{"location":"workflow/figures-diagrams-charts/#charts","text":"","title":"Charts"},{"location":"workflow/glossary/","text":"Generating a Glossary of Terms From Concepts !!! prompt Next we need a glossary of terms for this textbook. For each of the 250 concepts, please create a ISO 11179 metadata registry type definition that is: 1. precise 2. concise 3. distinct 4. non-circular Do not place any specific business rules in the definition. When appropriate, give an example of how this term is used in the course. Return each concept label in Markdown level four \"####\" and the definition for the term in the body text. Use **Example:** before the example, but do not put a newline after the colon. Return the entire glossary of terms in a single markdown file. Place \"# Glossary of Terms\" at the top of the file. Return the terms in alphabetical order. Result Glossary of Terms","title":"Generating a Glossary of Terms From Concepts"},{"location":"workflow/glossary/#generating-a-glossary-of-terms-from-concepts","text":"!!! prompt Next we need a glossary of terms for this textbook. For each of the 250 concepts, please create a ISO 11179 metadata registry type definition that is: 1. precise 2. concise 3. distinct 4. non-circular Do not place any specific business rules in the definition. When appropriate, give an example of how this term is used in the course. Return each concept label in Markdown level four \"####\" and the definition for the term in the body text. Use **Example:** before the example, but do not put a newline after the colon. Return the entire glossary of terms in a single markdown file. Place \"# Glossary of Terms\" at the top of the file. Return the terms in alphabetical order.","title":"Generating a Glossary of Terms From Concepts"},{"location":"workflow/glossary/#result","text":"Glossary of Terms","title":"Result"},{"location":"workflow/graphic-novel/","text":"Generating a Graphic Novel Why Storytelling in Intelligent Textbooks Using the Graphic Novel Examples of Generative AI Created Graphic Novels Deep Learning Go To the Deep Learning Stories Personal Finance Go To the Personal Finance Stories Signal Processing Go To the Signal Processing Stories Steps in Generating a Graphic Novel Step 1: Generating the Overall Story Narrative Step 2: Generating the Panels Step 3: Generating a Summary Step 4: Generating a Cover Step 5: Generating Actual References Step 6: Testing Links Step 7: Generating Assessments Step 8: Testing Story Effectiveness","title":"Generating a Graphic Novel"},{"location":"workflow/graphic-novel/#generating-a-graphic-novel","text":"","title":"Generating a Graphic Novel"},{"location":"workflow/graphic-novel/#why-storytelling-in-intelligent-textbooks","text":"","title":"Why Storytelling in Intelligent Textbooks"},{"location":"workflow/graphic-novel/#using-the-graphic-novel","text":"","title":"Using the Graphic Novel"},{"location":"workflow/graphic-novel/#examples-of-generative-ai-created-graphic-novels","text":"","title":"Examples of Generative AI Created Graphic Novels"},{"location":"workflow/graphic-novel/#deep-learning","text":"Go To the Deep Learning Stories","title":"Deep Learning"},{"location":"workflow/graphic-novel/#personal-finance","text":"Go To the Personal Finance Stories","title":"Personal Finance"},{"location":"workflow/graphic-novel/#signal-processing","text":"Go To the Signal Processing Stories","title":"Signal Processing"},{"location":"workflow/graphic-novel/#steps-in-generating-a-graphic-novel","text":"","title":"Steps in Generating a Graphic Novel"},{"location":"workflow/graphic-novel/#step-1-generating-the-overall-story-narrative","text":"","title":"Step 1: Generating the Overall Story Narrative"},{"location":"workflow/graphic-novel/#step-2-generating-the-panels","text":"","title":"Step 2: Generating the Panels"},{"location":"workflow/graphic-novel/#step-3-generating-a-summary","text":"","title":"Step 3: Generating a Summary"},{"location":"workflow/graphic-novel/#step-4-generating-a-cover","text":"","title":"Step 4: Generating a Cover"},{"location":"workflow/graphic-novel/#step-5-generating-actual-references","text":"","title":"Step 5: Generating Actual References"},{"location":"workflow/graphic-novel/#step-6-testing-links","text":"","title":"Step 6: Testing Links"},{"location":"workflow/graphic-novel/#step-7-generating-assessments","text":"","title":"Step 7: Generating Assessments"},{"location":"workflow/graphic-novel/#step-8-testing-story-effectiveness","text":"","title":"Step 8: Testing Story Effectiveness"},{"location":"workflow/interactive-infographics/","text":"Generating Interactive Infographics","title":"Generating Interactive Infographics"},{"location":"workflow/interactive-infographics/#generating-interactive-infographics","text":"","title":"Generating Interactive Infographics"},{"location":"workflow/learning-graph/","text":"","title":"Learning graph"},{"location":"workflow/microsim/","text":"","title":"Microsim"}]}